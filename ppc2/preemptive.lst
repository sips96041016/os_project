                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  3 2018) (Linux)
                                      4 ; This file was generated Sat Jan 12 23:57:59 2019
                                      5 ;--------------------------------------------------------
                                      6 	.module preemptive
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _Bootstrap
                                     13 	.globl _myTimer0Handler
                                     14 	.globl _thread_manager
                                     15 	.globl _main
                                     16 	.globl _CY
                                     17 	.globl _AC
                                     18 	.globl _F0
                                     19 	.globl _RS1
                                     20 	.globl _RS0
                                     21 	.globl _OV
                                     22 	.globl _F1
                                     23 	.globl _P
                                     24 	.globl _PS
                                     25 	.globl _PT1
                                     26 	.globl _PX1
                                     27 	.globl _PT0
                                     28 	.globl _PX0
                                     29 	.globl _RD
                                     30 	.globl _WR
                                     31 	.globl _T1
                                     32 	.globl _T0
                                     33 	.globl _INT1
                                     34 	.globl _INT0
                                     35 	.globl _TXD
                                     36 	.globl _RXD
                                     37 	.globl _P3_7
                                     38 	.globl _P3_6
                                     39 	.globl _P3_5
                                     40 	.globl _P3_4
                                     41 	.globl _P3_3
                                     42 	.globl _P3_2
                                     43 	.globl _P3_1
                                     44 	.globl _P3_0
                                     45 	.globl _EA
                                     46 	.globl _ES
                                     47 	.globl _ET1
                                     48 	.globl _EX1
                                     49 	.globl _ET0
                                     50 	.globl _EX0
                                     51 	.globl _P2_7
                                     52 	.globl _P2_6
                                     53 	.globl _P2_5
                                     54 	.globl _P2_4
                                     55 	.globl _P2_3
                                     56 	.globl _P2_2
                                     57 	.globl _P2_1
                                     58 	.globl _P2_0
                                     59 	.globl _SM0
                                     60 	.globl _SM1
                                     61 	.globl _SM2
                                     62 	.globl _REN
                                     63 	.globl _TB8
                                     64 	.globl _RB8
                                     65 	.globl _TI
                                     66 	.globl _RI
                                     67 	.globl _P1_7
                                     68 	.globl _P1_6
                                     69 	.globl _P1_5
                                     70 	.globl _P1_4
                                     71 	.globl _P1_3
                                     72 	.globl _P1_2
                                     73 	.globl _P1_1
                                     74 	.globl _P1_0
                                     75 	.globl _TF1
                                     76 	.globl _TR1
                                     77 	.globl _TF0
                                     78 	.globl _TR0
                                     79 	.globl _IE1
                                     80 	.globl _IT1
                                     81 	.globl _IE0
                                     82 	.globl _IT0
                                     83 	.globl _P0_7
                                     84 	.globl _P0_6
                                     85 	.globl _P0_5
                                     86 	.globl _P0_4
                                     87 	.globl _P0_3
                                     88 	.globl _P0_2
                                     89 	.globl _P0_1
                                     90 	.globl _P0_0
                                     91 	.globl _B
                                     92 	.globl _ACC
                                     93 	.globl _PSW
                                     94 	.globl _IP
                                     95 	.globl _P3
                                     96 	.globl _IE
                                     97 	.globl _P2
                                     98 	.globl _SBUF
                                     99 	.globl _SCON
                                    100 	.globl _P1
                                    101 	.globl _TH1
                                    102 	.globl _TH0
                                    103 	.globl _TL1
                                    104 	.globl _TL0
                                    105 	.globl _TMOD
                                    106 	.globl _TCON
                                    107 	.globl _PCON
                                    108 	.globl _DPH
                                    109 	.globl _DPL
                                    110 	.globl _SP
                                    111 	.globl _P0
                                    112 	.globl _i
                                    113 	.globl _temp2
                                    114 	.globl _temp1
                                    115 	.globl _manager_ID
                                    116 	.globl _ID
                                    117 	.globl _bitmap
                                    118 	.globl _ssp
                                    119 	.globl _ThreadCreate
                                    120 	.globl _ThreadYield
                                    121 	.globl _ThreadExit
                                    122 ;--------------------------------------------------------
                                    123 ; special function registers
                                    124 ;--------------------------------------------------------
                                    125 	.area RSEG    (ABS,DATA)
      000000                        126 	.org 0x0000
                           000080   127 _P0	=	0x0080
                           000081   128 _SP	=	0x0081
                           000082   129 _DPL	=	0x0082
                           000083   130 _DPH	=	0x0083
                           000087   131 _PCON	=	0x0087
                           000088   132 _TCON	=	0x0088
                           000089   133 _TMOD	=	0x0089
                           00008A   134 _TL0	=	0x008a
                           00008B   135 _TL1	=	0x008b
                           00008C   136 _TH0	=	0x008c
                           00008D   137 _TH1	=	0x008d
                           000090   138 _P1	=	0x0090
                           000098   139 _SCON	=	0x0098
                           000099   140 _SBUF	=	0x0099
                           0000A0   141 _P2	=	0x00a0
                           0000A8   142 _IE	=	0x00a8
                           0000B0   143 _P3	=	0x00b0
                           0000B8   144 _IP	=	0x00b8
                           0000D0   145 _PSW	=	0x00d0
                           0000E0   146 _ACC	=	0x00e0
                           0000F0   147 _B	=	0x00f0
                                    148 ;--------------------------------------------------------
                                    149 ; special function bits
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0_0	=	0x0080
                           000081   154 _P0_1	=	0x0081
                           000082   155 _P0_2	=	0x0082
                           000083   156 _P0_3	=	0x0083
                           000084   157 _P0_4	=	0x0084
                           000085   158 _P0_5	=	0x0085
                           000086   159 _P0_6	=	0x0086
                           000087   160 _P0_7	=	0x0087
                           000088   161 _IT0	=	0x0088
                           000089   162 _IE0	=	0x0089
                           00008A   163 _IT1	=	0x008a
                           00008B   164 _IE1	=	0x008b
                           00008C   165 _TR0	=	0x008c
                           00008D   166 _TF0	=	0x008d
                           00008E   167 _TR1	=	0x008e
                           00008F   168 _TF1	=	0x008f
                           000090   169 _P1_0	=	0x0090
                           000091   170 _P1_1	=	0x0091
                           000092   171 _P1_2	=	0x0092
                           000093   172 _P1_3	=	0x0093
                           000094   173 _P1_4	=	0x0094
                           000095   174 _P1_5	=	0x0095
                           000096   175 _P1_6	=	0x0096
                           000097   176 _P1_7	=	0x0097
                           000098   177 _RI	=	0x0098
                           000099   178 _TI	=	0x0099
                           00009A   179 _RB8	=	0x009a
                           00009B   180 _TB8	=	0x009b
                           00009C   181 _REN	=	0x009c
                           00009D   182 _SM2	=	0x009d
                           00009E   183 _SM1	=	0x009e
                           00009F   184 _SM0	=	0x009f
                           0000A0   185 _P2_0	=	0x00a0
                           0000A1   186 _P2_1	=	0x00a1
                           0000A2   187 _P2_2	=	0x00a2
                           0000A3   188 _P2_3	=	0x00a3
                           0000A4   189 _P2_4	=	0x00a4
                           0000A5   190 _P2_5	=	0x00a5
                           0000A6   191 _P2_6	=	0x00a6
                           0000A7   192 _P2_7	=	0x00a7
                           0000A8   193 _EX0	=	0x00a8
                           0000A9   194 _ET0	=	0x00a9
                           0000AA   195 _EX1	=	0x00aa
                           0000AB   196 _ET1	=	0x00ab
                           0000AC   197 _ES	=	0x00ac
                           0000AF   198 _EA	=	0x00af
                           0000B0   199 _P3_0	=	0x00b0
                           0000B1   200 _P3_1	=	0x00b1
                           0000B2   201 _P3_2	=	0x00b2
                           0000B3   202 _P3_3	=	0x00b3
                           0000B4   203 _P3_4	=	0x00b4
                           0000B5   204 _P3_5	=	0x00b5
                           0000B6   205 _P3_6	=	0x00b6
                           0000B7   206 _P3_7	=	0x00b7
                           0000B0   207 _RXD	=	0x00b0
                           0000B1   208 _TXD	=	0x00b1
                           0000B2   209 _INT0	=	0x00b2
                           0000B3   210 _INT1	=	0x00b3
                           0000B4   211 _T0	=	0x00b4
                           0000B5   212 _T1	=	0x00b5
                           0000B6   213 _WR	=	0x00b6
                           0000B7   214 _RD	=	0x00b7
                           0000B8   215 _PX0	=	0x00b8
                           0000B9   216 _PT0	=	0x00b9
                           0000BA   217 _PX1	=	0x00ba
                           0000BB   218 _PT1	=	0x00bb
                           0000BC   219 _PS	=	0x00bc
                           0000D0   220 _P	=	0x00d0
                           0000D1   221 _F1	=	0x00d1
                           0000D2   222 _OV	=	0x00d2
                           0000D3   223 _RS0	=	0x00d3
                           0000D4   224 _RS1	=	0x00d4
                           0000D5   225 _F0	=	0x00d5
                           0000D6   226 _AC	=	0x00d6
                           0000D7   227 _CY	=	0x00d7
                                    228 ;--------------------------------------------------------
                                    229 ; overlayable register banks
                                    230 ;--------------------------------------------------------
                                    231 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        232 	.ds 8
                                    233 ;--------------------------------------------------------
                                    234 ; internal ram data
                                    235 ;--------------------------------------------------------
                                    236 	.area DSEG    (DATA)
                                    237 ;--------------------------------------------------------
                                    238 ; overlayable items in internal ram 
                                    239 ;--------------------------------------------------------
                                    240 	.area	OSEG    (OVR,DATA)
                                    241 ;--------------------------------------------------------
                                    242 ; indirectly addressable internal ram data
                                    243 ;--------------------------------------------------------
                                    244 	.area ISEG    (DATA)
                           000020   245 _ssp	=	0x0020
                           000024   246 _bitmap	=	0x0024
                           000028   247 _ID	=	0x0028
                           000029   248 _manager_ID	=	0x0029
                           00002A   249 _temp1	=	0x002a
                           00002B   250 _temp2	=	0x002b
                           00002C   251 _i	=	0x002c
                                    252 ;--------------------------------------------------------
                                    253 ; absolute internal ram data
                                    254 ;--------------------------------------------------------
                                    255 	.area IABS    (ABS,DATA)
                                    256 	.area IABS    (ABS,DATA)
                                    257 ;--------------------------------------------------------
                                    258 ; bit data
                                    259 ;--------------------------------------------------------
                                    260 	.area BSEG    (BIT)
                                    261 ;--------------------------------------------------------
                                    262 ; paged external ram data
                                    263 ;--------------------------------------------------------
                                    264 	.area PSEG    (PAG,XDATA)
                                    265 ;--------------------------------------------------------
                                    266 ; external ram data
                                    267 ;--------------------------------------------------------
                                    268 	.area XSEG    (XDATA)
                                    269 ;--------------------------------------------------------
                                    270 ; absolute external ram data
                                    271 ;--------------------------------------------------------
                                    272 	.area XABS    (ABS,XDATA)
                                    273 ;--------------------------------------------------------
                                    274 ; external initialized ram data
                                    275 ;--------------------------------------------------------
                                    276 	.area XISEG   (XDATA)
                                    277 	.area HOME    (CODE)
                                    278 	.area GSINIT0 (CODE)
                                    279 	.area GSINIT1 (CODE)
                                    280 	.area GSINIT2 (CODE)
                                    281 	.area GSINIT3 (CODE)
                                    282 	.area GSINIT4 (CODE)
                                    283 	.area GSINIT5 (CODE)
                                    284 	.area GSINIT  (CODE)
                                    285 	.area GSFINAL (CODE)
                                    286 	.area CSEG    (CODE)
                                    287 ;--------------------------------------------------------
                                    288 ; global & static initialisations
                                    289 ;--------------------------------------------------------
                                    290 	.area HOME    (CODE)
                                    291 	.area GSINIT  (CODE)
                                    292 	.area GSFINAL (CODE)
                                    293 	.area GSINIT  (CODE)
                                    294 ;--------------------------------------------------------
                                    295 ; Home
                                    296 ;--------------------------------------------------------
                                    297 	.area HOME    (CODE)
                                    298 	.area HOME    (CODE)
                                    299 ;--------------------------------------------------------
                                    300 ; code
                                    301 ;--------------------------------------------------------
                                    302 	.area CSEG    (CODE)
                                    303 ;------------------------------------------------------------
                                    304 ;Allocation info for local variables in function 'thread_manager'
                                    305 ;------------------------------------------------------------
                                    306 ;	preemptive.c:37: void thread_manager(void){
                                    307 ;	-----------------------------------------
                                    308 ;	 function thread_manager
                                    309 ;	-----------------------------------------
      000000                        310 _thread_manager:
                           000007   311 	ar7 = 0x07
                           000006   312 	ar6 = 0x06
                           000005   313 	ar5 = 0x05
                           000004   314 	ar4 = 0x04
                           000003   315 	ar3 = 0x03
                           000002   316 	ar2 = 0x02
                           000001   317 	ar1 = 0x01
                           000000   318 	ar0 = 0x00
                                    319 ;	preemptive.c:38: do {
      000000                        320 00106$:
                                    321 ;	preemptive.c:39: if(ID==MAXTHREADS-1) ID = 0;
      000000 78 28            [12]  322 	mov	r0,#_ID
      000002 B6 03 06         [24]  323 	cjne	@r0,#0x03,00102$
      000005 78 28            [12]  324 	mov	r0,#_ID
      000007 76 00            [12]  325 	mov	@r0,#0x00
      000009 80 03            [24]  326 	sjmp	00103$
      00000B                        327 00102$:
                                    328 ;	preemptive.c:40: else ID++;
      00000B 78 28            [12]  329 	mov	r0,#_ID
      00000D 06               [12]  330 	inc	@r0
      00000E                        331 00103$:
                                    332 ;	preemptive.c:41: if(bitmap[ID]>0) break;
      00000E 78 28            [12]  333 	mov	r0,#_ID
      000010 E6               [12]  334 	mov	a,@r0
      000011 24 24            [12]  335 	add	a,#_bitmap
      000013 F9               [12]  336 	mov	r1,a
      000014 87 07            [24]  337 	mov	ar7,@r1
      000016 C3               [12]  338 	clr	c
      000017 74 80            [12]  339 	mov	a,#(0x00 ^ 0x80)
      000019 8F F0            [24]  340 	mov	b,r7
      00001B 63 F0 80         [24]  341 	xrl	b,#0x80
      00001E 95 F0            [12]  342 	subb	a,b
      000020 50 DE            [24]  343 	jnc	00106$
                                    344 ;	preemptive.c:43: RESTORESTATE;
      000022 78 28            [12]  345 	mov	r0,#_ID
      000024 E6               [12]  346 	mov	a,@r0
      000025 24 20            [12]  347 	add	a,#_ssp
      000027 F9               [12]  348 	mov	r1,a
      000028 87 81            [24]  349 	mov	_SP,@r1
      00002A D0 D0            [24]  350 	pop PSW 
      00002C D0 83            [24]  351 	pop DPH 
      00002E D0 82            [24]  352 	pop DPL 
      000030 D0 F0            [24]  353 	pop B 
      000032 D0 E0            [24]  354 	pop ACC 
                                    355 ;	preemptive.c:46: __endasm;
      000034 32               [24]  356 	reti
      000035 22               [24]  357 	ret
                                    358 ;------------------------------------------------------------
                                    359 ;Allocation info for local variables in function 'myTimer0Handler'
                                    360 ;------------------------------------------------------------
                                    361 ;	preemptive.c:49: void myTimer0Handler(void){
                                    362 ;	-----------------------------------------
                                    363 ;	 function myTimer0Handler
                                    364 ;	-----------------------------------------
      000036                        365 _myTimer0Handler:
                                    366 ;	preemptive.c:50: SAVESTATE;
      000036 C0 E0            [24]  367 	push ACC 
      000038 C0 F0            [24]  368 	push B 
      00003A C0 82            [24]  369 	push DPL 
      00003C C0 83            [24]  370 	push DPH 
      00003E C0 D0            [24]  371 	push PSW 
      000040 C2 D4            [12]  372 	clr RS1 
      000042 C2 D3            [12]  373 	clr RS0 
      000044 78 28            [12]  374 	mov	r0,#_ID
      000046 E6               [12]  375 	mov	a,@r0
      000047 24 20            [12]  376 	add	a,#_ssp
      000049 F8               [12]  377 	mov	r0,a
      00004A A6 81            [24]  378 	mov	@r0,_SP
                                    379 ;	preemptive.c:51: temp1 = ID;
      00004C 78 28            [12]  380 	mov	r0,#_ID
      00004E 79 2A            [12]  381 	mov	r1,#_temp1
      000050 E6               [12]  382 	mov	a,@r0
      000051 F7               [12]  383 	mov	@r1,a
                                    384 ;	preemptive.c:52: ID = manager_ID;
      000052 78 29            [12]  385 	mov	r0,#_manager_ID
      000054 79 28            [12]  386 	mov	r1,#_ID
      000056 E6               [12]  387 	mov	a,@r0
      000057 F7               [12]  388 	mov	@r1,a
                                    389 ;	preemptive.c:53: RESTORESTATE;
      000058 78 28            [12]  390 	mov	r0,#_ID
      00005A E6               [12]  391 	mov	a,@r0
      00005B 24 20            [12]  392 	add	a,#_ssp
      00005D F9               [12]  393 	mov	r1,a
      00005E 87 81            [24]  394 	mov	_SP,@r1
      000060 D0 D0            [24]  395 	pop PSW 
      000062 D0 83            [24]  396 	pop DPH 
      000064 D0 82            [24]  397 	pop DPL 
      000066 D0 F0            [24]  398 	pop B 
      000068 D0 E0            [24]  399 	pop ACC 
                                    400 ;	preemptive.c:54: ID = temp1;
      00006A 78 2A            [12]  401 	mov	r0,#_temp1
      00006C 79 28            [12]  402 	mov	r1,#_ID
      00006E E6               [12]  403 	mov	a,@r0
      00006F F7               [12]  404 	mov	@r1,a
      000070 22               [24]  405 	ret
                                    406 ;------------------------------------------------------------
                                    407 ;Allocation info for local variables in function 'Bootstrap'
                                    408 ;------------------------------------------------------------
                                    409 ;	preemptive.c:57: void Bootstrap(void) {
                                    410 ;	-----------------------------------------
                                    411 ;	 function Bootstrap
                                    412 ;	-----------------------------------------
      000071                        413 _Bootstrap:
                                    414 ;	preemptive.c:58: bitmap[0] = bitmap[1] = bitmap[2] = bitmap[3] = 0;
      000071 78 27            [12]  415 	mov	r0,#(_bitmap + 0x0003)
      000073 76 00            [12]  416 	mov	@r0,#0x00
      000075 78 26            [12]  417 	mov	r0,#(_bitmap + 0x0002)
      000077 76 00            [12]  418 	mov	@r0,#0x00
      000079 78 25            [12]  419 	mov	r0,#(_bitmap + 0x0001)
      00007B 76 00            [12]  420 	mov	@r0,#0x00
      00007D 78 24            [12]  421 	mov	r0,#_bitmap
      00007F 76 00            [12]  422 	mov	@r0,#0x00
                                    423 ;	preemptive.c:60: TMOD = 0;
      000081 75 89 00         [24]  424 	mov	_TMOD,#0x00
                                    425 ;	preemptive.c:61: IE = 0x82;
      000084 75 A8 82         [24]  426 	mov	_IE,#0x82
                                    427 ;	preemptive.c:62: TR0 = 1;
      000087 D2 8C            [12]  428 	setb	_TR0
                                    429 ;	preemptive.c:64: manager_ID = ThreadCreate(thread_manager);
      000089 90r00r00         [24]  430 	mov	dptr,#_thread_manager
      00008C 12r00rB2         [24]  431 	lcall	_ThreadCreate
      00008F E5 82            [12]  432 	mov	a,dpl
      000091 78 29            [12]  433 	mov	r0,#_manager_ID
      000093 F6               [12]  434 	mov	@r0,a
                                    435 ;	preemptive.c:65: ID = ThreadCreate(main);
      000094 90r00r00         [24]  436 	mov	dptr,#_main
      000097 12r00rB2         [24]  437 	lcall	_ThreadCreate
      00009A E5 82            [12]  438 	mov	a,dpl
      00009C 78 28            [12]  439 	mov	r0,#_ID
      00009E F6               [12]  440 	mov	@r0,a
                                    441 ;	preemptive.c:66: RESTORESTATE;
      00009F 78 28            [12]  442 	mov	r0,#_ID
      0000A1 E6               [12]  443 	mov	a,@r0
      0000A2 24 20            [12]  444 	add	a,#_ssp
      0000A4 F9               [12]  445 	mov	r1,a
      0000A5 87 81            [24]  446 	mov	_SP,@r1
      0000A7 D0 D0            [24]  447 	pop PSW 
      0000A9 D0 83            [24]  448 	pop DPH 
      0000AB D0 82            [24]  449 	pop DPL 
      0000AD D0 F0            [24]  450 	pop B 
      0000AF D0 E0            [24]  451 	pop ACC 
      0000B1 22               [24]  452 	ret
                                    453 ;------------------------------------------------------------
                                    454 ;Allocation info for local variables in function 'ThreadCreate'
                                    455 ;------------------------------------------------------------
                                    456 ;fp                        Allocated to registers 
                                    457 ;------------------------------------------------------------
                                    458 ;	preemptive.c:69: ThreadID ThreadCreate(FunctionPtr fp) {
                                    459 ;	-----------------------------------------
                                    460 ;	 function ThreadCreate
                                    461 ;	-----------------------------------------
      0000B2                        462 _ThreadCreate:
                                    463 ;	preemptive.c:70: EA = 0;
      0000B2 C2 AF            [12]  464 	clr	_EA
                                    465 ;	preemptive.c:71: for(i=0;i<MAXTHREADS;i++) if(!bitmap[i]) break;
      0000B4 78 2C            [12]  466 	mov	r0,#_i
      0000B6 76 00            [12]  467 	mov	@r0,#0x00
      0000B8                        468 00107$:
      0000B8 78 2C            [12]  469 	mov	r0,#_i
      0000BA C3               [12]  470 	clr	c
      0000BB E6               [12]  471 	mov	a,@r0
      0000BC 64 80            [12]  472 	xrl	a,#0x80
      0000BE 94 84            [12]  473 	subb	a,#0x84
      0000C0 50 0E            [24]  474 	jnc	00103$
      0000C2 78 2C            [12]  475 	mov	r0,#_i
      0000C4 E6               [12]  476 	mov	a,@r0
      0000C5 24 24            [12]  477 	add	a,#_bitmap
      0000C7 F9               [12]  478 	mov	r1,a
      0000C8 E7               [12]  479 	mov	a,@r1
      0000C9 60 05            [24]  480 	jz	00103$
      0000CB 78 2C            [12]  481 	mov	r0,#_i
      0000CD 06               [12]  482 	inc	@r0
      0000CE 80 E8            [24]  483 	sjmp	00107$
      0000D0                        484 00103$:
                                    485 ;	preemptive.c:72: if(i==MAXTHREADS) return -1;
      0000D0 78 2C            [12]  486 	mov	r0,#_i
      0000D2 B6 04 04         [24]  487 	cjne	@r0,#0x04,00105$
      0000D5 75 82 FF         [24]  488 	mov	dpl,#0xFF
      0000D8 22               [24]  489 	ret
      0000D9                        490 00105$:
                                    491 ;	preemptive.c:74: bitmap[i] = 1;
      0000D9 78 2C            [12]  492 	mov	r0,#_i
      0000DB E6               [12]  493 	mov	a,@r0
      0000DC 24 24            [12]  494 	add	a,#_bitmap
      0000DE F8               [12]  495 	mov	r0,a
      0000DF 76 01            [12]  496 	mov	@r0,#0x01
                                    497 ;	preemptive.c:75: temp1 = SP;
      0000E1 78 2A            [12]  498 	mov	r0,#_temp1
      0000E3 A6 81            [24]  499 	mov	@r0,_SP
                                    500 ;	preemptive.c:76: SP = 0x3F + i*0x10;
      0000E5 78 2C            [12]  501 	mov	r0,#_i
      0000E7 E6               [12]  502 	mov	a,@r0
      0000E8 C4               [12]  503 	swap	a
      0000E9 54 F0            [12]  504 	anl	a,#0xF0
      0000EB FF               [12]  505 	mov	r7,a
      0000EC 24 3F            [12]  506 	add	a,#0x3F
      0000EE F5 81            [12]  507 	mov	_SP,a
                                    508 ;	preemptive.c:86: __endasm;
      0000F0 C0 82            [24]  509 	push DPL
      0000F2 C0 83            [24]  510 	push DPH
      0000F4 74 00            [12]  511 	mov a,#0x00
      0000F6 C0 E0            [24]  512 	push a
      0000F8 C0 E0            [24]  513 	push a
      0000FA C0 E0            [24]  514 	push a
      0000FC C0 E0            [24]  515 	push a
                                    516 ;	preemptive.c:87: temp2 = i<<3;
      0000FE 78 2C            [12]  517 	mov	r0,#_i
      000100 79 2B            [12]  518 	mov	r1,#_temp2
      000102 E6               [12]  519 	mov	a,@r0
      000103 C4               [12]  520 	swap	a
      000104 03               [12]  521 	rr	a
      000105 54 F8            [12]  522 	anl	a,#0xF8
      000107 F7               [12]  523 	mov	@r1,a
                                    524 ;	preemptive.c:90: __endasm;
      000108 C0 2B            [24]  525 	push _temp2
                                    526 ;	preemptive.c:92: ssp[i] = SP;
      00010A 78 2C            [12]  527 	mov	r0,#_i
      00010C E6               [12]  528 	mov	a,@r0
      00010D 24 20            [12]  529 	add	a,#_ssp
      00010F F8               [12]  530 	mov	r0,a
      000110 A6 81            [24]  531 	mov	@r0,_SP
                                    532 ;	preemptive.c:93: SP = temp1;
      000112 78 2A            [12]  533 	mov	r0,#_temp1
      000114 86 81            [24]  534 	mov	_SP,@r0
                                    535 ;	preemptive.c:94: EA = 1;
      000116 D2 AF            [12]  536 	setb	_EA
                                    537 ;	preemptive.c:95: return i;
      000118 78 2C            [12]  538 	mov	r0,#_i
      00011A 86 82            [24]  539 	mov	dpl,@r0
      00011C 22               [24]  540 	ret
                                    541 ;------------------------------------------------------------
                                    542 ;Allocation info for local variables in function 'ThreadYield'
                                    543 ;------------------------------------------------------------
                                    544 ;	preemptive.c:98: void ThreadYield(void) {
                                    545 ;	-----------------------------------------
                                    546 ;	 function ThreadYield
                                    547 ;	-----------------------------------------
      00011D                        548 _ThreadYield:
                                    549 ;	preemptive.c:99: EA = 0;
      00011D C2 AF            [12]  550 	clr	_EA
                                    551 ;	preemptive.c:100: SAVESTATE;
      00011F C0 E0            [24]  552 	push ACC 
      000121 C0 F0            [24]  553 	push B 
      000123 C0 82            [24]  554 	push DPL 
      000125 C0 83            [24]  555 	push DPH 
      000127 C0 D0            [24]  556 	push PSW 
      000129 C2 D4            [12]  557 	clr RS1 
      00012B C2 D3            [12]  558 	clr RS0 
      00012D 78 28            [12]  559 	mov	r0,#_ID
      00012F E6               [12]  560 	mov	a,@r0
      000130 24 20            [12]  561 	add	a,#_ssp
      000132 F8               [12]  562 	mov	r0,a
      000133 A6 81            [24]  563 	mov	@r0,_SP
                                    564 ;	preemptive.c:101: do {
      000135                        565 00106$:
                                    566 ;	preemptive.c:102: if(ID==MAXTHREADS-1) ID = 0;
      000135 78 28            [12]  567 	mov	r0,#_ID
      000137 B6 03 06         [24]  568 	cjne	@r0,#0x03,00102$
      00013A 78 28            [12]  569 	mov	r0,#_ID
      00013C 76 00            [12]  570 	mov	@r0,#0x00
      00013E 80 03            [24]  571 	sjmp	00103$
      000140                        572 00102$:
                                    573 ;	preemptive.c:103: else ID++;
      000140 78 28            [12]  574 	mov	r0,#_ID
      000142 06               [12]  575 	inc	@r0
      000143                        576 00103$:
                                    577 ;	preemptive.c:104: if(bitmap[ID]>0) break;
      000143 78 28            [12]  578 	mov	r0,#_ID
      000145 E6               [12]  579 	mov	a,@r0
      000146 24 24            [12]  580 	add	a,#_bitmap
      000148 F9               [12]  581 	mov	r1,a
      000149 87 07            [24]  582 	mov	ar7,@r1
      00014B C3               [12]  583 	clr	c
      00014C 74 80            [12]  584 	mov	a,#(0x00 ^ 0x80)
      00014E 8F F0            [24]  585 	mov	b,r7
      000150 63 F0 80         [24]  586 	xrl	b,#0x80
      000153 95 F0            [12]  587 	subb	a,b
      000155 50 DE            [24]  588 	jnc	00106$
                                    589 ;	preemptive.c:106: RESTORESTATE;
      000157 78 28            [12]  590 	mov	r0,#_ID
      000159 E6               [12]  591 	mov	a,@r0
      00015A 24 20            [12]  592 	add	a,#_ssp
      00015C F9               [12]  593 	mov	r1,a
      00015D 87 81            [24]  594 	mov	_SP,@r1
      00015F D0 D0            [24]  595 	pop PSW 
      000161 D0 83            [24]  596 	pop DPH 
      000163 D0 82            [24]  597 	pop DPL 
      000165 D0 F0            [24]  598 	pop B 
      000167 D0 E0            [24]  599 	pop ACC 
                                    600 ;	preemptive.c:107: EA = 1;
      000169 D2 AF            [12]  601 	setb	_EA
      00016B 22               [24]  602 	ret
                                    603 ;------------------------------------------------------------
                                    604 ;Allocation info for local variables in function 'ThreadExit'
                                    605 ;------------------------------------------------------------
                                    606 ;	preemptive.c:110: void ThreadExit(void) {
                                    607 ;	-----------------------------------------
                                    608 ;	 function ThreadExit
                                    609 ;	-----------------------------------------
      00016C                        610 _ThreadExit:
                                    611 ;	preemptive.c:111: EA = 0;
      00016C C2 AF            [12]  612 	clr	_EA
                                    613 ;	preemptive.c:112: bitmap[ID] = 0;
      00016E 78 28            [12]  614 	mov	r0,#_ID
      000170 E6               [12]  615 	mov	a,@r0
      000171 24 24            [12]  616 	add	a,#_bitmap
      000173 F8               [12]  617 	mov	r0,a
      000174 76 00            [12]  618 	mov	@r0,#0x00
                                    619 ;	preemptive.c:113: do {
      000176                        620 00106$:
                                    621 ;	preemptive.c:114: if(ID==MAXTHREADS-1) ID = 0;
      000176 78 28            [12]  622 	mov	r0,#_ID
      000178 B6 03 06         [24]  623 	cjne	@r0,#0x03,00102$
      00017B 78 28            [12]  624 	mov	r0,#_ID
      00017D 76 00            [12]  625 	mov	@r0,#0x00
      00017F 80 03            [24]  626 	sjmp	00103$
      000181                        627 00102$:
                                    628 ;	preemptive.c:115: else ID++;
      000181 78 28            [12]  629 	mov	r0,#_ID
      000183 06               [12]  630 	inc	@r0
      000184                        631 00103$:
                                    632 ;	preemptive.c:116: if(bitmap[ID]>0) break;
      000184 78 28            [12]  633 	mov	r0,#_ID
      000186 E6               [12]  634 	mov	a,@r0
      000187 24 24            [12]  635 	add	a,#_bitmap
      000189 F9               [12]  636 	mov	r1,a
      00018A 87 07            [24]  637 	mov	ar7,@r1
      00018C C3               [12]  638 	clr	c
      00018D 74 80            [12]  639 	mov	a,#(0x00 ^ 0x80)
      00018F 8F F0            [24]  640 	mov	b,r7
      000191 63 F0 80         [24]  641 	xrl	b,#0x80
      000194 95 F0            [12]  642 	subb	a,b
      000196 50 DE            [24]  643 	jnc	00106$
                                    644 ;	preemptive.c:118: RESTORESTATE;
      000198 78 28            [12]  645 	mov	r0,#_ID
      00019A E6               [12]  646 	mov	a,@r0
      00019B 24 20            [12]  647 	add	a,#_ssp
      00019D F9               [12]  648 	mov	r1,a
      00019E 87 81            [24]  649 	mov	_SP,@r1
      0001A0 D0 D0            [24]  650 	pop PSW 
      0001A2 D0 83            [24]  651 	pop DPH 
      0001A4 D0 82            [24]  652 	pop DPL 
      0001A6 D0 F0            [24]  653 	pop B 
      0001A8 D0 E0            [24]  654 	pop ACC 
                                    655 ;	preemptive.c:119: EA = 1;
      0001AA D2 AF            [12]  656 	setb	_EA
      0001AC 22               [24]  657 	ret
                                    658 	.area CSEG    (CODE)
                                    659 	.area CONST   (CODE)
                                    660 	.area XINIT   (CODE)
                                    661 	.area CABS    (ABS,CODE)
