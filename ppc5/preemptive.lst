                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  3 2018) (Linux)
                                      4 ; This file was generated Mon Jan 14 18:58:01 2019
                                      5 ;--------------------------------------------------------
                                      6 	.module preemptive
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _Bootstrap
                                     13 	.globl _myTimer0Handler
                                     14 	.globl _thread_manager
                                     15 	.globl _main
                                     16 	.globl _CY
                                     17 	.globl _AC
                                     18 	.globl _F0
                                     19 	.globl _RS1
                                     20 	.globl _RS0
                                     21 	.globl _OV
                                     22 	.globl _F1
                                     23 	.globl _P
                                     24 	.globl _PS
                                     25 	.globl _PT1
                                     26 	.globl _PX1
                                     27 	.globl _PT0
                                     28 	.globl _PX0
                                     29 	.globl _RD
                                     30 	.globl _WR
                                     31 	.globl _T1
                                     32 	.globl _T0
                                     33 	.globl _INT1
                                     34 	.globl _INT0
                                     35 	.globl _TXD
                                     36 	.globl _RXD
                                     37 	.globl _P3_7
                                     38 	.globl _P3_6
                                     39 	.globl _P3_5
                                     40 	.globl _P3_4
                                     41 	.globl _P3_3
                                     42 	.globl _P3_2
                                     43 	.globl _P3_1
                                     44 	.globl _P3_0
                                     45 	.globl _EA
                                     46 	.globl _ES
                                     47 	.globl _ET1
                                     48 	.globl _EX1
                                     49 	.globl _ET0
                                     50 	.globl _EX0
                                     51 	.globl _P2_7
                                     52 	.globl _P2_6
                                     53 	.globl _P2_5
                                     54 	.globl _P2_4
                                     55 	.globl _P2_3
                                     56 	.globl _P2_2
                                     57 	.globl _P2_1
                                     58 	.globl _P2_0
                                     59 	.globl _SM0
                                     60 	.globl _SM1
                                     61 	.globl _SM2
                                     62 	.globl _REN
                                     63 	.globl _TB8
                                     64 	.globl _RB8
                                     65 	.globl _TI
                                     66 	.globl _RI
                                     67 	.globl _P1_7
                                     68 	.globl _P1_6
                                     69 	.globl _P1_5
                                     70 	.globl _P1_4
                                     71 	.globl _P1_3
                                     72 	.globl _P1_2
                                     73 	.globl _P1_1
                                     74 	.globl _P1_0
                                     75 	.globl _TF1
                                     76 	.globl _TR1
                                     77 	.globl _TF0
                                     78 	.globl _TR0
                                     79 	.globl _IE1
                                     80 	.globl _IT1
                                     81 	.globl _IE0
                                     82 	.globl _IT0
                                     83 	.globl _P0_7
                                     84 	.globl _P0_6
                                     85 	.globl _P0_5
                                     86 	.globl _P0_4
                                     87 	.globl _P0_3
                                     88 	.globl _P0_2
                                     89 	.globl _P0_1
                                     90 	.globl _P0_0
                                     91 	.globl _B
                                     92 	.globl _ACC
                                     93 	.globl _PSW
                                     94 	.globl _IP
                                     95 	.globl _P3
                                     96 	.globl _IE
                                     97 	.globl _P2
                                     98 	.globl _SBUF
                                     99 	.globl _SCON
                                    100 	.globl _P1
                                    101 	.globl _TH1
                                    102 	.globl _TH0
                                    103 	.globl _TL1
                                    104 	.globl _TL0
                                    105 	.globl _TMOD
                                    106 	.globl _TCON
                                    107 	.globl _PCON
                                    108 	.globl _DPH
                                    109 	.globl _DPL
                                    110 	.globl _SP
                                    111 	.globl _P0
                                    112 	.globl _plot
                                    113 	.globl _thread
                                    114 	.globl _mutex
                                    115 	.globl _log
                                    116 	.globl _counter
                                    117 	.globl _time
                                    118 	.globl _D
                                    119 	.globl _i
                                    120 	.globl _temp2
                                    121 	.globl _temp1
                                    122 	.globl _car_temp
                                    123 	.globl _ID
                                    124 	.globl _bitmap
                                    125 	.globl _ssp
                                    126 	.globl _th_tail
                                    127 	.globl _m_tail
                                    128 	.globl _now
                                    129 	.globl _delay
                                    130 	.globl _ThreadCreate
                                    131 	.globl _ThreadYield
                                    132 	.globl _ThreadExit
                                    133 ;--------------------------------------------------------
                                    134 ; special function registers
                                    135 ;--------------------------------------------------------
                                    136 	.area RSEG    (ABS,DATA)
      000000                        137 	.org 0x0000
                           000080   138 _P0	=	0x0080
                           000081   139 _SP	=	0x0081
                           000082   140 _DPL	=	0x0082
                           000083   141 _DPH	=	0x0083
                           000087   142 _PCON	=	0x0087
                           000088   143 _TCON	=	0x0088
                           000089   144 _TMOD	=	0x0089
                           00008A   145 _TL0	=	0x008a
                           00008B   146 _TL1	=	0x008b
                           00008C   147 _TH0	=	0x008c
                           00008D   148 _TH1	=	0x008d
                           000090   149 _P1	=	0x0090
                           000098   150 _SCON	=	0x0098
                           000099   151 _SBUF	=	0x0099
                           0000A0   152 _P2	=	0x00a0
                           0000A8   153 _IE	=	0x00a8
                           0000B0   154 _P3	=	0x00b0
                           0000B8   155 _IP	=	0x00b8
                           0000D0   156 _PSW	=	0x00d0
                           0000E0   157 _ACC	=	0x00e0
                           0000F0   158 _B	=	0x00f0
                                    159 ;--------------------------------------------------------
                                    160 ; special function bits
                                    161 ;--------------------------------------------------------
                                    162 	.area RSEG    (ABS,DATA)
      000000                        163 	.org 0x0000
                           000080   164 _P0_0	=	0x0080
                           000081   165 _P0_1	=	0x0081
                           000082   166 _P0_2	=	0x0082
                           000083   167 _P0_3	=	0x0083
                           000084   168 _P0_4	=	0x0084
                           000085   169 _P0_5	=	0x0085
                           000086   170 _P0_6	=	0x0086
                           000087   171 _P0_7	=	0x0087
                           000088   172 _IT0	=	0x0088
                           000089   173 _IE0	=	0x0089
                           00008A   174 _IT1	=	0x008a
                           00008B   175 _IE1	=	0x008b
                           00008C   176 _TR0	=	0x008c
                           00008D   177 _TF0	=	0x008d
                           00008E   178 _TR1	=	0x008e
                           00008F   179 _TF1	=	0x008f
                           000090   180 _P1_0	=	0x0090
                           000091   181 _P1_1	=	0x0091
                           000092   182 _P1_2	=	0x0092
                           000093   183 _P1_3	=	0x0093
                           000094   184 _P1_4	=	0x0094
                           000095   185 _P1_5	=	0x0095
                           000096   186 _P1_6	=	0x0096
                           000097   187 _P1_7	=	0x0097
                           000098   188 _RI	=	0x0098
                           000099   189 _TI	=	0x0099
                           00009A   190 _RB8	=	0x009a
                           00009B   191 _TB8	=	0x009b
                           00009C   192 _REN	=	0x009c
                           00009D   193 _SM2	=	0x009d
                           00009E   194 _SM1	=	0x009e
                           00009F   195 _SM0	=	0x009f
                           0000A0   196 _P2_0	=	0x00a0
                           0000A1   197 _P2_1	=	0x00a1
                           0000A2   198 _P2_2	=	0x00a2
                           0000A3   199 _P2_3	=	0x00a3
                           0000A4   200 _P2_4	=	0x00a4
                           0000A5   201 _P2_5	=	0x00a5
                           0000A6   202 _P2_6	=	0x00a6
                           0000A7   203 _P2_7	=	0x00a7
                           0000A8   204 _EX0	=	0x00a8
                           0000A9   205 _ET0	=	0x00a9
                           0000AA   206 _EX1	=	0x00aa
                           0000AB   207 _ET1	=	0x00ab
                           0000AC   208 _ES	=	0x00ac
                           0000AF   209 _EA	=	0x00af
                           0000B0   210 _P3_0	=	0x00b0
                           0000B1   211 _P3_1	=	0x00b1
                           0000B2   212 _P3_2	=	0x00b2
                           0000B3   213 _P3_3	=	0x00b3
                           0000B4   214 _P3_4	=	0x00b4
                           0000B5   215 _P3_5	=	0x00b5
                           0000B6   216 _P3_6	=	0x00b6
                           0000B7   217 _P3_7	=	0x00b7
                           0000B0   218 _RXD	=	0x00b0
                           0000B1   219 _TXD	=	0x00b1
                           0000B2   220 _INT0	=	0x00b2
                           0000B3   221 _INT1	=	0x00b3
                           0000B4   222 _T0	=	0x00b4
                           0000B5   223 _T1	=	0x00b5
                           0000B6   224 _WR	=	0x00b6
                           0000B7   225 _RD	=	0x00b7
                           0000B8   226 _PX0	=	0x00b8
                           0000B9   227 _PT0	=	0x00b9
                           0000BA   228 _PX1	=	0x00ba
                           0000BB   229 _PT1	=	0x00bb
                           0000BC   230 _PS	=	0x00bc
                           0000D0   231 _P	=	0x00d0
                           0000D1   232 _F1	=	0x00d1
                           0000D2   233 _OV	=	0x00d2
                           0000D3   234 _RS0	=	0x00d3
                           0000D4   235 _RS1	=	0x00d4
                           0000D5   236 _F0	=	0x00d5
                           0000D6   237 _AC	=	0x00d6
                           0000D7   238 _CY	=	0x00d7
                                    239 ;--------------------------------------------------------
                                    240 ; overlayable register banks
                                    241 ;--------------------------------------------------------
                                    242 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        243 	.ds 8
                                    244 ;--------------------------------------------------------
                                    245 ; internal ram data
                                    246 ;--------------------------------------------------------
                                    247 	.area DSEG    (DATA)
                           00003C   248 _m_tail	=	0x003c
                           00003D   249 _th_tail	=	0x003d
                                    250 ;--------------------------------------------------------
                                    251 ; overlayable items in internal ram 
                                    252 ;--------------------------------------------------------
                                    253 ;--------------------------------------------------------
                                    254 ; indirectly addressable internal ram data
                                    255 ;--------------------------------------------------------
                                    256 	.area ISEG    (DATA)
                           000020   257 _ssp	=	0x0020
                           000024   258 _bitmap	=	0x0024
                           000028   259 _ID	=	0x0028
                           000029   260 _car_temp	=	0x0029
                           00002A   261 _temp1	=	0x002a
                           00002B   262 _temp2	=	0x002b
                           00002C   263 _i	=	0x002c
                           00002C   264 _D	=	0x002c
                           00003F   265 _time	=	0x003f
                           00003E   266 _counter	=	0x003e
                           000030   267 _log	=	0x0030
                           00003A   268 _mutex	=	0x003a
                           00003B   269 _thread	=	0x003b
                           00004E   270 _plot	=	0x004e
                                    271 ;--------------------------------------------------------
                                    272 ; absolute internal ram data
                                    273 ;--------------------------------------------------------
                                    274 	.area IABS    (ABS,DATA)
                                    275 	.area IABS    (ABS,DATA)
                                    276 ;--------------------------------------------------------
                                    277 ; bit data
                                    278 ;--------------------------------------------------------
                                    279 	.area BSEG    (BIT)
                                    280 ;--------------------------------------------------------
                                    281 ; paged external ram data
                                    282 ;--------------------------------------------------------
                                    283 	.area PSEG    (PAG,XDATA)
                                    284 ;--------------------------------------------------------
                                    285 ; external ram data
                                    286 ;--------------------------------------------------------
                                    287 	.area XSEG    (XDATA)
                                    288 ;--------------------------------------------------------
                                    289 ; absolute external ram data
                                    290 ;--------------------------------------------------------
                                    291 	.area XABS    (ABS,XDATA)
                                    292 ;--------------------------------------------------------
                                    293 ; external initialized ram data
                                    294 ;--------------------------------------------------------
                                    295 	.area XISEG   (XDATA)
                                    296 	.area HOME    (CODE)
                                    297 	.area GSINIT0 (CODE)
                                    298 	.area GSINIT1 (CODE)
                                    299 	.area GSINIT2 (CODE)
                                    300 	.area GSINIT3 (CODE)
                                    301 	.area GSINIT4 (CODE)
                                    302 	.area GSINIT5 (CODE)
                                    303 	.area GSINIT  (CODE)
                                    304 	.area GSFINAL (CODE)
                                    305 	.area CSEG    (CODE)
                                    306 ;--------------------------------------------------------
                                    307 ; global & static initialisations
                                    308 ;--------------------------------------------------------
                                    309 	.area HOME    (CODE)
                                    310 	.area GSINIT  (CODE)
                                    311 	.area GSFINAL (CODE)
                                    312 	.area GSINIT  (CODE)
                                    313 ;--------------------------------------------------------
                                    314 ; Home
                                    315 ;--------------------------------------------------------
                                    316 	.area HOME    (CODE)
                                    317 	.area HOME    (CODE)
                                    318 ;--------------------------------------------------------
                                    319 ; code
                                    320 ;--------------------------------------------------------
                                    321 	.area CSEG    (CODE)
                                    322 ;------------------------------------------------------------
                                    323 ;Allocation info for local variables in function 'now'
                                    324 ;------------------------------------------------------------
                                    325 ;	preemptive.c:30: unsigned char now(void) { return time; }
                                    326 ;	-----------------------------------------
                                    327 ;	 function now
                                    328 ;	-----------------------------------------
      000000                        329 _now:
                           000007   330 	ar7 = 0x07
                           000006   331 	ar6 = 0x06
                           000005   332 	ar5 = 0x05
                           000004   333 	ar4 = 0x04
                           000003   334 	ar3 = 0x03
                           000002   335 	ar2 = 0x02
                           000001   336 	ar1 = 0x01
                           000000   337 	ar0 = 0x00
      000000 78 3F            [12]  338 	mov	r0,#_time
      000002 86 82            [24]  339 	mov	dpl,@r0
      000004 22               [24]  340 	ret
                                    341 ;------------------------------------------------------------
                                    342 ;Allocation info for local variables in function 'delay'
                                    343 ;------------------------------------------------------------
                                    344 ;n                         Allocated to registers r7 
                                    345 ;------------------------------------------------------------
                                    346 ;	preemptive.c:31: void delay(unsigned char n) {
                                    347 ;	-----------------------------------------
                                    348 ;	 function delay
                                    349 ;	-----------------------------------------
      000005                        350 _delay:
      000005 AF 82            [24]  351 	mov	r7,dpl
                                    352 ;	preemptive.c:32: D[ID] = now() + n;
      000007 78 28            [12]  353 	mov	r0,#_ID
      000009 E6               [12]  354 	mov	a,@r0
      00000A 24 2C            [12]  355 	add	a,#_D
      00000C F9               [12]  356 	mov	r1,a
      00000D C0 07            [24]  357 	push	ar7
      00000F C0 01            [24]  358 	push	ar1
      000011 12r00r00         [24]  359 	lcall	_now
      000014 E5 82            [12]  360 	mov	a,dpl
      000016 D0 01            [24]  361 	pop	ar1
      000018 D0 07            [24]  362 	pop	ar7
      00001A 2F               [12]  363 	add	a,r7
      00001B F7               [12]  364 	mov	@r1,a
                                    365 ;	preemptive.c:33: bitmap[ID] = -2;
      00001C 78 28            [12]  366 	mov	r0,#_ID
      00001E E6               [12]  367 	mov	a,@r0
      00001F 24 24            [12]  368 	add	a,#_bitmap
      000021 F8               [12]  369 	mov	r0,a
      000022 76 FE            [12]  370 	mov	@r0,#0xFE
                                    371 ;	preemptive.c:34: ThreadYield();
      000024 02r02r11         [24]  372 	ljmp	_ThreadYield
                                    373 ;------------------------------------------------------------
                                    374 ;Allocation info for local variables in function 'thread_manager'
                                    375 ;------------------------------------------------------------
                                    376 ;	preemptive.c:37: void thread_manager(void){
                                    377 ;	-----------------------------------------
                                    378 ;	 function thread_manager
                                    379 ;	-----------------------------------------
      000027                        380 _thread_manager:
                                    381 ;	preemptive.c:38: temp1 = temp2 = 0;
      000027 78 2B            [12]  382 	mov	r0,#_temp2
      000029 76 00            [12]  383 	mov	@r0,#0x00
      00002B 78 2A            [12]  384 	mov	r0,#_temp1
      00002D 76 00            [12]  385 	mov	@r0,#0x00
                                    386 ;	preemptive.c:39: while(temp2==0){
      00002F                        387 00104$:
      00002F 78 2B            [12]  388 	mov	r0,#_temp2
      000031 E6               [12]  389 	mov	a,@r0
      000032 70 3A            [24]  390 	jnz	00106$
                                    391 ;	preemptive.c:40: for(i=1;i<MAXTHREADS;i++) if( temp1<bitmap[i] ) {
      000034 78 2C            [12]  392 	mov	r0,#_i
      000036 76 01            [12]  393 	mov	@r0,#0x01
      000038                        394 00108$:
      000038 78 2C            [12]  395 	mov	r0,#_i
      00003A C3               [12]  396 	clr	c
      00003B E6               [12]  397 	mov	a,@r0
      00003C 64 80            [12]  398 	xrl	a,#0x80
      00003E 94 84            [12]  399 	subb	a,#0x84
      000040 50 ED            [24]  400 	jnc	00104$
      000042 78 2C            [12]  401 	mov	r0,#_i
      000044 E6               [12]  402 	mov	a,@r0
      000045 24 24            [12]  403 	add	a,#_bitmap
      000047 F9               [12]  404 	mov	r1,a
      000048 87 07            [24]  405 	mov	ar7,@r1
      00004A 78 2A            [12]  406 	mov	r0,#_temp1
      00004C C3               [12]  407 	clr	c
      00004D E6               [12]  408 	mov	a,@r0
      00004E 64 80            [12]  409 	xrl	a,#0x80
      000050 8F F0            [24]  410 	mov	b,r7
      000052 63 F0 80         [24]  411 	xrl	b,#0x80
      000055 95 F0            [12]  412 	subb	a,b
      000057 50 10            [24]  413 	jnc	00109$
                                    414 ;	preemptive.c:41: temp1 = bitmap[i];
      000059 78 2C            [12]  415 	mov	r0,#_i
      00005B E6               [12]  416 	mov	a,@r0
      00005C 24 24            [12]  417 	add	a,#_bitmap
      00005E F9               [12]  418 	mov	r1,a
      00005F 78 2A            [12]  419 	mov	r0,#_temp1
      000061 E7               [12]  420 	mov	a,@r1
      000062 F6               [12]  421 	mov	@r0,a
                                    422 ;	preemptive.c:42: temp2 = i;
      000063 78 2C            [12]  423 	mov	r0,#_i
      000065 79 2B            [12]  424 	mov	r1,#_temp2
      000067 E6               [12]  425 	mov	a,@r0
      000068 F7               [12]  426 	mov	@r1,a
      000069                        427 00109$:
                                    428 ;	preemptive.c:40: for(i=1;i<MAXTHREADS;i++) if( temp1<bitmap[i] ) {
      000069 78 2C            [12]  429 	mov	r0,#_i
      00006B 06               [12]  430 	inc	@r0
      00006C 80 CA            [24]  431 	sjmp	00108$
      00006E                        432 00106$:
                                    433 ;	preemptive.c:45: ID = temp2;
      00006E 78 2B            [12]  434 	mov	r0,#_temp2
      000070 79 28            [12]  435 	mov	r1,#_ID
      000072 E6               [12]  436 	mov	a,@r0
      000073 F7               [12]  437 	mov	@r1,a
                                    438 ;	preemptive.c:46: RESTORESTATE;
      000074 78 28            [12]  439 	mov	r0,#_ID
      000076 E6               [12]  440 	mov	a,@r0
      000077 24 20            [12]  441 	add	a,#_ssp
      000079 F9               [12]  442 	mov	r1,a
      00007A 87 81            [24]  443 	mov	_SP,@r1
      00007C D0 D0            [24]  444 	pop PSW 
      00007E D0 83            [24]  445 	pop DPH 
      000080 D0 82            [24]  446 	pop DPL 
      000082 D0 F0            [24]  447 	pop B 
      000084 D0 E0            [24]  448 	pop ACC 
                                    449 ;	preemptive.c:49: __endasm;
      000086 32               [24]  450 	reti
      000087 22               [24]  451 	ret
                                    452 ;------------------------------------------------------------
                                    453 ;Allocation info for local variables in function 'myTimer0Handler'
                                    454 ;------------------------------------------------------------
                                    455 ;	preemptive.c:52: void myTimer0Handler(void){
                                    456 ;	-----------------------------------------
                                    457 ;	 function myTimer0Handler
                                    458 ;	-----------------------------------------
      000088                        459 _myTimer0Handler:
                                    460 ;	preemptive.c:53: SAVESTATE;
      000088 C0 E0            [24]  461 	push ACC 
      00008A C0 F0            [24]  462 	push B 
      00008C C0 82            [24]  463 	push DPL 
      00008E C0 83            [24]  464 	push DPH 
      000090 C0 D0            [24]  465 	push PSW 
      000092 C2 D4            [12]  466 	clr RS1 
      000094 C2 D3            [12]  467 	clr RS0 
      000096 78 28            [12]  468 	mov	r0,#_ID
      000098 E6               [12]  469 	mov	a,@r0
      000099 24 20            [12]  470 	add	a,#_ssp
      00009B F8               [12]  471 	mov	r0,a
      00009C A6 81            [24]  472 	mov	@r0,_SP
                                    473 ;	preemptive.c:54: counter = (counter==4) ? 0 : counter+1;
      00009E 78 3E            [12]  474 	mov	r0,#_counter
      0000A0 B6 04 04         [24]  475 	cjne	@r0,#0x04,00118$
      0000A3 7F 00            [12]  476 	mov	r7,#0x00
      0000A5 80 05            [24]  477 	sjmp	00119$
      0000A7                        478 00118$:
      0000A7 78 3E            [12]  479 	mov	r0,#_counter
      0000A9 E6               [12]  480 	mov	a,@r0
      0000AA 04               [12]  481 	inc	a
      0000AB FF               [12]  482 	mov	r7,a
      0000AC                        483 00119$:
      0000AC 78 3E            [12]  484 	mov	r0,#_counter
      0000AE A6 07            [24]  485 	mov	@r0,ar7
                                    486 ;	preemptive.c:55: if(!counter) time++;
      0000B0 78 3E            [12]  487 	mov	r0,#_counter
      0000B2 E6               [12]  488 	mov	a,@r0
      0000B3 70 03            [24]  489 	jnz	00102$
      0000B5 78 3F            [12]  490 	mov	r0,#_time
      0000B7 06               [12]  491 	inc	@r0
      0000B8                        492 00102$:
                                    493 ;	preemptive.c:57: for(i=1;i<MAXTHREADS;i++){
      0000B8 78 2C            [12]  494 	mov	r0,#_i
      0000BA 76 01            [12]  495 	mov	@r0,#0x01
      0000BC                        496 00114$:
      0000BC 78 2C            [12]  497 	mov	r0,#_i
      0000BE C3               [12]  498 	clr	c
      0000BF E6               [12]  499 	mov	a,@r0
      0000C0 64 80            [12]  500 	xrl	a,#0x80
      0000C2 94 84            [12]  501 	subb	a,#0x84
      0000C4 50 5A            [24]  502 	jnc	00112$
                                    503 ;	preemptive.c:58: if( bitmap[i]>0 ){
      0000C6 78 2C            [12]  504 	mov	r0,#_i
      0000C8 E6               [12]  505 	mov	a,@r0
      0000C9 24 24            [12]  506 	add	a,#_bitmap
      0000CB F9               [12]  507 	mov	r1,a
      0000CC 87 07            [24]  508 	mov	ar7,@r1
      0000CE C3               [12]  509 	clr	c
      0000CF 74 80            [12]  510 	mov	a,#(0x00 ^ 0x80)
      0000D1 8F F0            [24]  511 	mov	b,r7
      0000D3 63 F0 80         [24]  512 	xrl	b,#0x80
      0000D6 95 F0            [12]  513 	subb	a,b
      0000D8 50 20            [24]  514 	jnc	00110$
                                    515 ;	preemptive.c:59: if( i==ID ) bitmap[i]=1;
      0000DA 78 2C            [12]  516 	mov	r0,#_i
      0000DC 79 28            [12]  517 	mov	r1,#_ID
      0000DE 86 F0            [24]  518 	mov	b,@r0
      0000E0 E7               [12]  519 	mov	a,@r1
      0000E1 B5 F0 0A         [24]  520 	cjne	a,b,00104$
      0000E4 78 2C            [12]  521 	mov	r0,#_i
      0000E6 E6               [12]  522 	mov	a,@r0
      0000E7 24 24            [12]  523 	add	a,#_bitmap
      0000E9 F8               [12]  524 	mov	r0,a
      0000EA 76 01            [12]  525 	mov	@r0,#0x01
      0000EC 80 2D            [24]  526 	sjmp	00115$
      0000EE                        527 00104$:
                                    528 ;	preemptive.c:60: else bitmap[i]++;
      0000EE 78 2C            [12]  529 	mov	r0,#_i
      0000F0 E6               [12]  530 	mov	a,@r0
      0000F1 24 24            [12]  531 	add	a,#_bitmap
      0000F3 F9               [12]  532 	mov	r1,a
      0000F4 E7               [12]  533 	mov	a,@r1
      0000F5 FF               [12]  534 	mov	r7,a
      0000F6 04               [12]  535 	inc	a
      0000F7 F7               [12]  536 	mov	@r1,a
      0000F8 80 21            [24]  537 	sjmp	00115$
      0000FA                        538 00110$:
                                    539 ;	preemptive.c:62: else if( bitmap[i]==-2 && D[i]==time ) bitmap[i] = 9;
      0000FA 78 2C            [12]  540 	mov	r0,#_i
      0000FC E6               [12]  541 	mov	a,@r0
      0000FD 24 24            [12]  542 	add	a,#_bitmap
      0000FF F9               [12]  543 	mov	r1,a
      000100 87 07            [24]  544 	mov	ar7,@r1
      000102 BF FE 16         [24]  545 	cjne	r7,#0xFE,00115$
      000105 78 2C            [12]  546 	mov	r0,#_i
      000107 E6               [12]  547 	mov	a,@r0
      000108 24 2C            [12]  548 	add	a,#_D
      00010A F9               [12]  549 	mov	r1,a
      00010B 87 07            [24]  550 	mov	ar7,@r1
      00010D 78 3F            [12]  551 	mov	r0,#_time
      00010F E6               [12]  552 	mov	a,@r0
      000110 B5 07 08         [24]  553 	cjne	a,ar7,00115$
      000113 78 2C            [12]  554 	mov	r0,#_i
      000115 E6               [12]  555 	mov	a,@r0
      000116 24 24            [12]  556 	add	a,#_bitmap
      000118 F8               [12]  557 	mov	r0,a
      000119 76 09            [12]  558 	mov	@r0,#0x09
      00011B                        559 00115$:
                                    560 ;	preemptive.c:57: for(i=1;i<MAXTHREADS;i++){
      00011B 78 2C            [12]  561 	mov	r0,#_i
      00011D 06               [12]  562 	inc	@r0
      00011E 80 9C            [24]  563 	sjmp	00114$
      000120                        564 00112$:
                                    565 ;	preemptive.c:64: ID = 0;//manager_ID
      000120 78 28            [12]  566 	mov	r0,#_ID
      000122 76 00            [12]  567 	mov	@r0,#0x00
                                    568 ;	preemptive.c:65: RESTORESTATE;
      000124 78 28            [12]  569 	mov	r0,#_ID
      000126 E6               [12]  570 	mov	a,@r0
      000127 24 20            [12]  571 	add	a,#_ssp
      000129 F9               [12]  572 	mov	r1,a
      00012A 87 81            [24]  573 	mov	_SP,@r1
      00012C D0 D0            [24]  574 	pop PSW 
      00012E D0 83            [24]  575 	pop DPH 
      000130 D0 82            [24]  576 	pop DPL 
      000132 D0 F0            [24]  577 	pop B 
      000134 D0 E0            [24]  578 	pop ACC 
      000136 22               [24]  579 	ret
                                    580 ;------------------------------------------------------------
                                    581 ;Allocation info for local variables in function 'Bootstrap'
                                    582 ;------------------------------------------------------------
                                    583 ;	preemptive.c:68: void Bootstrap(void) {
                                    584 ;	-----------------------------------------
                                    585 ;	 function Bootstrap
                                    586 ;	-----------------------------------------
      000137                        587 _Bootstrap:
                                    588 ;	preemptive.c:69: bitmap[0] = bitmap[1] = bitmap[2] = bitmap[3] = 0;
      000137 78 27            [12]  589 	mov	r0,#(_bitmap + 0x0003)
      000139 76 00            [12]  590 	mov	@r0,#0x00
      00013B 78 26            [12]  591 	mov	r0,#(_bitmap + 0x0002)
      00013D 76 00            [12]  592 	mov	@r0,#0x00
      00013F 78 25            [12]  593 	mov	r0,#(_bitmap + 0x0001)
      000141 76 00            [12]  594 	mov	@r0,#0x00
      000143 78 24            [12]  595 	mov	r0,#_bitmap
      000145 76 00            [12]  596 	mov	@r0,#0x00
                                    597 ;	preemptive.c:71: TMOD = 0;
      000147 75 89 00         [24]  598 	mov	_TMOD,#0x00
                                    599 ;	preemptive.c:72: IE = 0x82;
      00014A 75 A8 82         [24]  600 	mov	_IE,#0x82
                                    601 ;	preemptive.c:73: TR0 = 1;
      00014D D2 8C            [12]  602 	setb	_TR0
                                    603 ;	preemptive.c:75: SemaphoreCreate(thread, 4);
      00014F 78 3B            [12]  604 	mov	r0,#_thread
      000151 76 04            [12]  605 	mov	@r0,#0x04
                                    606 ;	preemptive.c:78: __endasm;
      000153 75 3D 7C         [24]  607 	mov _th_tail,#0x7C
                                    608 ;	preemptive.c:80: ThreadCreate(thread_manager);
      000156 90r00r27         [24]  609 	mov	dptr,#_thread_manager
      000159 12r01r7A         [24]  610 	lcall	_ThreadCreate
                                    611 ;	preemptive.c:81: ID = ThreadCreate(main);
      00015C 90r00r00         [24]  612 	mov	dptr,#_main
      00015F 12r01r7A         [24]  613 	lcall	_ThreadCreate
      000162 E5 82            [12]  614 	mov	a,dpl
      000164 78 28            [12]  615 	mov	r0,#_ID
      000166 F6               [12]  616 	mov	@r0,a
                                    617 ;	preemptive.c:82: RESTORESTATE;
      000167 78 28            [12]  618 	mov	r0,#_ID
      000169 E6               [12]  619 	mov	a,@r0
      00016A 24 20            [12]  620 	add	a,#_ssp
      00016C F9               [12]  621 	mov	r1,a
      00016D 87 81            [24]  622 	mov	_SP,@r1
      00016F D0 D0            [24]  623 	pop PSW 
      000171 D0 83            [24]  624 	pop DPH 
      000173 D0 82            [24]  625 	pop DPL 
      000175 D0 F0            [24]  626 	pop B 
      000177 D0 E0            [24]  627 	pop ACC 
      000179 22               [24]  628 	ret
                                    629 ;------------------------------------------------------------
                                    630 ;Allocation info for local variables in function 'ThreadCreate'
                                    631 ;------------------------------------------------------------
                                    632 ;fp                        Allocated to registers 
                                    633 ;------------------------------------------------------------
                                    634 ;	preemptive.c:85: ThreadID ThreadCreate(FunctionPtr fp) {
                                    635 ;	-----------------------------------------
                                    636 ;	 function ThreadCreate
                                    637 ;	-----------------------------------------
      00017A                        638 _ThreadCreate:
                                    639 ;	preemptive.c:86: SemaphoreWait(thread,th_tail);
      00017A C2 AF            [12]  640 	clr	_EA
      00017C 78 3B            [12]  641 	mov	r0,#_thread
      00017E 16               [12]  642 	dec	@r0
      00017F 78 3B            [12]  643 	mov	r0,#_thread
      000181 E6               [12]  644 	mov	a,@r0
      000182 30 E7 13         [24]  645 	jnb	acc.7,00102$
      000185 05 3D            [12]  646 	inc	_th_tail
      000187 A9 3D            [24]  647 	mov	r1,_th_tail
      000189 78 28            [12]  648 	mov	r0,#_ID
      00018B E6               [12]  649 	mov	a,@r0
      00018C F7               [12]  650 	mov	@r1,a
      00018D 78 28            [12]  651 	mov	r0,#_ID
      00018F E6               [12]  652 	mov	a,@r0
      000190 24 24            [12]  653 	add	a,#_bitmap
      000192 F8               [12]  654 	mov	r0,a
      000193 76 FF            [12]  655 	mov	@r0,#0xFF
      000195 12r02r11         [24]  656 	lcall	_ThreadYield
      000198                        657 00102$:
      000198 D2 AF            [12]  658 	setb	_EA
                                    659 ;	preemptive.c:87: EA = 0;
      00019A C2 AF            [12]  660 	clr	_EA
                                    661 ;	preemptive.c:88: for(i=0;i<MAXTHREADS;i++) if(!bitmap[i]) break;
      00019C 78 2C            [12]  662 	mov	r0,#_i
      00019E 76 00            [12]  663 	mov	@r0,#0x00
      0001A0                        664 00109$:
      0001A0 78 2C            [12]  665 	mov	r0,#_i
      0001A2 C3               [12]  666 	clr	c
      0001A3 E6               [12]  667 	mov	a,@r0
      0001A4 64 80            [12]  668 	xrl	a,#0x80
      0001A6 94 84            [12]  669 	subb	a,#0x84
      0001A8 50 0E            [24]  670 	jnc	00105$
      0001AA 78 2C            [12]  671 	mov	r0,#_i
      0001AC E6               [12]  672 	mov	a,@r0
      0001AD 24 24            [12]  673 	add	a,#_bitmap
      0001AF F9               [12]  674 	mov	r1,a
      0001B0 E7               [12]  675 	mov	a,@r1
      0001B1 60 05            [24]  676 	jz	00105$
      0001B3 78 2C            [12]  677 	mov	r0,#_i
      0001B5 06               [12]  678 	inc	@r0
      0001B6 80 E8            [24]  679 	sjmp	00109$
      0001B8                        680 00105$:
                                    681 ;	preemptive.c:89: if(i==MAXTHREADS) return -1;
      0001B8 78 2C            [12]  682 	mov	r0,#_i
      0001BA B6 04 04         [24]  683 	cjne	@r0,#0x04,00107$
      0001BD 75 82 FF         [24]  684 	mov	dpl,#0xFF
      0001C0 22               [24]  685 	ret
      0001C1                        686 00107$:
                                    687 ;	preemptive.c:91: bitmap[i] = 1;
      0001C1 78 2C            [12]  688 	mov	r0,#_i
      0001C3 E6               [12]  689 	mov	a,@r0
      0001C4 24 24            [12]  690 	add	a,#_bitmap
      0001C6 F8               [12]  691 	mov	r0,a
      0001C7 76 01            [12]  692 	mov	@r0,#0x01
                                    693 ;	preemptive.c:92: temp1 = SP;
      0001C9 78 2A            [12]  694 	mov	r0,#_temp1
      0001CB A6 81            [24]  695 	mov	@r0,_SP
                                    696 ;	preemptive.c:93: SP = 0x3F + i*0x10;
      0001CD 78 2C            [12]  697 	mov	r0,#_i
      0001CF E6               [12]  698 	mov	a,@r0
      0001D0 C4               [12]  699 	swap	a
      0001D1 54 F0            [12]  700 	anl	a,#0xF0
      0001D3 FF               [12]  701 	mov	r7,a
      0001D4 24 3F            [12]  702 	add	a,#0x3F
      0001D6 F5 81            [12]  703 	mov	_SP,a
                                    704 ;	preemptive.c:108: __endasm;
      0001D8 E5 82            [12]  705 	mov a,DPL
      0001DA 85 83 F0         [24]  706 	mov b,DPH
      0001DD 90r02r60         [24]  707 	mov dptr,#_ThreadExit
      0001E0 C0 82            [24]  708 	push DPL
      0001E2 C0 83            [24]  709 	push DPH
      0001E4 C0 E0            [24]  710 	push a
      0001E6 C0 F0            [24]  711 	push b
      0001E8 74 00            [12]  712 	mov a,#0x00
      0001EA C0 E0            [24]  713 	push a
      0001EC C0 E0            [24]  714 	push a
      0001EE C0 E0            [24]  715 	push a
      0001F0 C0 E0            [24]  716 	push a
                                    717 ;	preemptive.c:109: temp2 = i<<3;
      0001F2 78 2C            [12]  718 	mov	r0,#_i
      0001F4 79 2B            [12]  719 	mov	r1,#_temp2
      0001F6 E6               [12]  720 	mov	a,@r0
      0001F7 C4               [12]  721 	swap	a
      0001F8 03               [12]  722 	rr	a
      0001F9 54 F8            [12]  723 	anl	a,#0xF8
      0001FB F7               [12]  724 	mov	@r1,a
                                    725 ;	preemptive.c:112: __endasm;
      0001FC C0 2B            [24]  726 	push _temp2
                                    727 ;	preemptive.c:114: ssp[i] = SP;
      0001FE 78 2C            [12]  728 	mov	r0,#_i
      000200 E6               [12]  729 	mov	a,@r0
      000201 24 20            [12]  730 	add	a,#_ssp
      000203 F8               [12]  731 	mov	r0,a
      000204 A6 81            [24]  732 	mov	@r0,_SP
                                    733 ;	preemptive.c:115: SP = temp1;
      000206 78 2A            [12]  734 	mov	r0,#_temp1
      000208 86 81            [24]  735 	mov	_SP,@r0
                                    736 ;	preemptive.c:116: EA = 1;
      00020A D2 AF            [12]  737 	setb	_EA
                                    738 ;	preemptive.c:117: return i;
      00020C 78 2C            [12]  739 	mov	r0,#_i
      00020E 86 82            [24]  740 	mov	dpl,@r0
      000210 22               [24]  741 	ret
                                    742 ;------------------------------------------------------------
                                    743 ;Allocation info for local variables in function 'ThreadYield'
                                    744 ;------------------------------------------------------------
                                    745 ;	preemptive.c:120: void ThreadYield(void) {
                                    746 ;	-----------------------------------------
                                    747 ;	 function ThreadYield
                                    748 ;	-----------------------------------------
      000211                        749 _ThreadYield:
                                    750 ;	preemptive.c:121: EA = 0;
      000211 C2 AF            [12]  751 	clr	_EA
                                    752 ;	preemptive.c:122: SAVESTATE;
      000213 C0 E0            [24]  753 	push ACC 
      000215 C0 F0            [24]  754 	push B 
      000217 C0 82            [24]  755 	push DPL 
      000219 C0 83            [24]  756 	push DPH 
      00021B C0 D0            [24]  757 	push PSW 
      00021D C2 D4            [12]  758 	clr RS1 
      00021F C2 D3            [12]  759 	clr RS0 
      000221 78 28            [12]  760 	mov	r0,#_ID
      000223 E6               [12]  761 	mov	a,@r0
      000224 24 20            [12]  762 	add	a,#_ssp
      000226 F8               [12]  763 	mov	r0,a
      000227 A6 81            [24]  764 	mov	@r0,_SP
                                    765 ;	preemptive.c:123: do {
      000229                        766 00106$:
                                    767 ;	preemptive.c:124: if(ID==MAXTHREADS-1) ID = 1;
      000229 78 28            [12]  768 	mov	r0,#_ID
      00022B B6 03 06         [24]  769 	cjne	@r0,#0x03,00102$
      00022E 78 28            [12]  770 	mov	r0,#_ID
      000230 76 01            [12]  771 	mov	@r0,#0x01
      000232 80 03            [24]  772 	sjmp	00103$
      000234                        773 00102$:
                                    774 ;	preemptive.c:125: else ID++;
      000234 78 28            [12]  775 	mov	r0,#_ID
      000236 06               [12]  776 	inc	@r0
      000237                        777 00103$:
                                    778 ;	preemptive.c:126: if(bitmap[ID]>0) break;
      000237 78 28            [12]  779 	mov	r0,#_ID
      000239 E6               [12]  780 	mov	a,@r0
      00023A 24 24            [12]  781 	add	a,#_bitmap
      00023C F9               [12]  782 	mov	r1,a
      00023D 87 07            [24]  783 	mov	ar7,@r1
      00023F C3               [12]  784 	clr	c
      000240 74 80            [12]  785 	mov	a,#(0x00 ^ 0x80)
      000242 8F F0            [24]  786 	mov	b,r7
      000244 63 F0 80         [24]  787 	xrl	b,#0x80
      000247 95 F0            [12]  788 	subb	a,b
      000249 50 DE            [24]  789 	jnc	00106$
                                    790 ;	preemptive.c:128: RESTORESTATE;
      00024B 78 28            [12]  791 	mov	r0,#_ID
      00024D E6               [12]  792 	mov	a,@r0
      00024E 24 20            [12]  793 	add	a,#_ssp
      000250 F9               [12]  794 	mov	r1,a
      000251 87 81            [24]  795 	mov	_SP,@r1
      000253 D0 D0            [24]  796 	pop PSW 
      000255 D0 83            [24]  797 	pop DPH 
      000257 D0 82            [24]  798 	pop DPL 
      000259 D0 F0            [24]  799 	pop B 
      00025B D0 E0            [24]  800 	pop ACC 
                                    801 ;	preemptive.c:129: EA = 1;
      00025D D2 AF            [12]  802 	setb	_EA
      00025F 22               [24]  803 	ret
                                    804 ;------------------------------------------------------------
                                    805 ;Allocation info for local variables in function 'ThreadExit'
                                    806 ;------------------------------------------------------------
                                    807 ;	preemptive.c:132: void ThreadExit(void) {
                                    808 ;	-----------------------------------------
                                    809 ;	 function ThreadExit
                                    810 ;	-----------------------------------------
      000260                        811 _ThreadExit:
                                    812 ;	preemptive.c:133: SemaphoreSignal(thread,th_tail);
      000260 C2 AF            [12]  813 	clr	_EA
      000262 78 3B            [12]  814 	mov	r0,#_thread
      000264 06               [12]  815 	inc	@r0
      000265 78 3B            [12]  816 	mov	r0,#_thread
      000267 C3               [12]  817 	clr	c
      000268 74 80            [12]  818 	mov	a,#(0x00 ^ 0x80)
      00026A 86 F0            [24]  819 	mov	b,@r0
      00026C 63 F0 80         [24]  820 	xrl	b,#0x80
      00026F 95 F0            [12]  821 	subb	a,b
      000271 40 0B            [24]  822 	jc	00102$
      000273 A9 3D            [24]  823 	mov	r1,_th_tail
      000275 E7               [12]  824 	mov	a,@r1
      000276 FF               [12]  825 	mov	r7,a
      000277 24 24            [12]  826 	add	a,#_bitmap
      000279 F8               [12]  827 	mov	r0,a
      00027A 76 01            [12]  828 	mov	@r0,#0x01
      00027C 15 3D            [12]  829 	dec	_th_tail
      00027E                        830 00102$:
      00027E D2 AF            [12]  831 	setb	_EA
                                    832 ;	preemptive.c:134: EA = 0;
      000280 C2 AF            [12]  833 	clr	_EA
                                    834 ;	preemptive.c:135: bitmap[ID] = 0;
      000282 78 28            [12]  835 	mov	r0,#_ID
      000284 E6               [12]  836 	mov	a,@r0
      000285 24 24            [12]  837 	add	a,#_bitmap
      000287 F8               [12]  838 	mov	r0,a
      000288 76 00            [12]  839 	mov	@r0,#0x00
                                    840 ;	preemptive.c:136: do {
      00028A                        841 00108$:
                                    842 ;	preemptive.c:137: if(ID==MAXTHREADS-1) ID = 1;
      00028A 78 28            [12]  843 	mov	r0,#_ID
      00028C B6 03 06         [24]  844 	cjne	@r0,#0x03,00104$
      00028F 78 28            [12]  845 	mov	r0,#_ID
      000291 76 01            [12]  846 	mov	@r0,#0x01
      000293 80 03            [24]  847 	sjmp	00105$
      000295                        848 00104$:
                                    849 ;	preemptive.c:138: else ID++;
      000295 78 28            [12]  850 	mov	r0,#_ID
      000297 06               [12]  851 	inc	@r0
      000298                        852 00105$:
                                    853 ;	preemptive.c:139: if(bitmap[ID]>0) break;
      000298 78 28            [12]  854 	mov	r0,#_ID
      00029A E6               [12]  855 	mov	a,@r0
      00029B 24 24            [12]  856 	add	a,#_bitmap
      00029D F9               [12]  857 	mov	r1,a
      00029E 87 07            [24]  858 	mov	ar7,@r1
      0002A0 C3               [12]  859 	clr	c
      0002A1 74 80            [12]  860 	mov	a,#(0x00 ^ 0x80)
      0002A3 8F F0            [24]  861 	mov	b,r7
      0002A5 63 F0 80         [24]  862 	xrl	b,#0x80
      0002A8 95 F0            [12]  863 	subb	a,b
      0002AA 50 DE            [24]  864 	jnc	00108$
                                    865 ;	preemptive.c:141: RESTORESTATE;
      0002AC 78 28            [12]  866 	mov	r0,#_ID
      0002AE E6               [12]  867 	mov	a,@r0
      0002AF 24 20            [12]  868 	add	a,#_ssp
      0002B1 F9               [12]  869 	mov	r1,a
      0002B2 87 81            [24]  870 	mov	_SP,@r1
      0002B4 D0 D0            [24]  871 	pop PSW 
      0002B6 D0 83            [24]  872 	pop DPH 
      0002B8 D0 82            [24]  873 	pop DPL 
      0002BA D0 F0            [24]  874 	pop B 
      0002BC D0 E0            [24]  875 	pop ACC 
                                    876 ;	preemptive.c:142: EA = 1;
      0002BE D2 AF            [12]  877 	setb	_EA
      0002C0 22               [24]  878 	ret
                                    879 	.area CSEG    (CODE)
                                    880 	.area CONST   (CODE)
                                    881 	.area XINIT   (CODE)
                                    882 	.area CABS    (ABS,CODE)
