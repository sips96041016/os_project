                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  3 2018) (Linux)
                                      4 ; This file was generated Tue Jan 15 03:52:37 2019
                                      5 ;--------------------------------------------------------
                                      6 	.module testparking
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _timer0_ISR
                                     13 	.globl __mcs51_genXRAMCLEAR
                                     14 	.globl __mcs51_genXINIT
                                     15 	.globl __mcs51_genRAMCLEAR
                                     16 	.globl __sdcc_gsinit_startup
                                     17 	.globl _main
                                     18 	.globl _Printer
                                     19 	.globl _Car5
                                     20 	.globl _Car4
                                     21 	.globl _Car3
                                     22 	.globl _Car2
                                     23 	.globl _Car1
                                     24 	.globl _ThreadYield
                                     25 	.globl _ThreadCreate
                                     26 	.globl _delay
                                     27 	.globl _now
                                     28 	.globl _CY
                                     29 	.globl _AC
                                     30 	.globl _F0
                                     31 	.globl _RS1
                                     32 	.globl _RS0
                                     33 	.globl _OV
                                     34 	.globl _F1
                                     35 	.globl _P
                                     36 	.globl _PS
                                     37 	.globl _PT1
                                     38 	.globl _PX1
                                     39 	.globl _PT0
                                     40 	.globl _PX0
                                     41 	.globl _RD
                                     42 	.globl _WR
                                     43 	.globl _T1
                                     44 	.globl _T0
                                     45 	.globl _INT1
                                     46 	.globl _INT0
                                     47 	.globl _TXD
                                     48 	.globl _RXD
                                     49 	.globl _P3_7
                                     50 	.globl _P3_6
                                     51 	.globl _P3_5
                                     52 	.globl _P3_4
                                     53 	.globl _P3_3
                                     54 	.globl _P3_2
                                     55 	.globl _P3_1
                                     56 	.globl _P3_0
                                     57 	.globl _EA
                                     58 	.globl _ES
                                     59 	.globl _ET1
                                     60 	.globl _EX1
                                     61 	.globl _ET0
                                     62 	.globl _EX0
                                     63 	.globl _P2_7
                                     64 	.globl _P2_6
                                     65 	.globl _P2_5
                                     66 	.globl _P2_4
                                     67 	.globl _P2_3
                                     68 	.globl _P2_2
                                     69 	.globl _P2_1
                                     70 	.globl _P2_0
                                     71 	.globl _SM0
                                     72 	.globl _SM1
                                     73 	.globl _SM2
                                     74 	.globl _REN
                                     75 	.globl _TB8
                                     76 	.globl _RB8
                                     77 	.globl _TI
                                     78 	.globl _RI
                                     79 	.globl _P1_7
                                     80 	.globl _P1_6
                                     81 	.globl _P1_5
                                     82 	.globl _P1_4
                                     83 	.globl _P1_3
                                     84 	.globl _P1_2
                                     85 	.globl _P1_1
                                     86 	.globl _P1_0
                                     87 	.globl _TF1
                                     88 	.globl _TR1
                                     89 	.globl _TF0
                                     90 	.globl _TR0
                                     91 	.globl _IE1
                                     92 	.globl _IT1
                                     93 	.globl _IE0
                                     94 	.globl _IT0
                                     95 	.globl _P0_7
                                     96 	.globl _P0_6
                                     97 	.globl _P0_5
                                     98 	.globl _P0_4
                                     99 	.globl _P0_3
                                    100 	.globl _P0_2
                                    101 	.globl _P0_1
                                    102 	.globl _P0_0
                                    103 	.globl _B
                                    104 	.globl _ACC
                                    105 	.globl _PSW
                                    106 	.globl _IP
                                    107 	.globl _P3
                                    108 	.globl _IE
                                    109 	.globl _P2
                                    110 	.globl _SBUF
                                    111 	.globl _SCON
                                    112 	.globl _P1
                                    113 	.globl _TH1
                                    114 	.globl _TH0
                                    115 	.globl _TL1
                                    116 	.globl _TL0
                                    117 	.globl _TMOD
                                    118 	.globl _TCON
                                    119 	.globl _PCON
                                    120 	.globl _DPH
                                    121 	.globl _DPL
                                    122 	.globl _SP
                                    123 	.globl _P0
                                    124 	.globl _temp3
                                    125 	.globl _print
                                    126 	.globl _c_temp3
                                    127 	.globl _c_temp2
                                    128 	.globl _flag
                                    129 	.globl _current
                                    130 	.globl _j
                                    131 	.globl _plot
                                    132 	.globl _thread
                                    133 	.globl _mutex
                                    134 	.globl _log
                                    135 	.globl _counter
                                    136 	.globl _time
                                    137 	.globl _D
                                    138 	.globl _i
                                    139 	.globl _temp2
                                    140 	.globl _temp1
                                    141 	.globl _c_temp
                                    142 	.globl _ID
                                    143 	.globl _bitmap
                                    144 	.globl _ssp
                                    145 	.globl _p_tail
                                    146 	.globl _th_tail
                                    147 	.globl _m_tail
                                    148 ;--------------------------------------------------------
                                    149 ; special function registers
                                    150 ;--------------------------------------------------------
                                    151 	.area RSEG    (ABS,DATA)
      000000                        152 	.org 0x0000
                           000080   153 _P0	=	0x0080
                           000081   154 _SP	=	0x0081
                           000082   155 _DPL	=	0x0082
                           000083   156 _DPH	=	0x0083
                           000087   157 _PCON	=	0x0087
                           000088   158 _TCON	=	0x0088
                           000089   159 _TMOD	=	0x0089
                           00008A   160 _TL0	=	0x008a
                           00008B   161 _TL1	=	0x008b
                           00008C   162 _TH0	=	0x008c
                           00008D   163 _TH1	=	0x008d
                           000090   164 _P1	=	0x0090
                           000098   165 _SCON	=	0x0098
                           000099   166 _SBUF	=	0x0099
                           0000A0   167 _P2	=	0x00a0
                           0000A8   168 _IE	=	0x00a8
                           0000B0   169 _P3	=	0x00b0
                           0000B8   170 _IP	=	0x00b8
                           0000D0   171 _PSW	=	0x00d0
                           0000E0   172 _ACC	=	0x00e0
                           0000F0   173 _B	=	0x00f0
                                    174 ;--------------------------------------------------------
                                    175 ; special function bits
                                    176 ;--------------------------------------------------------
                                    177 	.area RSEG    (ABS,DATA)
      000000                        178 	.org 0x0000
                           000080   179 _P0_0	=	0x0080
                           000081   180 _P0_1	=	0x0081
                           000082   181 _P0_2	=	0x0082
                           000083   182 _P0_3	=	0x0083
                           000084   183 _P0_4	=	0x0084
                           000085   184 _P0_5	=	0x0085
                           000086   185 _P0_6	=	0x0086
                           000087   186 _P0_7	=	0x0087
                           000088   187 _IT0	=	0x0088
                           000089   188 _IE0	=	0x0089
                           00008A   189 _IT1	=	0x008a
                           00008B   190 _IE1	=	0x008b
                           00008C   191 _TR0	=	0x008c
                           00008D   192 _TF0	=	0x008d
                           00008E   193 _TR1	=	0x008e
                           00008F   194 _TF1	=	0x008f
                           000090   195 _P1_0	=	0x0090
                           000091   196 _P1_1	=	0x0091
                           000092   197 _P1_2	=	0x0092
                           000093   198 _P1_3	=	0x0093
                           000094   199 _P1_4	=	0x0094
                           000095   200 _P1_5	=	0x0095
                           000096   201 _P1_6	=	0x0096
                           000097   202 _P1_7	=	0x0097
                           000098   203 _RI	=	0x0098
                           000099   204 _TI	=	0x0099
                           00009A   205 _RB8	=	0x009a
                           00009B   206 _TB8	=	0x009b
                           00009C   207 _REN	=	0x009c
                           00009D   208 _SM2	=	0x009d
                           00009E   209 _SM1	=	0x009e
                           00009F   210 _SM0	=	0x009f
                           0000A0   211 _P2_0	=	0x00a0
                           0000A1   212 _P2_1	=	0x00a1
                           0000A2   213 _P2_2	=	0x00a2
                           0000A3   214 _P2_3	=	0x00a3
                           0000A4   215 _P2_4	=	0x00a4
                           0000A5   216 _P2_5	=	0x00a5
                           0000A6   217 _P2_6	=	0x00a6
                           0000A7   218 _P2_7	=	0x00a7
                           0000A8   219 _EX0	=	0x00a8
                           0000A9   220 _ET0	=	0x00a9
                           0000AA   221 _EX1	=	0x00aa
                           0000AB   222 _ET1	=	0x00ab
                           0000AC   223 _ES	=	0x00ac
                           0000AF   224 _EA	=	0x00af
                           0000B0   225 _P3_0	=	0x00b0
                           0000B1   226 _P3_1	=	0x00b1
                           0000B2   227 _P3_2	=	0x00b2
                           0000B3   228 _P3_3	=	0x00b3
                           0000B4   229 _P3_4	=	0x00b4
                           0000B5   230 _P3_5	=	0x00b5
                           0000B6   231 _P3_6	=	0x00b6
                           0000B7   232 _P3_7	=	0x00b7
                           0000B0   233 _RXD	=	0x00b0
                           0000B1   234 _TXD	=	0x00b1
                           0000B2   235 _INT0	=	0x00b2
                           0000B3   236 _INT1	=	0x00b3
                           0000B4   237 _T0	=	0x00b4
                           0000B5   238 _T1	=	0x00b5
                           0000B6   239 _WR	=	0x00b6
                           0000B7   240 _RD	=	0x00b7
                           0000B8   241 _PX0	=	0x00b8
                           0000B9   242 _PT0	=	0x00b9
                           0000BA   243 _PX1	=	0x00ba
                           0000BB   244 _PT1	=	0x00bb
                           0000BC   245 _PS	=	0x00bc
                           0000D0   246 _P	=	0x00d0
                           0000D1   247 _F1	=	0x00d1
                           0000D2   248 _OV	=	0x00d2
                           0000D3   249 _RS0	=	0x00d3
                           0000D4   250 _RS1	=	0x00d4
                           0000D5   251 _F0	=	0x00d5
                           0000D6   252 _AC	=	0x00d6
                           0000D7   253 _CY	=	0x00d7
                                    254 ;--------------------------------------------------------
                                    255 ; overlayable register banks
                                    256 ;--------------------------------------------------------
                                    257 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        258 	.ds 8
                                    259 ;--------------------------------------------------------
                                    260 ; internal ram data
                                    261 ;--------------------------------------------------------
                                    262 	.area DSEG    (DATA)
                           00003C   263 _m_tail	=	0x003c
                           00003D   264 _th_tail	=	0x003d
                           00006C   265 _p_tail	=	0x006c
                                    266 ;--------------------------------------------------------
                                    267 ; overlayable items in internal ram 
                                    268 ;--------------------------------------------------------
                                    269 ;--------------------------------------------------------
                                    270 ; Stack segment in internal ram 
                                    271 ;--------------------------------------------------------
                                    272 	.area	SSEG
      000000                        273 __start__stack:
      000000                        274 	.ds	1
                                    275 
                                    276 ;--------------------------------------------------------
                                    277 ; indirectly addressable internal ram data
                                    278 ;--------------------------------------------------------
                                    279 	.area ISEG    (DATA)
                           000020   280 _ssp	=	0x0020
                           000024   281 _bitmap	=	0x0024
                           000028   282 _ID	=	0x0028
                           000029   283 _c_temp	=	0x0029
                           00002A   284 _temp1	=	0x002a
                           00002B   285 _temp2	=	0x002b
                           00002C   286 _i	=	0x002c
                           00002C   287 _D	=	0x002c
                           00003F   288 _time	=	0x003f
                           00003E   289 _counter	=	0x003e
                           000030   290 _log	=	0x0030
                           00003A   291 _mutex	=	0x003a
                           00003B   292 _thread	=	0x003b
                           00004E   293 _plot	=	0x004e
                           00004D   294 _j	=	0x004d
                           00004C   295 _current	=	0x004c
                           00004B   296 _flag	=	0x004b
                           00004A   297 _c_temp2	=	0x004a
                           00005C   298 _c_temp3	=	0x005c
                           00005B   299 _print	=	0x005b
                           00006B   300 _temp3	=	0x006b
                                    301 ;--------------------------------------------------------
                                    302 ; absolute internal ram data
                                    303 ;--------------------------------------------------------
                                    304 	.area IABS    (ABS,DATA)
                                    305 	.area IABS    (ABS,DATA)
                                    306 ;--------------------------------------------------------
                                    307 ; bit data
                                    308 ;--------------------------------------------------------
                                    309 	.area BSEG    (BIT)
                                    310 ;--------------------------------------------------------
                                    311 ; paged external ram data
                                    312 ;--------------------------------------------------------
                                    313 	.area PSEG    (PAG,XDATA)
                                    314 ;--------------------------------------------------------
                                    315 ; external ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area XSEG    (XDATA)
                                    318 ;--------------------------------------------------------
                                    319 ; absolute external ram data
                                    320 ;--------------------------------------------------------
                                    321 	.area XABS    (ABS,XDATA)
                                    322 ;--------------------------------------------------------
                                    323 ; external initialized ram data
                                    324 ;--------------------------------------------------------
                                    325 	.area XISEG   (XDATA)
                                    326 	.area HOME    (CODE)
                                    327 	.area GSINIT0 (CODE)
                                    328 	.area GSINIT1 (CODE)
                                    329 	.area GSINIT2 (CODE)
                                    330 	.area GSINIT3 (CODE)
                                    331 	.area GSINIT4 (CODE)
                                    332 	.area GSINIT5 (CODE)
                                    333 	.area GSINIT  (CODE)
                                    334 	.area GSFINAL (CODE)
                                    335 	.area CSEG    (CODE)
                                    336 ;--------------------------------------------------------
                                    337 ; interrupt vector 
                                    338 ;--------------------------------------------------------
                                    339 	.area HOME    (CODE)
      000000                        340 __interrupt_vect:
      000000 02r08r5F         [24]  341 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  342 	reti
      000004                        343 	.ds	7
      00000B 02r08r66         [24]  344 	ljmp	_timer0_ISR
                                    345 ;--------------------------------------------------------
                                    346 ; global & static initialisations
                                    347 ;--------------------------------------------------------
                                    348 	.area HOME    (CODE)
                                    349 	.area GSINIT  (CODE)
                                    350 	.area GSFINAL (CODE)
                                    351 	.area GSINIT  (CODE)
                                    352 	.globl __sdcc_gsinit_startup
                                    353 	.globl __sdcc_program_startup
                                    354 	.globl __start__stack
                                    355 	.globl __mcs51_genXINIT
                                    356 	.globl __mcs51_genXRAMCLEAR
                                    357 	.globl __mcs51_genRAMCLEAR
                                    358 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  359 	ljmp	__sdcc_program_startup
                                    360 ;--------------------------------------------------------
                                    361 ; Home
                                    362 ;--------------------------------------------------------
                                    363 	.area HOME    (CODE)
                                    364 	.area HOME    (CODE)
      00000E                        365 __sdcc_program_startup:
      00000E 02r08r25         [24]  366 	ljmp	_main
                                    367 ;	return from main will return to caller
                                    368 ;--------------------------------------------------------
                                    369 ; code
                                    370 ;--------------------------------------------------------
                                    371 	.area CSEG    (CODE)
                                    372 ;------------------------------------------------------------
                                    373 ;Allocation info for local variables in function 'Car1'
                                    374 ;------------------------------------------------------------
                                    375 ;	testparking.c:4: void Car1(void) {
                                    376 ;	-----------------------------------------
                                    377 ;	 function Car1
                                    378 ;	-----------------------------------------
      000000                        379 _Car1:
                           000007   380 	ar7 = 0x07
                           000006   381 	ar6 = 0x06
                           000005   382 	ar5 = 0x05
                           000004   383 	ar4 = 0x04
                           000003   384 	ar3 = 0x03
                           000002   385 	ar2 = 0x02
                           000001   386 	ar1 = 0x01
                           000000   387 	ar0 = 0x00
                                    388 ;	testparking.c:5: log[0] = now();
      000000 12r00r00         [24]  389 	lcall	_now
      000003 E5 82            [12]  390 	mov	a,dpl
      000005 78 30            [12]  391 	mov	r0,#_log
      000007 F6               [12]  392 	mov	@r0,a
                                    393 ;	testparking.c:6: SemaphoreWait(mutex,m_tail);
      000008 C2 AF            [12]  394 	clr	_EA
      00000A 78 3A            [12]  395 	mov	r0,#_mutex
      00000C 16               [12]  396 	dec	@r0
      00000D 78 3A            [12]  397 	mov	r0,#_mutex
      00000F E6               [12]  398 	mov	a,@r0
      000010 30 E7 13         [24]  399 	jnb	acc.7,00102$
      000013 05 3C            [12]  400 	inc	_m_tail
      000015 A9 3C            [24]  401 	mov	r1,_m_tail
      000017 78 28            [12]  402 	mov	r0,#_ID
      000019 E6               [12]  403 	mov	a,@r0
      00001A F7               [12]  404 	mov	@r1,a
      00001B 78 28            [12]  405 	mov	r0,#_ID
      00001D E6               [12]  406 	mov	a,@r0
      00001E 24 24            [12]  407 	add	a,#_bitmap
      000020 F8               [12]  408 	mov	r0,a
      000021 76 FF            [12]  409 	mov	@r0,#0xFF
      000023 12r00r00         [24]  410 	lcall	_ThreadYield
      000026                        411 00102$:
      000026 D2 AF            [12]  412 	setb	_EA
                                    413 ;	testparking.c:7: if(!plot[0]) {
      000028 78 4E            [12]  414 	mov	r0,#_plot
      00002A E6               [12]  415 	mov	a,@r0
      00002B 70 0E            [24]  416 	jnz	00104$
                                    417 ;	testparking.c:8: plot[0] = 1;
      00002D 78 4E            [12]  418 	mov	r0,#_plot
      00002F 76 01            [12]  419 	mov	@r0,#0x01
                                    420 ;	testparking.c:16: __endasm;
      000031 78 30            [12]  421 	mov r0,#(_log + 0x0000)
      000033 E6               [12]  422 	mov a,@r0
      000034 FF               [12]  423 	mov r7,a
      000035 74 7F            [12]  424 	mov a,#0x7F
      000037 5F               [12]  425 	anl a,r7
      000038 F6               [12]  426 	mov @r0,a
      000039 80 0C            [24]  427 	sjmp	00105$
      00003B                        428 00104$:
                                    429 ;	testparking.c:19: plot[1] = 1;
      00003B 78 4F            [12]  430 	mov	r0,#(_plot + 0x0001)
      00003D 76 01            [12]  431 	mov	@r0,#0x01
                                    432 ;	testparking.c:27: __endasm;
      00003F 78 30            [12]  433 	mov r0,#(_log + 0x0000)
      000041 E6               [12]  434 	mov a,@r0
      000042 FF               [12]  435 	mov r7,a
      000043 74 80            [12]  436 	mov a,#0x80
      000045 4F               [12]  437 	orl a,r7
      000046 F6               [12]  438 	mov @r0,a
      000047                        439 00105$:
                                    440 ;	testparking.c:29: SemaphoreSignal(mutex,m_tail);
      000047 C2 AF            [12]  441 	clr	_EA
      000049 78 3A            [12]  442 	mov	r0,#_mutex
      00004B 06               [12]  443 	inc	@r0
      00004C 78 3A            [12]  444 	mov	r0,#_mutex
      00004E C3               [12]  445 	clr	c
      00004F 74 80            [12]  446 	mov	a,#(0x00 ^ 0x80)
      000051 86 F0            [24]  447 	mov	b,@r0
      000053 63 F0 80         [24]  448 	xrl	b,#0x80
      000056 95 F0            [12]  449 	subb	a,b
      000058 40 0B            [24]  450 	jc	00107$
      00005A A9 3C            [24]  451 	mov	r1,_m_tail
      00005C E7               [12]  452 	mov	a,@r1
      00005D FF               [12]  453 	mov	r7,a
      00005E 24 24            [12]  454 	add	a,#_bitmap
      000060 F8               [12]  455 	mov	r0,a
      000061 76 01            [12]  456 	mov	@r0,#0x01
      000063 15 3C            [12]  457 	dec	_m_tail
      000065                        458 00107$:
      000065 D2 AF            [12]  459 	setb	_EA
                                    460 ;	testparking.c:30: SemaphoreSignal(print,p_tail);
      000067 C2 AF            [12]  461 	clr	_EA
      000069 78 5B            [12]  462 	mov	r0,#_print
      00006B 06               [12]  463 	inc	@r0
      00006C 78 5B            [12]  464 	mov	r0,#_print
      00006E C3               [12]  465 	clr	c
      00006F 74 80            [12]  466 	mov	a,#(0x00 ^ 0x80)
      000071 86 F0            [24]  467 	mov	b,@r0
      000073 63 F0 80         [24]  468 	xrl	b,#0x80
      000076 95 F0            [12]  469 	subb	a,b
      000078 40 0B            [24]  470 	jc	00109$
      00007A A9 6C            [24]  471 	mov	r1,_p_tail
      00007C E7               [12]  472 	mov	a,@r1
      00007D FF               [12]  473 	mov	r7,a
      00007E 24 24            [12]  474 	add	a,#_bitmap
      000080 F8               [12]  475 	mov	r0,a
      000081 76 01            [12]  476 	mov	@r0,#0x01
      000083 15 6C            [12]  477 	dec	_p_tail
      000085                        478 00109$:
      000085 D2 AF            [12]  479 	setb	_EA
                                    480 ;	testparking.c:31: delay(1);
      000087 75 82 01         [24]  481 	mov	dpl,#0x01
      00008A 12r00r00         [24]  482 	lcall	_delay
                                    483 ;	testparking.c:32: log[1] = now();
      00008D 12r00r00         [24]  484 	lcall	_now
      000090 E5 82            [12]  485 	mov	a,dpl
      000092 78 31            [12]  486 	mov	r0,#(_log + 0x0001)
      000094 F6               [12]  487 	mov	@r0,a
                                    488 ;	testparking.c:33: SemaphoreWait(mutex,m_tail);
      000095 C2 AF            [12]  489 	clr	_EA
      000097 78 3A            [12]  490 	mov	r0,#_mutex
      000099 16               [12]  491 	dec	@r0
      00009A 78 3A            [12]  492 	mov	r0,#_mutex
      00009C E6               [12]  493 	mov	a,@r0
      00009D 30 E7 13         [24]  494 	jnb	acc.7,00111$
      0000A0 05 3C            [12]  495 	inc	_m_tail
      0000A2 A9 3C            [24]  496 	mov	r1,_m_tail
      0000A4 78 28            [12]  497 	mov	r0,#_ID
      0000A6 E6               [12]  498 	mov	a,@r0
      0000A7 F7               [12]  499 	mov	@r1,a
      0000A8 78 28            [12]  500 	mov	r0,#_ID
      0000AA E6               [12]  501 	mov	a,@r0
      0000AB 24 24            [12]  502 	add	a,#_bitmap
      0000AD F8               [12]  503 	mov	r0,a
      0000AE 76 FF            [12]  504 	mov	@r0,#0xFF
      0000B0 12r00r00         [24]  505 	lcall	_ThreadYield
      0000B3                        506 00111$:
      0000B3 D2 AF            [12]  507 	setb	_EA
                                    508 ;	testparking.c:34: if(!(plot[0]-1)) {
      0000B5 78 4E            [12]  509 	mov	r0,#_plot
      0000B7 E6               [12]  510 	mov	a,@r0
      0000B8 FF               [12]  511 	mov	r7,a
      0000B9 33               [12]  512 	rlc	a
      0000BA 95 E0            [12]  513 	subb	a,acc
      0000BC FE               [12]  514 	mov	r6,a
      0000BD 1F               [12]  515 	dec	r7
      0000BE BF FF 01         [24]  516 	cjne	r7,#0xFF,00150$
      0000C1 1E               [12]  517 	dec	r6
      0000C2                        518 00150$:
      0000C2 EF               [12]  519 	mov	a,r7
      0000C3 4E               [12]  520 	orl	a,r6
                                    521 ;	testparking.c:35: plot[0] = 0;
      0000C4 70 0D            [24]  522 	jnz	00113$
      0000C6 78 4E            [12]  523 	mov	r0,#_plot
      0000C8 F6               [12]  524 	mov	@r0,a
                                    525 ;	testparking.c:43: __endasm;
      0000C9 78 31            [12]  526 	mov r0,#(_log + 0x0001)
      0000CB E6               [12]  527 	mov a,@r0
      0000CC FF               [12]  528 	mov r7,a
      0000CD 74 7F            [12]  529 	mov a,#0x7F
      0000CF 5F               [12]  530 	anl a,r7
      0000D0 F6               [12]  531 	mov @r0,a
      0000D1 80 0C            [24]  532 	sjmp	00114$
      0000D3                        533 00113$:
                                    534 ;	testparking.c:46: plot[1] = 0;
      0000D3 78 4F            [12]  535 	mov	r0,#(_plot + 0x0001)
      0000D5 76 00            [12]  536 	mov	@r0,#0x00
                                    537 ;	testparking.c:54: __endasm;
      0000D7 78 31            [12]  538 	mov r0,#(_log + 0x0001)
      0000D9 E6               [12]  539 	mov a,@r0
      0000DA FF               [12]  540 	mov r7,a
      0000DB 74 80            [12]  541 	mov a,#0x80
      0000DD 4F               [12]  542 	orl a,r7
      0000DE F6               [12]  543 	mov @r0,a
      0000DF                        544 00114$:
                                    545 ;	testparking.c:56: SemaphoreSignal(mutex,m_tail);
      0000DF C2 AF            [12]  546 	clr	_EA
      0000E1 78 3A            [12]  547 	mov	r0,#_mutex
      0000E3 06               [12]  548 	inc	@r0
      0000E4 78 3A            [12]  549 	mov	r0,#_mutex
      0000E6 C3               [12]  550 	clr	c
      0000E7 74 80            [12]  551 	mov	a,#(0x00 ^ 0x80)
      0000E9 86 F0            [24]  552 	mov	b,@r0
      0000EB 63 F0 80         [24]  553 	xrl	b,#0x80
      0000EE 95 F0            [12]  554 	subb	a,b
      0000F0 40 0B            [24]  555 	jc	00116$
      0000F2 A9 3C            [24]  556 	mov	r1,_m_tail
      0000F4 E7               [12]  557 	mov	a,@r1
      0000F5 FF               [12]  558 	mov	r7,a
      0000F6 24 24            [12]  559 	add	a,#_bitmap
      0000F8 F8               [12]  560 	mov	r0,a
      0000F9 76 01            [12]  561 	mov	@r0,#0x01
      0000FB 15 3C            [12]  562 	dec	_m_tail
      0000FD                        563 00116$:
      0000FD D2 AF            [12]  564 	setb	_EA
                                    565 ;	testparking.c:57: SemaphoreSignal(print,p_tail);
      0000FF C2 AF            [12]  566 	clr	_EA
      000101 78 5B            [12]  567 	mov	r0,#_print
      000103 06               [12]  568 	inc	@r0
      000104 78 5B            [12]  569 	mov	r0,#_print
      000106 C3               [12]  570 	clr	c
      000107 74 80            [12]  571 	mov	a,#(0x00 ^ 0x80)
      000109 86 F0            [24]  572 	mov	b,@r0
      00010B 63 F0 80         [24]  573 	xrl	b,#0x80
      00010E 95 F0            [12]  574 	subb	a,b
      000110 40 0B            [24]  575 	jc	00118$
      000112 A9 6C            [24]  576 	mov	r1,_p_tail
      000114 E7               [12]  577 	mov	a,@r1
      000115 FF               [12]  578 	mov	r7,a
      000116 24 24            [12]  579 	add	a,#_bitmap
      000118 F8               [12]  580 	mov	r0,a
      000119 76 01            [12]  581 	mov	@r0,#0x01
      00011B 15 6C            [12]  582 	dec	_p_tail
      00011D                        583 00118$:
      00011D D2 AF            [12]  584 	setb	_EA
      00011F 22               [24]  585 	ret
                                    586 ;------------------------------------------------------------
                                    587 ;Allocation info for local variables in function 'Car2'
                                    588 ;------------------------------------------------------------
                                    589 ;	testparking.c:60: void Car2(void) {
                                    590 ;	-----------------------------------------
                                    591 ;	 function Car2
                                    592 ;	-----------------------------------------
      000120                        593 _Car2:
                                    594 ;	testparking.c:61: log[2] = now();
      000120 12r00r00         [24]  595 	lcall	_now
      000123 E5 82            [12]  596 	mov	a,dpl
      000125 78 32            [12]  597 	mov	r0,#(_log + 0x0002)
      000127 F6               [12]  598 	mov	@r0,a
                                    599 ;	testparking.c:62: SemaphoreWait(mutex,m_tail);
      000128 C2 AF            [12]  600 	clr	_EA
      00012A 78 3A            [12]  601 	mov	r0,#_mutex
      00012C 16               [12]  602 	dec	@r0
      00012D 78 3A            [12]  603 	mov	r0,#_mutex
      00012F E6               [12]  604 	mov	a,@r0
      000130 30 E7 13         [24]  605 	jnb	acc.7,00102$
      000133 05 3C            [12]  606 	inc	_m_tail
      000135 A9 3C            [24]  607 	mov	r1,_m_tail
      000137 78 28            [12]  608 	mov	r0,#_ID
      000139 E6               [12]  609 	mov	a,@r0
      00013A F7               [12]  610 	mov	@r1,a
      00013B 78 28            [12]  611 	mov	r0,#_ID
      00013D E6               [12]  612 	mov	a,@r0
      00013E 24 24            [12]  613 	add	a,#_bitmap
      000140 F8               [12]  614 	mov	r0,a
      000141 76 FF            [12]  615 	mov	@r0,#0xFF
      000143 12r00r00         [24]  616 	lcall	_ThreadYield
      000146                        617 00102$:
      000146 D2 AF            [12]  618 	setb	_EA
                                    619 ;	testparking.c:63: if(!plot[0]) {
      000148 78 4E            [12]  620 	mov	r0,#_plot
      00014A E6               [12]  621 	mov	a,@r0
      00014B 70 0E            [24]  622 	jnz	00104$
                                    623 ;	testparking.c:64: plot[0] = 2;
      00014D 78 4E            [12]  624 	mov	r0,#_plot
      00014F 76 02            [12]  625 	mov	@r0,#0x02
                                    626 ;	testparking.c:72: __endasm;
      000151 78 32            [12]  627 	mov r0,#(_log + 0x0002)
      000153 E6               [12]  628 	mov a,@r0
      000154 FF               [12]  629 	mov r7,a
      000155 74 7F            [12]  630 	mov a,#0x7F
      000157 5F               [12]  631 	anl a,r7
      000158 F6               [12]  632 	mov @r0,a
      000159 80 0C            [24]  633 	sjmp	00105$
      00015B                        634 00104$:
                                    635 ;	testparking.c:75: plot[1] = 2;
      00015B 78 4F            [12]  636 	mov	r0,#(_plot + 0x0001)
      00015D 76 02            [12]  637 	mov	@r0,#0x02
                                    638 ;	testparking.c:83: __endasm;
      00015F 78 32            [12]  639 	mov r0,#(_log + 0x0002)
      000161 E6               [12]  640 	mov a,@r0
      000162 FF               [12]  641 	mov r7,a
      000163 74 80            [12]  642 	mov a,#0x80
      000165 4F               [12]  643 	orl a,r7
      000166 F6               [12]  644 	mov @r0,a
      000167                        645 00105$:
                                    646 ;	testparking.c:85: SemaphoreSignal(mutex,m_tail);
      000167 C2 AF            [12]  647 	clr	_EA
      000169 78 3A            [12]  648 	mov	r0,#_mutex
      00016B 06               [12]  649 	inc	@r0
      00016C 78 3A            [12]  650 	mov	r0,#_mutex
      00016E C3               [12]  651 	clr	c
      00016F 74 80            [12]  652 	mov	a,#(0x00 ^ 0x80)
      000171 86 F0            [24]  653 	mov	b,@r0
      000173 63 F0 80         [24]  654 	xrl	b,#0x80
      000176 95 F0            [12]  655 	subb	a,b
      000178 40 0B            [24]  656 	jc	00107$
      00017A A9 3C            [24]  657 	mov	r1,_m_tail
      00017C E7               [12]  658 	mov	a,@r1
      00017D FF               [12]  659 	mov	r7,a
      00017E 24 24            [12]  660 	add	a,#_bitmap
      000180 F8               [12]  661 	mov	r0,a
      000181 76 01            [12]  662 	mov	@r0,#0x01
      000183 15 3C            [12]  663 	dec	_m_tail
      000185                        664 00107$:
      000185 D2 AF            [12]  665 	setb	_EA
                                    666 ;	testparking.c:86: SemaphoreSignal(print,p_tail);
      000187 C2 AF            [12]  667 	clr	_EA
      000189 78 5B            [12]  668 	mov	r0,#_print
      00018B 06               [12]  669 	inc	@r0
      00018C 78 5B            [12]  670 	mov	r0,#_print
      00018E C3               [12]  671 	clr	c
      00018F 74 80            [12]  672 	mov	a,#(0x00 ^ 0x80)
      000191 86 F0            [24]  673 	mov	b,@r0
      000193 63 F0 80         [24]  674 	xrl	b,#0x80
      000196 95 F0            [12]  675 	subb	a,b
      000198 40 0B            [24]  676 	jc	00109$
      00019A A9 6C            [24]  677 	mov	r1,_p_tail
      00019C E7               [12]  678 	mov	a,@r1
      00019D FF               [12]  679 	mov	r7,a
      00019E 24 24            [12]  680 	add	a,#_bitmap
      0001A0 F8               [12]  681 	mov	r0,a
      0001A1 76 01            [12]  682 	mov	@r0,#0x01
      0001A3 15 6C            [12]  683 	dec	_p_tail
      0001A5                        684 00109$:
      0001A5 D2 AF            [12]  685 	setb	_EA
                                    686 ;	testparking.c:87: delay(2);
      0001A7 75 82 02         [24]  687 	mov	dpl,#0x02
      0001AA 12r00r00         [24]  688 	lcall	_delay
                                    689 ;	testparking.c:88: log[3] = now();
      0001AD 12r00r00         [24]  690 	lcall	_now
      0001B0 E5 82            [12]  691 	mov	a,dpl
      0001B2 78 33            [12]  692 	mov	r0,#(_log + 0x0003)
      0001B4 F6               [12]  693 	mov	@r0,a
                                    694 ;	testparking.c:89: SemaphoreWait(mutex,m_tail);
      0001B5 C2 AF            [12]  695 	clr	_EA
      0001B7 78 3A            [12]  696 	mov	r0,#_mutex
      0001B9 16               [12]  697 	dec	@r0
      0001BA 78 3A            [12]  698 	mov	r0,#_mutex
      0001BC E6               [12]  699 	mov	a,@r0
      0001BD 30 E7 13         [24]  700 	jnb	acc.7,00111$
      0001C0 05 3C            [12]  701 	inc	_m_tail
      0001C2 A9 3C            [24]  702 	mov	r1,_m_tail
      0001C4 78 28            [12]  703 	mov	r0,#_ID
      0001C6 E6               [12]  704 	mov	a,@r0
      0001C7 F7               [12]  705 	mov	@r1,a
      0001C8 78 28            [12]  706 	mov	r0,#_ID
      0001CA E6               [12]  707 	mov	a,@r0
      0001CB 24 24            [12]  708 	add	a,#_bitmap
      0001CD F8               [12]  709 	mov	r0,a
      0001CE 76 FF            [12]  710 	mov	@r0,#0xFF
      0001D0 12r00r00         [24]  711 	lcall	_ThreadYield
      0001D3                        712 00111$:
      0001D3 D2 AF            [12]  713 	setb	_EA
                                    714 ;	testparking.c:90: if(!(plot[0]-2)) {
      0001D5 78 4E            [12]  715 	mov	r0,#_plot
      0001D7 E6               [12]  716 	mov	a,@r0
      0001D8 FF               [12]  717 	mov	r7,a
      0001D9 33               [12]  718 	rlc	a
      0001DA 95 E0            [12]  719 	subb	a,acc
      0001DC FE               [12]  720 	mov	r6,a
      0001DD EF               [12]  721 	mov	a,r7
      0001DE 24 FE            [12]  722 	add	a,#0xFE
      0001E0 FF               [12]  723 	mov	r7,a
      0001E1 EE               [12]  724 	mov	a,r6
      0001E2 34 FF            [12]  725 	addc	a,#0xFF
      0001E4 FE               [12]  726 	mov	r6,a
      0001E5 4F               [12]  727 	orl	a,r7
                                    728 ;	testparking.c:91: plot[0] = 0;
      0001E6 70 0D            [24]  729 	jnz	00113$
      0001E8 78 4E            [12]  730 	mov	r0,#_plot
      0001EA F6               [12]  731 	mov	@r0,a
                                    732 ;	testparking.c:99: __endasm;
      0001EB 78 33            [12]  733 	mov r0,#(_log + 0x0003)
      0001ED E6               [12]  734 	mov a,@r0
      0001EE FF               [12]  735 	mov r7,a
      0001EF 74 7F            [12]  736 	mov a,#0x7F
      0001F1 5F               [12]  737 	anl a,r7
      0001F2 F6               [12]  738 	mov @r0,a
      0001F3 80 0C            [24]  739 	sjmp	00114$
      0001F5                        740 00113$:
                                    741 ;	testparking.c:102: plot[1] = 0;
      0001F5 78 4F            [12]  742 	mov	r0,#(_plot + 0x0001)
      0001F7 76 00            [12]  743 	mov	@r0,#0x00
                                    744 ;	testparking.c:110: __endasm;
      0001F9 78 33            [12]  745 	mov r0,#(_log + 0x0003)
      0001FB E6               [12]  746 	mov a,@r0
      0001FC FF               [12]  747 	mov r7,a
      0001FD 74 80            [12]  748 	mov a,#0x80
      0001FF 4F               [12]  749 	orl a,r7
      000200 F6               [12]  750 	mov @r0,a
      000201                        751 00114$:
                                    752 ;	testparking.c:112: SemaphoreSignal(mutex,m_tail);
      000201 C2 AF            [12]  753 	clr	_EA
      000203 78 3A            [12]  754 	mov	r0,#_mutex
      000205 06               [12]  755 	inc	@r0
      000206 78 3A            [12]  756 	mov	r0,#_mutex
      000208 C3               [12]  757 	clr	c
      000209 74 80            [12]  758 	mov	a,#(0x00 ^ 0x80)
      00020B 86 F0            [24]  759 	mov	b,@r0
      00020D 63 F0 80         [24]  760 	xrl	b,#0x80
      000210 95 F0            [12]  761 	subb	a,b
      000212 40 0B            [24]  762 	jc	00116$
      000214 A9 3C            [24]  763 	mov	r1,_m_tail
      000216 E7               [12]  764 	mov	a,@r1
      000217 FF               [12]  765 	mov	r7,a
      000218 24 24            [12]  766 	add	a,#_bitmap
      00021A F8               [12]  767 	mov	r0,a
      00021B 76 01            [12]  768 	mov	@r0,#0x01
      00021D 15 3C            [12]  769 	dec	_m_tail
      00021F                        770 00116$:
      00021F D2 AF            [12]  771 	setb	_EA
                                    772 ;	testparking.c:113: SemaphoreSignal(print,p_tail);
      000221 C2 AF            [12]  773 	clr	_EA
      000223 78 5B            [12]  774 	mov	r0,#_print
      000225 06               [12]  775 	inc	@r0
      000226 78 5B            [12]  776 	mov	r0,#_print
      000228 C3               [12]  777 	clr	c
      000229 74 80            [12]  778 	mov	a,#(0x00 ^ 0x80)
      00022B 86 F0            [24]  779 	mov	b,@r0
      00022D 63 F0 80         [24]  780 	xrl	b,#0x80
      000230 95 F0            [12]  781 	subb	a,b
      000232 40 0B            [24]  782 	jc	00118$
      000234 A9 6C            [24]  783 	mov	r1,_p_tail
      000236 E7               [12]  784 	mov	a,@r1
      000237 FF               [12]  785 	mov	r7,a
      000238 24 24            [12]  786 	add	a,#_bitmap
      00023A F8               [12]  787 	mov	r0,a
      00023B 76 01            [12]  788 	mov	@r0,#0x01
      00023D 15 6C            [12]  789 	dec	_p_tail
      00023F                        790 00118$:
      00023F D2 AF            [12]  791 	setb	_EA
      000241 22               [24]  792 	ret
                                    793 ;------------------------------------------------------------
                                    794 ;Allocation info for local variables in function 'Car3'
                                    795 ;------------------------------------------------------------
                                    796 ;	testparking.c:116: void Car3(void) {
                                    797 ;	-----------------------------------------
                                    798 ;	 function Car3
                                    799 ;	-----------------------------------------
      000242                        800 _Car3:
                                    801 ;	testparking.c:117: log[4] = now();
      000242 12r00r00         [24]  802 	lcall	_now
      000245 E5 82            [12]  803 	mov	a,dpl
      000247 78 34            [12]  804 	mov	r0,#(_log + 0x0004)
      000249 F6               [12]  805 	mov	@r0,a
                                    806 ;	testparking.c:118: SemaphoreWait(mutex,m_tail);
      00024A C2 AF            [12]  807 	clr	_EA
      00024C 78 3A            [12]  808 	mov	r0,#_mutex
      00024E 16               [12]  809 	dec	@r0
      00024F 78 3A            [12]  810 	mov	r0,#_mutex
      000251 E6               [12]  811 	mov	a,@r0
      000252 30 E7 13         [24]  812 	jnb	acc.7,00102$
      000255 05 3C            [12]  813 	inc	_m_tail
      000257 A9 3C            [24]  814 	mov	r1,_m_tail
      000259 78 28            [12]  815 	mov	r0,#_ID
      00025B E6               [12]  816 	mov	a,@r0
      00025C F7               [12]  817 	mov	@r1,a
      00025D 78 28            [12]  818 	mov	r0,#_ID
      00025F E6               [12]  819 	mov	a,@r0
      000260 24 24            [12]  820 	add	a,#_bitmap
      000262 F8               [12]  821 	mov	r0,a
      000263 76 FF            [12]  822 	mov	@r0,#0xFF
      000265 12r00r00         [24]  823 	lcall	_ThreadYield
      000268                        824 00102$:
      000268 D2 AF            [12]  825 	setb	_EA
                                    826 ;	testparking.c:119: if(!plot[0]) {
      00026A 78 4E            [12]  827 	mov	r0,#_plot
      00026C E6               [12]  828 	mov	a,@r0
      00026D 70 0E            [24]  829 	jnz	00104$
                                    830 ;	testparking.c:120: plot[0] = 3;
      00026F 78 4E            [12]  831 	mov	r0,#_plot
      000271 76 03            [12]  832 	mov	@r0,#0x03
                                    833 ;	testparking.c:128: __endasm;
      000273 78 34            [12]  834 	mov r0,#(_log + 0x0004)
      000275 E6               [12]  835 	mov a,@r0
      000276 FF               [12]  836 	mov r7,a
      000277 74 7F            [12]  837 	mov a,#0x7F
      000279 5F               [12]  838 	anl a,r7
      00027A F6               [12]  839 	mov @r0,a
      00027B 80 0C            [24]  840 	sjmp	00105$
      00027D                        841 00104$:
                                    842 ;	testparking.c:131: plot[1] = 3;
      00027D 78 4F            [12]  843 	mov	r0,#(_plot + 0x0001)
      00027F 76 03            [12]  844 	mov	@r0,#0x03
                                    845 ;	testparking.c:139: __endasm;
      000281 78 34            [12]  846 	mov r0,#(_log + 0x0004)
      000283 E6               [12]  847 	mov a,@r0
      000284 FF               [12]  848 	mov r7,a
      000285 74 80            [12]  849 	mov a,#0x80
      000287 4F               [12]  850 	orl a,r7
      000288 F6               [12]  851 	mov @r0,a
      000289                        852 00105$:
                                    853 ;	testparking.c:141: SemaphoreSignal(mutex,m_tail);
      000289 C2 AF            [12]  854 	clr	_EA
      00028B 78 3A            [12]  855 	mov	r0,#_mutex
      00028D 06               [12]  856 	inc	@r0
      00028E 78 3A            [12]  857 	mov	r0,#_mutex
      000290 C3               [12]  858 	clr	c
      000291 74 80            [12]  859 	mov	a,#(0x00 ^ 0x80)
      000293 86 F0            [24]  860 	mov	b,@r0
      000295 63 F0 80         [24]  861 	xrl	b,#0x80
      000298 95 F0            [12]  862 	subb	a,b
      00029A 40 0B            [24]  863 	jc	00107$
      00029C A9 3C            [24]  864 	mov	r1,_m_tail
      00029E E7               [12]  865 	mov	a,@r1
      00029F FF               [12]  866 	mov	r7,a
      0002A0 24 24            [12]  867 	add	a,#_bitmap
      0002A2 F8               [12]  868 	mov	r0,a
      0002A3 76 01            [12]  869 	mov	@r0,#0x01
      0002A5 15 3C            [12]  870 	dec	_m_tail
      0002A7                        871 00107$:
      0002A7 D2 AF            [12]  872 	setb	_EA
                                    873 ;	testparking.c:142: SemaphoreSignal(print,p_tail);
      0002A9 C2 AF            [12]  874 	clr	_EA
      0002AB 78 5B            [12]  875 	mov	r0,#_print
      0002AD 06               [12]  876 	inc	@r0
      0002AE 78 5B            [12]  877 	mov	r0,#_print
      0002B0 C3               [12]  878 	clr	c
      0002B1 74 80            [12]  879 	mov	a,#(0x00 ^ 0x80)
      0002B3 86 F0            [24]  880 	mov	b,@r0
      0002B5 63 F0 80         [24]  881 	xrl	b,#0x80
      0002B8 95 F0            [12]  882 	subb	a,b
      0002BA 40 0B            [24]  883 	jc	00109$
      0002BC A9 6C            [24]  884 	mov	r1,_p_tail
      0002BE E7               [12]  885 	mov	a,@r1
      0002BF FF               [12]  886 	mov	r7,a
      0002C0 24 24            [12]  887 	add	a,#_bitmap
      0002C2 F8               [12]  888 	mov	r0,a
      0002C3 76 01            [12]  889 	mov	@r0,#0x01
      0002C5 15 6C            [12]  890 	dec	_p_tail
      0002C7                        891 00109$:
      0002C7 D2 AF            [12]  892 	setb	_EA
                                    893 ;	testparking.c:143: delay(1);
      0002C9 75 82 01         [24]  894 	mov	dpl,#0x01
      0002CC 12r00r00         [24]  895 	lcall	_delay
                                    896 ;	testparking.c:144: log[5] = now();
      0002CF 12r00r00         [24]  897 	lcall	_now
      0002D2 E5 82            [12]  898 	mov	a,dpl
      0002D4 78 35            [12]  899 	mov	r0,#(_log + 0x0005)
      0002D6 F6               [12]  900 	mov	@r0,a
                                    901 ;	testparking.c:145: SemaphoreWait(mutex,m_tail);
      0002D7 C2 AF            [12]  902 	clr	_EA
      0002D9 78 3A            [12]  903 	mov	r0,#_mutex
      0002DB 16               [12]  904 	dec	@r0
      0002DC 78 3A            [12]  905 	mov	r0,#_mutex
      0002DE E6               [12]  906 	mov	a,@r0
      0002DF 30 E7 13         [24]  907 	jnb	acc.7,00111$
      0002E2 05 3C            [12]  908 	inc	_m_tail
      0002E4 A9 3C            [24]  909 	mov	r1,_m_tail
      0002E6 78 28            [12]  910 	mov	r0,#_ID
      0002E8 E6               [12]  911 	mov	a,@r0
      0002E9 F7               [12]  912 	mov	@r1,a
      0002EA 78 28            [12]  913 	mov	r0,#_ID
      0002EC E6               [12]  914 	mov	a,@r0
      0002ED 24 24            [12]  915 	add	a,#_bitmap
      0002EF F8               [12]  916 	mov	r0,a
      0002F0 76 FF            [12]  917 	mov	@r0,#0xFF
      0002F2 12r00r00         [24]  918 	lcall	_ThreadYield
      0002F5                        919 00111$:
      0002F5 D2 AF            [12]  920 	setb	_EA
                                    921 ;	testparking.c:146: if(!(plot[0]-3)) {
      0002F7 78 4E            [12]  922 	mov	r0,#_plot
      0002F9 E6               [12]  923 	mov	a,@r0
      0002FA FF               [12]  924 	mov	r7,a
      0002FB 33               [12]  925 	rlc	a
      0002FC 95 E0            [12]  926 	subb	a,acc
      0002FE FE               [12]  927 	mov	r6,a
      0002FF EF               [12]  928 	mov	a,r7
      000300 24 FD            [12]  929 	add	a,#0xFD
      000302 FF               [12]  930 	mov	r7,a
      000303 EE               [12]  931 	mov	a,r6
      000304 34 FF            [12]  932 	addc	a,#0xFF
      000306 FE               [12]  933 	mov	r6,a
      000307 4F               [12]  934 	orl	a,r7
                                    935 ;	testparking.c:147: plot[0] = 0;
      000308 70 0D            [24]  936 	jnz	00113$
      00030A 78 4E            [12]  937 	mov	r0,#_plot
      00030C F6               [12]  938 	mov	@r0,a
                                    939 ;	testparking.c:155: __endasm;
      00030D 78 35            [12]  940 	mov r0,#(_log + 0x0005)
      00030F E6               [12]  941 	mov a,@r0
      000310 FF               [12]  942 	mov r7,a
      000311 74 7F            [12]  943 	mov a,#0x7F
      000313 5F               [12]  944 	anl a,r7
      000314 F6               [12]  945 	mov @r0,a
      000315 80 0C            [24]  946 	sjmp	00114$
      000317                        947 00113$:
                                    948 ;	testparking.c:158: plot[1] = 0;
      000317 78 4F            [12]  949 	mov	r0,#(_plot + 0x0001)
      000319 76 00            [12]  950 	mov	@r0,#0x00
                                    951 ;	testparking.c:166: __endasm;
      00031B 78 35            [12]  952 	mov r0,#(_log + 0x0005)
      00031D E6               [12]  953 	mov a,@r0
      00031E FF               [12]  954 	mov r7,a
      00031F 74 80            [12]  955 	mov a,#0x80
      000321 4F               [12]  956 	orl a,r7
      000322 F6               [12]  957 	mov @r0,a
      000323                        958 00114$:
                                    959 ;	testparking.c:168: SemaphoreSignal(mutex,m_tail);
      000323 C2 AF            [12]  960 	clr	_EA
      000325 78 3A            [12]  961 	mov	r0,#_mutex
      000327 06               [12]  962 	inc	@r0
      000328 78 3A            [12]  963 	mov	r0,#_mutex
      00032A C3               [12]  964 	clr	c
      00032B 74 80            [12]  965 	mov	a,#(0x00 ^ 0x80)
      00032D 86 F0            [24]  966 	mov	b,@r0
      00032F 63 F0 80         [24]  967 	xrl	b,#0x80
      000332 95 F0            [12]  968 	subb	a,b
      000334 40 0B            [24]  969 	jc	00116$
      000336 A9 3C            [24]  970 	mov	r1,_m_tail
      000338 E7               [12]  971 	mov	a,@r1
      000339 FF               [12]  972 	mov	r7,a
      00033A 24 24            [12]  973 	add	a,#_bitmap
      00033C F8               [12]  974 	mov	r0,a
      00033D 76 01            [12]  975 	mov	@r0,#0x01
      00033F 15 3C            [12]  976 	dec	_m_tail
      000341                        977 00116$:
      000341 D2 AF            [12]  978 	setb	_EA
                                    979 ;	testparking.c:169: SemaphoreSignal(print,p_tail);
      000343 C2 AF            [12]  980 	clr	_EA
      000345 78 5B            [12]  981 	mov	r0,#_print
      000347 06               [12]  982 	inc	@r0
      000348 78 5B            [12]  983 	mov	r0,#_print
      00034A C3               [12]  984 	clr	c
      00034B 74 80            [12]  985 	mov	a,#(0x00 ^ 0x80)
      00034D 86 F0            [24]  986 	mov	b,@r0
      00034F 63 F0 80         [24]  987 	xrl	b,#0x80
      000352 95 F0            [12]  988 	subb	a,b
      000354 40 0B            [24]  989 	jc	00118$
      000356 A9 6C            [24]  990 	mov	r1,_p_tail
      000358 E7               [12]  991 	mov	a,@r1
      000359 FF               [12]  992 	mov	r7,a
      00035A 24 24            [12]  993 	add	a,#_bitmap
      00035C F8               [12]  994 	mov	r0,a
      00035D 76 01            [12]  995 	mov	@r0,#0x01
      00035F 15 6C            [12]  996 	dec	_p_tail
      000361                        997 00118$:
      000361 D2 AF            [12]  998 	setb	_EA
      000363 22               [24]  999 	ret
                                   1000 ;------------------------------------------------------------
                                   1001 ;Allocation info for local variables in function 'Car4'
                                   1002 ;------------------------------------------------------------
                                   1003 ;	testparking.c:172: void Car4(void) {
                                   1004 ;	-----------------------------------------
                                   1005 ;	 function Car4
                                   1006 ;	-----------------------------------------
      000364                       1007 _Car4:
                                   1008 ;	testparking.c:173: log[6] = now();
      000364 12r00r00         [24] 1009 	lcall	_now
      000367 E5 82            [12] 1010 	mov	a,dpl
      000369 78 36            [12] 1011 	mov	r0,#(_log + 0x0006)
      00036B F6               [12] 1012 	mov	@r0,a
                                   1013 ;	testparking.c:174: SemaphoreWait(mutex,m_tail);
      00036C C2 AF            [12] 1014 	clr	_EA
      00036E 78 3A            [12] 1015 	mov	r0,#_mutex
      000370 16               [12] 1016 	dec	@r0
      000371 78 3A            [12] 1017 	mov	r0,#_mutex
      000373 E6               [12] 1018 	mov	a,@r0
      000374 30 E7 13         [24] 1019 	jnb	acc.7,00102$
      000377 05 3C            [12] 1020 	inc	_m_tail
      000379 A9 3C            [24] 1021 	mov	r1,_m_tail
      00037B 78 28            [12] 1022 	mov	r0,#_ID
      00037D E6               [12] 1023 	mov	a,@r0
      00037E F7               [12] 1024 	mov	@r1,a
      00037F 78 28            [12] 1025 	mov	r0,#_ID
      000381 E6               [12] 1026 	mov	a,@r0
      000382 24 24            [12] 1027 	add	a,#_bitmap
      000384 F8               [12] 1028 	mov	r0,a
      000385 76 FF            [12] 1029 	mov	@r0,#0xFF
      000387 12r00r00         [24] 1030 	lcall	_ThreadYield
      00038A                       1031 00102$:
      00038A D2 AF            [12] 1032 	setb	_EA
                                   1033 ;	testparking.c:175: if(!plot[0]) {
      00038C 78 4E            [12] 1034 	mov	r0,#_plot
      00038E E6               [12] 1035 	mov	a,@r0
      00038F 70 0E            [24] 1036 	jnz	00104$
                                   1037 ;	testparking.c:176: plot[0] = 4;
      000391 78 4E            [12] 1038 	mov	r0,#_plot
      000393 76 04            [12] 1039 	mov	@r0,#0x04
                                   1040 ;	testparking.c:184: __endasm;
      000395 78 36            [12] 1041 	mov r0,#(_log + 0x0006)
      000397 E6               [12] 1042 	mov a,@r0
      000398 FF               [12] 1043 	mov r7,a
      000399 74 7F            [12] 1044 	mov a,#0x7F
      00039B 5F               [12] 1045 	anl a,r7
      00039C F6               [12] 1046 	mov @r0,a
      00039D 80 0C            [24] 1047 	sjmp	00105$
      00039F                       1048 00104$:
                                   1049 ;	testparking.c:187: plot[1] = 4;
      00039F 78 4F            [12] 1050 	mov	r0,#(_plot + 0x0001)
      0003A1 76 04            [12] 1051 	mov	@r0,#0x04
                                   1052 ;	testparking.c:195: __endasm;
      0003A3 78 36            [12] 1053 	mov r0,#(_log + 0x0006)
      0003A5 E6               [12] 1054 	mov a,@r0
      0003A6 FF               [12] 1055 	mov r7,a
      0003A7 74 80            [12] 1056 	mov a,#0x80
      0003A9 4F               [12] 1057 	orl a,r7
      0003AA F6               [12] 1058 	mov @r0,a
      0003AB                       1059 00105$:
                                   1060 ;	testparking.c:197: SemaphoreSignal(mutex,m_tail);
      0003AB C2 AF            [12] 1061 	clr	_EA
      0003AD 78 3A            [12] 1062 	mov	r0,#_mutex
      0003AF 06               [12] 1063 	inc	@r0
      0003B0 78 3A            [12] 1064 	mov	r0,#_mutex
      0003B2 C3               [12] 1065 	clr	c
      0003B3 74 80            [12] 1066 	mov	a,#(0x00 ^ 0x80)
      0003B5 86 F0            [24] 1067 	mov	b,@r0
      0003B7 63 F0 80         [24] 1068 	xrl	b,#0x80
      0003BA 95 F0            [12] 1069 	subb	a,b
      0003BC 40 0B            [24] 1070 	jc	00107$
      0003BE A9 3C            [24] 1071 	mov	r1,_m_tail
      0003C0 E7               [12] 1072 	mov	a,@r1
      0003C1 FF               [12] 1073 	mov	r7,a
      0003C2 24 24            [12] 1074 	add	a,#_bitmap
      0003C4 F8               [12] 1075 	mov	r0,a
      0003C5 76 01            [12] 1076 	mov	@r0,#0x01
      0003C7 15 3C            [12] 1077 	dec	_m_tail
      0003C9                       1078 00107$:
      0003C9 D2 AF            [12] 1079 	setb	_EA
                                   1080 ;	testparking.c:198: SemaphoreSignal(print,p_tail);
      0003CB C2 AF            [12] 1081 	clr	_EA
      0003CD 78 5B            [12] 1082 	mov	r0,#_print
      0003CF 06               [12] 1083 	inc	@r0
      0003D0 78 5B            [12] 1084 	mov	r0,#_print
      0003D2 C3               [12] 1085 	clr	c
      0003D3 74 80            [12] 1086 	mov	a,#(0x00 ^ 0x80)
      0003D5 86 F0            [24] 1087 	mov	b,@r0
      0003D7 63 F0 80         [24] 1088 	xrl	b,#0x80
      0003DA 95 F0            [12] 1089 	subb	a,b
      0003DC 40 0B            [24] 1090 	jc	00109$
      0003DE A9 6C            [24] 1091 	mov	r1,_p_tail
      0003E0 E7               [12] 1092 	mov	a,@r1
      0003E1 FF               [12] 1093 	mov	r7,a
      0003E2 24 24            [12] 1094 	add	a,#_bitmap
      0003E4 F8               [12] 1095 	mov	r0,a
      0003E5 76 01            [12] 1096 	mov	@r0,#0x01
      0003E7 15 6C            [12] 1097 	dec	_p_tail
      0003E9                       1098 00109$:
      0003E9 D2 AF            [12] 1099 	setb	_EA
                                   1100 ;	testparking.c:199: delay(3);
      0003EB 75 82 03         [24] 1101 	mov	dpl,#0x03
      0003EE 12r00r00         [24] 1102 	lcall	_delay
                                   1103 ;	testparking.c:200: log[7] = now();
      0003F1 12r00r00         [24] 1104 	lcall	_now
      0003F4 E5 82            [12] 1105 	mov	a,dpl
      0003F6 78 37            [12] 1106 	mov	r0,#(_log + 0x0007)
      0003F8 F6               [12] 1107 	mov	@r0,a
                                   1108 ;	testparking.c:201: SemaphoreWait(mutex,m_tail);
      0003F9 C2 AF            [12] 1109 	clr	_EA
      0003FB 78 3A            [12] 1110 	mov	r0,#_mutex
      0003FD 16               [12] 1111 	dec	@r0
      0003FE 78 3A            [12] 1112 	mov	r0,#_mutex
      000400 E6               [12] 1113 	mov	a,@r0
      000401 30 E7 13         [24] 1114 	jnb	acc.7,00111$
      000404 05 3C            [12] 1115 	inc	_m_tail
      000406 A9 3C            [24] 1116 	mov	r1,_m_tail
      000408 78 28            [12] 1117 	mov	r0,#_ID
      00040A E6               [12] 1118 	mov	a,@r0
      00040B F7               [12] 1119 	mov	@r1,a
      00040C 78 28            [12] 1120 	mov	r0,#_ID
      00040E E6               [12] 1121 	mov	a,@r0
      00040F 24 24            [12] 1122 	add	a,#_bitmap
      000411 F8               [12] 1123 	mov	r0,a
      000412 76 FF            [12] 1124 	mov	@r0,#0xFF
      000414 12r00r00         [24] 1125 	lcall	_ThreadYield
      000417                       1126 00111$:
      000417 D2 AF            [12] 1127 	setb	_EA
                                   1128 ;	testparking.c:202: if(!(plot[0]-4)) {
      000419 78 4E            [12] 1129 	mov	r0,#_plot
      00041B E6               [12] 1130 	mov	a,@r0
      00041C FF               [12] 1131 	mov	r7,a
      00041D 33               [12] 1132 	rlc	a
      00041E 95 E0            [12] 1133 	subb	a,acc
      000420 FE               [12] 1134 	mov	r6,a
      000421 EF               [12] 1135 	mov	a,r7
      000422 24 FC            [12] 1136 	add	a,#0xFC
      000424 FF               [12] 1137 	mov	r7,a
      000425 EE               [12] 1138 	mov	a,r6
      000426 34 FF            [12] 1139 	addc	a,#0xFF
      000428 FE               [12] 1140 	mov	r6,a
      000429 4F               [12] 1141 	orl	a,r7
                                   1142 ;	testparking.c:203: plot[0] = 0;
      00042A 70 0D            [24] 1143 	jnz	00113$
      00042C 78 4E            [12] 1144 	mov	r0,#_plot
      00042E F6               [12] 1145 	mov	@r0,a
                                   1146 ;	testparking.c:211: __endasm;
      00042F 78 37            [12] 1147 	mov r0,#(_log + 0x0007)
      000431 E6               [12] 1148 	mov a,@r0
      000432 FF               [12] 1149 	mov r7,a
      000433 74 7F            [12] 1150 	mov a,#0x7F
      000435 5F               [12] 1151 	anl a,r7
      000436 F6               [12] 1152 	mov @r0,a
      000437 80 0C            [24] 1153 	sjmp	00114$
      000439                       1154 00113$:
                                   1155 ;	testparking.c:214: plot[1] = 0;
      000439 78 4F            [12] 1156 	mov	r0,#(_plot + 0x0001)
      00043B 76 00            [12] 1157 	mov	@r0,#0x00
                                   1158 ;	testparking.c:222: __endasm;
      00043D 78 37            [12] 1159 	mov r0,#(_log + 0x0007)
      00043F E6               [12] 1160 	mov a,@r0
      000440 FF               [12] 1161 	mov r7,a
      000441 74 80            [12] 1162 	mov a,#0x80
      000443 4F               [12] 1163 	orl a,r7
      000444 F6               [12] 1164 	mov @r0,a
      000445                       1165 00114$:
                                   1166 ;	testparking.c:224: SemaphoreSignal(mutex,m_tail);
      000445 C2 AF            [12] 1167 	clr	_EA
      000447 78 3A            [12] 1168 	mov	r0,#_mutex
      000449 06               [12] 1169 	inc	@r0
      00044A 78 3A            [12] 1170 	mov	r0,#_mutex
      00044C C3               [12] 1171 	clr	c
      00044D 74 80            [12] 1172 	mov	a,#(0x00 ^ 0x80)
      00044F 86 F0            [24] 1173 	mov	b,@r0
      000451 63 F0 80         [24] 1174 	xrl	b,#0x80
      000454 95 F0            [12] 1175 	subb	a,b
      000456 40 0B            [24] 1176 	jc	00116$
      000458 A9 3C            [24] 1177 	mov	r1,_m_tail
      00045A E7               [12] 1178 	mov	a,@r1
      00045B FF               [12] 1179 	mov	r7,a
      00045C 24 24            [12] 1180 	add	a,#_bitmap
      00045E F8               [12] 1181 	mov	r0,a
      00045F 76 01            [12] 1182 	mov	@r0,#0x01
      000461 15 3C            [12] 1183 	dec	_m_tail
      000463                       1184 00116$:
      000463 D2 AF            [12] 1185 	setb	_EA
                                   1186 ;	testparking.c:225: SemaphoreSignal(print,p_tail);
      000465 C2 AF            [12] 1187 	clr	_EA
      000467 78 5B            [12] 1188 	mov	r0,#_print
      000469 06               [12] 1189 	inc	@r0
      00046A 78 5B            [12] 1190 	mov	r0,#_print
      00046C C3               [12] 1191 	clr	c
      00046D 74 80            [12] 1192 	mov	a,#(0x00 ^ 0x80)
      00046F 86 F0            [24] 1193 	mov	b,@r0
      000471 63 F0 80         [24] 1194 	xrl	b,#0x80
      000474 95 F0            [12] 1195 	subb	a,b
      000476 40 0B            [24] 1196 	jc	00118$
      000478 A9 6C            [24] 1197 	mov	r1,_p_tail
      00047A E7               [12] 1198 	mov	a,@r1
      00047B FF               [12] 1199 	mov	r7,a
      00047C 24 24            [12] 1200 	add	a,#_bitmap
      00047E F8               [12] 1201 	mov	r0,a
      00047F 76 01            [12] 1202 	mov	@r0,#0x01
      000481 15 6C            [12] 1203 	dec	_p_tail
      000483                       1204 00118$:
      000483 D2 AF            [12] 1205 	setb	_EA
      000485 22               [24] 1206 	ret
                                   1207 ;------------------------------------------------------------
                                   1208 ;Allocation info for local variables in function 'Car5'
                                   1209 ;------------------------------------------------------------
                                   1210 ;	testparking.c:228: void Car5(void) {
                                   1211 ;	-----------------------------------------
                                   1212 ;	 function Car5
                                   1213 ;	-----------------------------------------
      000486                       1214 _Car5:
                                   1215 ;	testparking.c:229: log[8] = now();
      000486 12r00r00         [24] 1216 	lcall	_now
      000489 E5 82            [12] 1217 	mov	a,dpl
      00048B 78 38            [12] 1218 	mov	r0,#(_log + 0x0008)
      00048D F6               [12] 1219 	mov	@r0,a
                                   1220 ;	testparking.c:230: SemaphoreWait(mutex,m_tail);
      00048E C2 AF            [12] 1221 	clr	_EA
      000490 78 3A            [12] 1222 	mov	r0,#_mutex
      000492 16               [12] 1223 	dec	@r0
      000493 78 3A            [12] 1224 	mov	r0,#_mutex
      000495 E6               [12] 1225 	mov	a,@r0
      000496 30 E7 13         [24] 1226 	jnb	acc.7,00102$
      000499 05 3C            [12] 1227 	inc	_m_tail
      00049B A9 3C            [24] 1228 	mov	r1,_m_tail
      00049D 78 28            [12] 1229 	mov	r0,#_ID
      00049F E6               [12] 1230 	mov	a,@r0
      0004A0 F7               [12] 1231 	mov	@r1,a
      0004A1 78 28            [12] 1232 	mov	r0,#_ID
      0004A3 E6               [12] 1233 	mov	a,@r0
      0004A4 24 24            [12] 1234 	add	a,#_bitmap
      0004A6 F8               [12] 1235 	mov	r0,a
      0004A7 76 FF            [12] 1236 	mov	@r0,#0xFF
      0004A9 12r00r00         [24] 1237 	lcall	_ThreadYield
      0004AC                       1238 00102$:
      0004AC D2 AF            [12] 1239 	setb	_EA
                                   1240 ;	testparking.c:231: if(!plot[0]) {
      0004AE 78 4E            [12] 1241 	mov	r0,#_plot
      0004B0 E6               [12] 1242 	mov	a,@r0
      0004B1 70 0E            [24] 1243 	jnz	00104$
                                   1244 ;	testparking.c:232: plot[0] = 5;
      0004B3 78 4E            [12] 1245 	mov	r0,#_plot
      0004B5 76 05            [12] 1246 	mov	@r0,#0x05
                                   1247 ;	testparking.c:240: __endasm;
      0004B7 78 38            [12] 1248 	mov r0,#(_log + 0x0008)
      0004B9 E6               [12] 1249 	mov a,@r0
      0004BA FF               [12] 1250 	mov r7,a
      0004BB 74 7F            [12] 1251 	mov a,#0x7F
      0004BD 5F               [12] 1252 	anl a,r7
      0004BE F6               [12] 1253 	mov @r0,a
      0004BF 80 0C            [24] 1254 	sjmp	00105$
      0004C1                       1255 00104$:
                                   1256 ;	testparking.c:243: plot[1] = 5;
      0004C1 78 4F            [12] 1257 	mov	r0,#(_plot + 0x0001)
      0004C3 76 05            [12] 1258 	mov	@r0,#0x05
                                   1259 ;	testparking.c:251: __endasm;
      0004C5 78 38            [12] 1260 	mov r0,#(_log + 0x0008)
      0004C7 E6               [12] 1261 	mov a,@r0
      0004C8 FF               [12] 1262 	mov r7,a
      0004C9 74 80            [12] 1263 	mov a,#0x80
      0004CB 4F               [12] 1264 	orl a,r7
      0004CC F6               [12] 1265 	mov @r0,a
      0004CD                       1266 00105$:
                                   1267 ;	testparking.c:253: SemaphoreSignal(mutex,m_tail);
      0004CD C2 AF            [12] 1268 	clr	_EA
      0004CF 78 3A            [12] 1269 	mov	r0,#_mutex
      0004D1 06               [12] 1270 	inc	@r0
      0004D2 78 3A            [12] 1271 	mov	r0,#_mutex
      0004D4 C3               [12] 1272 	clr	c
      0004D5 74 80            [12] 1273 	mov	a,#(0x00 ^ 0x80)
      0004D7 86 F0            [24] 1274 	mov	b,@r0
      0004D9 63 F0 80         [24] 1275 	xrl	b,#0x80
      0004DC 95 F0            [12] 1276 	subb	a,b
      0004DE 40 0B            [24] 1277 	jc	00107$
      0004E0 A9 3C            [24] 1278 	mov	r1,_m_tail
      0004E2 E7               [12] 1279 	mov	a,@r1
      0004E3 FF               [12] 1280 	mov	r7,a
      0004E4 24 24            [12] 1281 	add	a,#_bitmap
      0004E6 F8               [12] 1282 	mov	r0,a
      0004E7 76 01            [12] 1283 	mov	@r0,#0x01
      0004E9 15 3C            [12] 1284 	dec	_m_tail
      0004EB                       1285 00107$:
      0004EB D2 AF            [12] 1286 	setb	_EA
                                   1287 ;	testparking.c:254: SemaphoreSignal(print,p_tail);
      0004ED C2 AF            [12] 1288 	clr	_EA
      0004EF 78 5B            [12] 1289 	mov	r0,#_print
      0004F1 06               [12] 1290 	inc	@r0
      0004F2 78 5B            [12] 1291 	mov	r0,#_print
      0004F4 C3               [12] 1292 	clr	c
      0004F5 74 80            [12] 1293 	mov	a,#(0x00 ^ 0x80)
      0004F7 86 F0            [24] 1294 	mov	b,@r0
      0004F9 63 F0 80         [24] 1295 	xrl	b,#0x80
      0004FC 95 F0            [12] 1296 	subb	a,b
      0004FE 40 0B            [24] 1297 	jc	00109$
      000500 A9 6C            [24] 1298 	mov	r1,_p_tail
      000502 E7               [12] 1299 	mov	a,@r1
      000503 FF               [12] 1300 	mov	r7,a
      000504 24 24            [12] 1301 	add	a,#_bitmap
      000506 F8               [12] 1302 	mov	r0,a
      000507 76 01            [12] 1303 	mov	@r0,#0x01
      000509 15 6C            [12] 1304 	dec	_p_tail
      00050B                       1305 00109$:
      00050B D2 AF            [12] 1306 	setb	_EA
                                   1307 ;	testparking.c:255: delay(2);
      00050D 75 82 02         [24] 1308 	mov	dpl,#0x02
      000510 12r00r00         [24] 1309 	lcall	_delay
                                   1310 ;	testparking.c:256: log[9] = now();
      000513 12r00r00         [24] 1311 	lcall	_now
      000516 E5 82            [12] 1312 	mov	a,dpl
      000518 78 39            [12] 1313 	mov	r0,#(_log + 0x0009)
      00051A F6               [12] 1314 	mov	@r0,a
                                   1315 ;	testparking.c:257: SemaphoreWait(mutex,m_tail);
      00051B C2 AF            [12] 1316 	clr	_EA
      00051D 78 3A            [12] 1317 	mov	r0,#_mutex
      00051F 16               [12] 1318 	dec	@r0
      000520 78 3A            [12] 1319 	mov	r0,#_mutex
      000522 E6               [12] 1320 	mov	a,@r0
      000523 30 E7 13         [24] 1321 	jnb	acc.7,00111$
      000526 05 3C            [12] 1322 	inc	_m_tail
      000528 A9 3C            [24] 1323 	mov	r1,_m_tail
      00052A 78 28            [12] 1324 	mov	r0,#_ID
      00052C E6               [12] 1325 	mov	a,@r0
      00052D F7               [12] 1326 	mov	@r1,a
      00052E 78 28            [12] 1327 	mov	r0,#_ID
      000530 E6               [12] 1328 	mov	a,@r0
      000531 24 24            [12] 1329 	add	a,#_bitmap
      000533 F8               [12] 1330 	mov	r0,a
      000534 76 FF            [12] 1331 	mov	@r0,#0xFF
      000536 12r00r00         [24] 1332 	lcall	_ThreadYield
      000539                       1333 00111$:
      000539 D2 AF            [12] 1334 	setb	_EA
                                   1335 ;	testparking.c:258: if(!(plot[0]-5)) {
      00053B 78 4E            [12] 1336 	mov	r0,#_plot
      00053D E6               [12] 1337 	mov	a,@r0
      00053E FF               [12] 1338 	mov	r7,a
      00053F 33               [12] 1339 	rlc	a
      000540 95 E0            [12] 1340 	subb	a,acc
      000542 FE               [12] 1341 	mov	r6,a
      000543 EF               [12] 1342 	mov	a,r7
      000544 24 FB            [12] 1343 	add	a,#0xFB
      000546 FF               [12] 1344 	mov	r7,a
      000547 EE               [12] 1345 	mov	a,r6
      000548 34 FF            [12] 1346 	addc	a,#0xFF
      00054A FE               [12] 1347 	mov	r6,a
      00054B 4F               [12] 1348 	orl	a,r7
                                   1349 ;	testparking.c:259: plot[0] = 0;
      00054C 70 0D            [24] 1350 	jnz	00113$
      00054E 78 4E            [12] 1351 	mov	r0,#_plot
      000550 F6               [12] 1352 	mov	@r0,a
                                   1353 ;	testparking.c:267: __endasm;
      000551 78 39            [12] 1354 	mov r0,#(_log + 0x0009)
      000553 E6               [12] 1355 	mov a,@r0
      000554 FF               [12] 1356 	mov r7,a
      000555 74 7F            [12] 1357 	mov a,#0x7F
      000557 5F               [12] 1358 	anl a,r7
      000558 F6               [12] 1359 	mov @r0,a
      000559 80 0C            [24] 1360 	sjmp	00114$
      00055B                       1361 00113$:
                                   1362 ;	testparking.c:270: plot[1] = 0;
      00055B 78 4F            [12] 1363 	mov	r0,#(_plot + 0x0001)
      00055D 76 00            [12] 1364 	mov	@r0,#0x00
                                   1365 ;	testparking.c:278: __endasm;
      00055F 78 39            [12] 1366 	mov r0,#(_log + 0x0009)
      000561 E6               [12] 1367 	mov a,@r0
      000562 FF               [12] 1368 	mov r7,a
      000563 74 80            [12] 1369 	mov a,#0x80
      000565 4F               [12] 1370 	orl a,r7
      000566 F6               [12] 1371 	mov @r0,a
      000567                       1372 00114$:
                                   1373 ;	testparking.c:280: SemaphoreSignal(mutex,m_tail);
      000567 C2 AF            [12] 1374 	clr	_EA
      000569 78 3A            [12] 1375 	mov	r0,#_mutex
      00056B 06               [12] 1376 	inc	@r0
      00056C 78 3A            [12] 1377 	mov	r0,#_mutex
      00056E C3               [12] 1378 	clr	c
      00056F 74 80            [12] 1379 	mov	a,#(0x00 ^ 0x80)
      000571 86 F0            [24] 1380 	mov	b,@r0
      000573 63 F0 80         [24] 1381 	xrl	b,#0x80
      000576 95 F0            [12] 1382 	subb	a,b
      000578 40 0B            [24] 1383 	jc	00116$
      00057A A9 3C            [24] 1384 	mov	r1,_m_tail
      00057C E7               [12] 1385 	mov	a,@r1
      00057D FF               [12] 1386 	mov	r7,a
      00057E 24 24            [12] 1387 	add	a,#_bitmap
      000580 F8               [12] 1388 	mov	r0,a
      000581 76 01            [12] 1389 	mov	@r0,#0x01
      000583 15 3C            [12] 1390 	dec	_m_tail
      000585                       1391 00116$:
      000585 D2 AF            [12] 1392 	setb	_EA
                                   1393 ;	testparking.c:281: SemaphoreSignal(print,p_tail);
      000587 C2 AF            [12] 1394 	clr	_EA
      000589 78 5B            [12] 1395 	mov	r0,#_print
      00058B 06               [12] 1396 	inc	@r0
      00058C 78 5B            [12] 1397 	mov	r0,#_print
      00058E C3               [12] 1398 	clr	c
      00058F 74 80            [12] 1399 	mov	a,#(0x00 ^ 0x80)
      000591 86 F0            [24] 1400 	mov	b,@r0
      000593 63 F0 80         [24] 1401 	xrl	b,#0x80
      000596 95 F0            [12] 1402 	subb	a,b
      000598 40 0B            [24] 1403 	jc	00118$
      00059A A9 6C            [24] 1404 	mov	r1,_p_tail
      00059C E7               [12] 1405 	mov	a,@r1
      00059D FF               [12] 1406 	mov	r7,a
      00059E 24 24            [12] 1407 	add	a,#_bitmap
      0005A0 F8               [12] 1408 	mov	r0,a
      0005A1 76 01            [12] 1409 	mov	@r0,#0x01
      0005A3 15 6C            [12] 1410 	dec	_p_tail
      0005A5                       1411 00118$:
      0005A5 D2 AF            [12] 1412 	setb	_EA
      0005A7 22               [24] 1413 	ret
                                   1414 ;------------------------------------------------------------
                                   1415 ;Allocation info for local variables in function 'Printer'
                                   1416 ;------------------------------------------------------------
                                   1417 ;	testparking.c:284: void Printer(void) {
                                   1418 ;	-----------------------------------------
                                   1419 ;	 function Printer
                                   1420 ;	-----------------------------------------
      0005A8                       1421 _Printer:
                                   1422 ;	testparking.c:285: TMOD |= 0x20;
      0005A8 43 89 20         [24] 1423 	orl	_TMOD,#0x20
                                   1424 ;	testparking.c:286: TH1 = -6;
      0005AB 75 8D FA         [24] 1425 	mov	_TH1,#0xFA
                                   1426 ;	testparking.c:287: SCON = 0x50;
      0005AE 75 98 50         [24] 1427 	mov	_SCON,#0x50
                                   1428 ;	testparking.c:288: TR1 = 1;
      0005B1 D2 8E            [12] 1429 	setb	_TR1
                                   1430 ;	testparking.c:290: SemaphoreWait(print,p_tail);
      0005B3 C2 AF            [12] 1431 	clr	_EA
      0005B5 78 5B            [12] 1432 	mov	r0,#_print
      0005B7 16               [12] 1433 	dec	@r0
      0005B8 78 5B            [12] 1434 	mov	r0,#_print
      0005BA E6               [12] 1435 	mov	a,@r0
      0005BB 30 E7 13         [24] 1436 	jnb	acc.7,00102$
      0005BE 05 6C            [12] 1437 	inc	_p_tail
      0005C0 A9 6C            [24] 1438 	mov	r1,_p_tail
      0005C2 78 28            [12] 1439 	mov	r0,#_ID
      0005C4 E6               [12] 1440 	mov	a,@r0
      0005C5 F7               [12] 1441 	mov	@r1,a
      0005C6 78 28            [12] 1442 	mov	r0,#_ID
      0005C8 E6               [12] 1443 	mov	a,@r0
      0005C9 24 24            [12] 1444 	add	a,#_bitmap
      0005CB F8               [12] 1445 	mov	r0,a
      0005CC 76 FF            [12] 1446 	mov	@r0,#0xFF
      0005CE 12r00r00         [24] 1447 	lcall	_ThreadYield
      0005D1                       1448 00102$:
      0005D1 D2 AF            [12] 1449 	setb	_EA
                                   1450 ;	testparking.c:291: SemaphoreWait(print,p_tail);
      0005D3 C2 AF            [12] 1451 	clr	_EA
      0005D5 78 5B            [12] 1452 	mov	r0,#_print
      0005D7 16               [12] 1453 	dec	@r0
      0005D8 78 5B            [12] 1454 	mov	r0,#_print
      0005DA E6               [12] 1455 	mov	a,@r0
      0005DB 30 E7 13         [24] 1456 	jnb	acc.7,00104$
      0005DE 05 6C            [12] 1457 	inc	_p_tail
      0005E0 A9 6C            [24] 1458 	mov	r1,_p_tail
      0005E2 78 28            [12] 1459 	mov	r0,#_ID
      0005E4 E6               [12] 1460 	mov	a,@r0
      0005E5 F7               [12] 1461 	mov	@r1,a
      0005E6 78 28            [12] 1462 	mov	r0,#_ID
      0005E8 E6               [12] 1463 	mov	a,@r0
      0005E9 24 24            [12] 1464 	add	a,#_bitmap
      0005EB F8               [12] 1465 	mov	r0,a
      0005EC 76 FF            [12] 1466 	mov	@r0,#0xFF
      0005EE 12r00r00         [24] 1467 	lcall	_ThreadYield
      0005F1                       1468 00104$:
      0005F1 D2 AF            [12] 1469 	setb	_EA
                                   1470 ;	testparking.c:292: SemaphoreWait(print,p_tail);
      0005F3 C2 AF            [12] 1471 	clr	_EA
      0005F5 78 5B            [12] 1472 	mov	r0,#_print
      0005F7 16               [12] 1473 	dec	@r0
      0005F8 78 5B            [12] 1474 	mov	r0,#_print
      0005FA E6               [12] 1475 	mov	a,@r0
      0005FB 30 E7 13         [24] 1476 	jnb	acc.7,00106$
      0005FE 05 6C            [12] 1477 	inc	_p_tail
      000600 A9 6C            [24] 1478 	mov	r1,_p_tail
      000602 78 28            [12] 1479 	mov	r0,#_ID
      000604 E6               [12] 1480 	mov	a,@r0
      000605 F7               [12] 1481 	mov	@r1,a
      000606 78 28            [12] 1482 	mov	r0,#_ID
      000608 E6               [12] 1483 	mov	a,@r0
      000609 24 24            [12] 1484 	add	a,#_bitmap
      00060B F8               [12] 1485 	mov	r0,a
      00060C 76 FF            [12] 1486 	mov	@r0,#0xFF
      00060E 12r00r00         [24] 1487 	lcall	_ThreadYield
      000611                       1488 00106$:
      000611 D2 AF            [12] 1489 	setb	_EA
                                   1490 ;	testparking.c:293: SemaphoreWait(print,p_tail);
      000613 C2 AF            [12] 1491 	clr	_EA
      000615 78 5B            [12] 1492 	mov	r0,#_print
      000617 16               [12] 1493 	dec	@r0
      000618 78 5B            [12] 1494 	mov	r0,#_print
      00061A E6               [12] 1495 	mov	a,@r0
      00061B 30 E7 13         [24] 1496 	jnb	acc.7,00108$
      00061E 05 6C            [12] 1497 	inc	_p_tail
      000620 A9 6C            [24] 1498 	mov	r1,_p_tail
      000622 78 28            [12] 1499 	mov	r0,#_ID
      000624 E6               [12] 1500 	mov	a,@r0
      000625 F7               [12] 1501 	mov	@r1,a
      000626 78 28            [12] 1502 	mov	r0,#_ID
      000628 E6               [12] 1503 	mov	a,@r0
      000629 24 24            [12] 1504 	add	a,#_bitmap
      00062B F8               [12] 1505 	mov	r0,a
      00062C 76 FF            [12] 1506 	mov	@r0,#0xFF
      00062E 12r00r00         [24] 1507 	lcall	_ThreadYield
      000631                       1508 00108$:
      000631 D2 AF            [12] 1509 	setb	_EA
                                   1510 ;	testparking.c:294: SemaphoreWait(print,p_tail);
      000633 C2 AF            [12] 1511 	clr	_EA
      000635 78 5B            [12] 1512 	mov	r0,#_print
      000637 16               [12] 1513 	dec	@r0
      000638 78 5B            [12] 1514 	mov	r0,#_print
      00063A E6               [12] 1515 	mov	a,@r0
      00063B 30 E7 13         [24] 1516 	jnb	acc.7,00110$
      00063E 05 6C            [12] 1517 	inc	_p_tail
      000640 A9 6C            [24] 1518 	mov	r1,_p_tail
      000642 78 28            [12] 1519 	mov	r0,#_ID
      000644 E6               [12] 1520 	mov	a,@r0
      000645 F7               [12] 1521 	mov	@r1,a
      000646 78 28            [12] 1522 	mov	r0,#_ID
      000648 E6               [12] 1523 	mov	a,@r0
      000649 24 24            [12] 1524 	add	a,#_bitmap
      00064B F8               [12] 1525 	mov	r0,a
      00064C 76 FF            [12] 1526 	mov	@r0,#0xFF
      00064E 12r00r00         [24] 1527 	lcall	_ThreadYield
      000651                       1528 00110$:
      000651 D2 AF            [12] 1529 	setb	_EA
                                   1530 ;	testparking.c:295: SemaphoreWait(print,p_tail);
      000653 C2 AF            [12] 1531 	clr	_EA
      000655 78 5B            [12] 1532 	mov	r0,#_print
      000657 16               [12] 1533 	dec	@r0
      000658 78 5B            [12] 1534 	mov	r0,#_print
      00065A E6               [12] 1535 	mov	a,@r0
      00065B 30 E7 13         [24] 1536 	jnb	acc.7,00112$
      00065E 05 6C            [12] 1537 	inc	_p_tail
      000660 A9 6C            [24] 1538 	mov	r1,_p_tail
      000662 78 28            [12] 1539 	mov	r0,#_ID
      000664 E6               [12] 1540 	mov	a,@r0
      000665 F7               [12] 1541 	mov	@r1,a
      000666 78 28            [12] 1542 	mov	r0,#_ID
      000668 E6               [12] 1543 	mov	a,@r0
      000669 24 24            [12] 1544 	add	a,#_bitmap
      00066B F8               [12] 1545 	mov	r0,a
      00066C 76 FF            [12] 1546 	mov	@r0,#0xFF
      00066E 12r00r00         [24] 1547 	lcall	_ThreadYield
      000671                       1548 00112$:
      000671 D2 AF            [12] 1549 	setb	_EA
                                   1550 ;	testparking.c:296: SemaphoreWait(print,p_tail);
      000673 C2 AF            [12] 1551 	clr	_EA
      000675 78 5B            [12] 1552 	mov	r0,#_print
      000677 16               [12] 1553 	dec	@r0
      000678 78 5B            [12] 1554 	mov	r0,#_print
      00067A E6               [12] 1555 	mov	a,@r0
      00067B 30 E7 13         [24] 1556 	jnb	acc.7,00114$
      00067E 05 6C            [12] 1557 	inc	_p_tail
      000680 A9 6C            [24] 1558 	mov	r1,_p_tail
      000682 78 28            [12] 1559 	mov	r0,#_ID
      000684 E6               [12] 1560 	mov	a,@r0
      000685 F7               [12] 1561 	mov	@r1,a
      000686 78 28            [12] 1562 	mov	r0,#_ID
      000688 E6               [12] 1563 	mov	a,@r0
      000689 24 24            [12] 1564 	add	a,#_bitmap
      00068B F8               [12] 1565 	mov	r0,a
      00068C 76 FF            [12] 1566 	mov	@r0,#0xFF
      00068E 12r00r00         [24] 1567 	lcall	_ThreadYield
      000691                       1568 00114$:
      000691 D2 AF            [12] 1569 	setb	_EA
                                   1570 ;	testparking.c:297: SemaphoreWait(print,p_tail);
      000693 C2 AF            [12] 1571 	clr	_EA
      000695 78 5B            [12] 1572 	mov	r0,#_print
      000697 16               [12] 1573 	dec	@r0
      000698 78 5B            [12] 1574 	mov	r0,#_print
      00069A E6               [12] 1575 	mov	a,@r0
      00069B 30 E7 13         [24] 1576 	jnb	acc.7,00116$
      00069E 05 6C            [12] 1577 	inc	_p_tail
      0006A0 A9 6C            [24] 1578 	mov	r1,_p_tail
      0006A2 78 28            [12] 1579 	mov	r0,#_ID
      0006A4 E6               [12] 1580 	mov	a,@r0
      0006A5 F7               [12] 1581 	mov	@r1,a
      0006A6 78 28            [12] 1582 	mov	r0,#_ID
      0006A8 E6               [12] 1583 	mov	a,@r0
      0006A9 24 24            [12] 1584 	add	a,#_bitmap
      0006AB F8               [12] 1585 	mov	r0,a
      0006AC 76 FF            [12] 1586 	mov	@r0,#0xFF
      0006AE 12r00r00         [24] 1587 	lcall	_ThreadYield
      0006B1                       1588 00116$:
      0006B1 D2 AF            [12] 1589 	setb	_EA
                                   1590 ;	testparking.c:298: SemaphoreWait(print,p_tail);
      0006B3 C2 AF            [12] 1591 	clr	_EA
      0006B5 78 5B            [12] 1592 	mov	r0,#_print
      0006B7 16               [12] 1593 	dec	@r0
      0006B8 78 5B            [12] 1594 	mov	r0,#_print
      0006BA E6               [12] 1595 	mov	a,@r0
      0006BB 30 E7 13         [24] 1596 	jnb	acc.7,00118$
      0006BE 05 6C            [12] 1597 	inc	_p_tail
      0006C0 A9 6C            [24] 1598 	mov	r1,_p_tail
      0006C2 78 28            [12] 1599 	mov	r0,#_ID
      0006C4 E6               [12] 1600 	mov	a,@r0
      0006C5 F7               [12] 1601 	mov	@r1,a
      0006C6 78 28            [12] 1602 	mov	r0,#_ID
      0006C8 E6               [12] 1603 	mov	a,@r0
      0006C9 24 24            [12] 1604 	add	a,#_bitmap
      0006CB F8               [12] 1605 	mov	r0,a
      0006CC 76 FF            [12] 1606 	mov	@r0,#0xFF
      0006CE 12r00r00         [24] 1607 	lcall	_ThreadYield
      0006D1                       1608 00118$:
      0006D1 D2 AF            [12] 1609 	setb	_EA
                                   1610 ;	testparking.c:299: SemaphoreWait(print,p_tail);
      0006D3 C2 AF            [12] 1611 	clr	_EA
      0006D5 78 5B            [12] 1612 	mov	r0,#_print
      0006D7 16               [12] 1613 	dec	@r0
      0006D8 78 5B            [12] 1614 	mov	r0,#_print
      0006DA E6               [12] 1615 	mov	a,@r0
      0006DB 30 E7 13         [24] 1616 	jnb	acc.7,00120$
      0006DE 05 6C            [12] 1617 	inc	_p_tail
      0006E0 A9 6C            [24] 1618 	mov	r1,_p_tail
      0006E2 78 28            [12] 1619 	mov	r0,#_ID
      0006E4 E6               [12] 1620 	mov	a,@r0
      0006E5 F7               [12] 1621 	mov	@r1,a
      0006E6 78 28            [12] 1622 	mov	r0,#_ID
      0006E8 E6               [12] 1623 	mov	a,@r0
      0006E9 24 24            [12] 1624 	add	a,#_bitmap
      0006EB F8               [12] 1625 	mov	r0,a
      0006EC 76 FF            [12] 1626 	mov	@r0,#0xFF
      0006EE 12r00r00         [24] 1627 	lcall	_ThreadYield
      0006F1                       1628 00120$:
      0006F1 D2 AF            [12] 1629 	setb	_EA
                                   1630 ;	testparking.c:300: c_temp = 0;
      0006F3 78 29            [12] 1631 	mov	r0,#_c_temp
      0006F5 76 00            [12] 1632 	mov	@r0,#0x00
                                   1633 ;	testparking.c:301: current = 1;
      0006F7 78 4C            [12] 1634 	mov	r0,#_current
      0006F9 76 01            [12] 1635 	mov	@r0,#0x01
                                   1636 ;	testparking.c:302: while(c_temp<10){
      0006FB                       1637 00190$:
      0006FB 78 29            [12] 1638 	mov	r0,#_c_temp
      0006FD C3               [12] 1639 	clr	c
      0006FE E6               [12] 1640 	mov	a,@r0
      0006FF 64 80            [12] 1641 	xrl	a,#0x80
      000701 94 8A            [12] 1642 	subb	a,#0x8a
      000703 40 01            [24] 1643 	jc	00382$
      000705 22               [24] 1644 	ret
      000706                       1645 00382$:
                                   1646 ;	testparking.c:303: for(j=0;j<10;j++){
      000706 78 4D            [12] 1647 	mov	r0,#_j
      000708 76 00            [12] 1648 	mov	@r0,#0x00
      00070A                       1649 00194$:
      00070A 78 4D            [12] 1650 	mov	r0,#_j
      00070C C3               [12] 1651 	clr	c
      00070D E6               [12] 1652 	mov	a,@r0
      00070E 64 80            [12] 1653 	xrl	a,#0x80
      000710 94 8A            [12] 1654 	subb	a,#0x8a
      000712 40 03            [24] 1655 	jc	00383$
      000714 02r08r1F         [24] 1656 	ljmp	00189$
      000717                       1657 00383$:
                                   1658 ;	testparking.c:304: c_temp2 = log[j];
      000717 78 4D            [12] 1659 	mov	r0,#_j
      000719 E6               [12] 1660 	mov	a,@r0
      00071A 24 30            [12] 1661 	add	a,#_log
      00071C F9               [12] 1662 	mov	r1,a
      00071D 78 4A            [12] 1663 	mov	r0,#_c_temp2
      00071F E7               [12] 1664 	mov	a,@r1
      000720 F6               [12] 1665 	mov	@r0,a
                                   1666 ;	testparking.c:305: c_temp3 = c_temp2&0x7F;
      000721 78 4A            [12] 1667 	mov	r0,#_c_temp2
      000723 79 5C            [12] 1668 	mov	r1,#_c_temp3
      000725 74 7F            [12] 1669 	mov	a,#0x7F
      000727 56               [12] 1670 	anl	a,@r0
      000728 F7               [12] 1671 	mov	@r1,a
                                   1672 ;	testparking.c:306: if(c_temp3==current){
      000729 78 5C            [12] 1673 	mov	r0,#_c_temp3
      00072B 79 4C            [12] 1674 	mov	r1,#_current
      00072D 86 F0            [24] 1675 	mov	b,@r0
      00072F E7               [12] 1676 	mov	a,@r1
      000730 B5 F0 02         [24] 1677 	cjne	a,b,00384$
      000733 80 03            [24] 1678 	sjmp	00385$
      000735                       1679 00384$:
      000735 02r08r19         [24] 1680 	ljmp	00195$
      000738                       1681 00385$:
                                   1682 ;	testparking.c:307: SBUF = 'c';
      000738 75 99 63         [24] 1683 	mov	_SBUF,#0x63
                                   1684 ;	testparking.c:308: while (!TI) { }
      00073B                       1685 00121$:
                                   1686 ;	testparking.c:309: TI = 0;
      00073B 10 99 02         [24] 1687 	jbc	_TI,00386$
      00073E 80 FB            [24] 1688 	sjmp	00121$
      000740                       1689 00386$:
                                   1690 ;	testparking.c:310: SBUF = 'a';
      000740 75 99 61         [24] 1691 	mov	_SBUF,#0x61
                                   1692 ;	testparking.c:311: while (!TI) { }
      000743                       1693 00124$:
                                   1694 ;	testparking.c:312: TI = 0;
      000743 10 99 02         [24] 1695 	jbc	_TI,00387$
      000746 80 FB            [24] 1696 	sjmp	00124$
      000748                       1697 00387$:
                                   1698 ;	testparking.c:313: SBUF = 'r';
      000748 75 99 72         [24] 1699 	mov	_SBUF,#0x72
                                   1700 ;	testparking.c:314: while (!TI) { }
      00074B                       1701 00127$:
                                   1702 ;	testparking.c:315: TI = 0;
      00074B 10 99 02         [24] 1703 	jbc	_TI,00388$
      00074E 80 FB            [24] 1704 	sjmp	00127$
      000750                       1705 00388$:
                                   1706 ;	testparking.c:316: SBUF = '1' + j/2;
      000750 78 4D            [12] 1707 	mov	r0,#_j
      000752 C2 D5            [12] 1708 	clr	F0
      000754 75 F0 02         [24] 1709 	mov	b,#0x02
      000757 E6               [12] 1710 	mov	a,@r0
      000758 30 E7 04         [24] 1711 	jnb	acc.7,00389$
      00075B B2 D5            [12] 1712 	cpl	F0
      00075D F4               [12] 1713 	cpl	a
      00075E 04               [12] 1714 	inc	a
      00075F                       1715 00389$:
      00075F 84               [48] 1716 	div	ab
      000760 30 D5 02         [24] 1717 	jnb	F0,00390$
      000763 F4               [12] 1718 	cpl	a
      000764 04               [12] 1719 	inc	a
      000765                       1720 00390$:
      000765 24 31            [12] 1721 	add	a,#0x31
      000767 F5 99            [12] 1722 	mov	_SBUF,a
                                   1723 ;	testparking.c:317: while (!TI) { }
      000769                       1724 00130$:
                                   1725 ;	testparking.c:318: TI = 0;
      000769 10 99 02         [24] 1726 	jbc	_TI,00391$
      00076C 80 FB            [24] 1727 	sjmp	00130$
      00076E                       1728 00391$:
                                   1729 ;	testparking.c:319: SBUF = ' ';
      00076E 75 99 20         [24] 1730 	mov	_SBUF,#0x20
                                   1731 ;	testparking.c:320: while (!TI) { }
      000771                       1732 00133$:
                                   1733 ;	testparking.c:321: TI = 0;
      000771 10 99 02         [24] 1734 	jbc	_TI,00392$
      000774 80 FB            [24] 1735 	sjmp	00133$
      000776                       1736 00392$:
                                   1737 ;	testparking.c:322: if(j%2){
      000776 78 4D            [12] 1738 	mov	r0,#_j
      000778 E6               [12] 1739 	mov	a,@r0
      000779 A2 E7            [12] 1740 	mov	c,acc.7
      00077B 54 01            [12] 1741 	anl	a,#0x01
      00077D 60 04            [24] 1742 	jz	00393$
      00077F 50 02            [24] 1743 	jnc	00393$
      000781 44 FE            [12] 1744 	orl	a,#0xfe
      000783                       1745 00393$:
      000783 60 1A            [24] 1746 	jz	00152$
                                   1747 ;	testparking.c:323: SBUF = 'o';
      000785 75 99 6F         [24] 1748 	mov	_SBUF,#0x6F
                                   1749 ;	testparking.c:324: while (!TI) { }
      000788                       1750 00136$:
                                   1751 ;	testparking.c:325: TI = 0;
      000788 10 99 02         [24] 1752 	jbc	_TI,00395$
      00078B 80 FB            [24] 1753 	sjmp	00136$
      00078D                       1754 00395$:
                                   1755 ;	testparking.c:326: SBUF = 'u';
      00078D 75 99 75         [24] 1756 	mov	_SBUF,#0x75
                                   1757 ;	testparking.c:327: while (!TI) { }
      000790                       1758 00139$:
                                   1759 ;	testparking.c:328: TI = 0;
      000790 10 99 02         [24] 1760 	jbc	_TI,00396$
      000793 80 FB            [24] 1761 	sjmp	00139$
      000795                       1762 00396$:
                                   1763 ;	testparking.c:329: SBUF = 't';
      000795 75 99 74         [24] 1764 	mov	_SBUF,#0x74
                                   1765 ;	testparking.c:330: while (!TI) { }
      000798                       1766 00142$:
                                   1767 ;	testparking.c:331: TI = 0;
      000798 10 99 02         [24] 1768 	jbc	_TI,00397$
      00079B 80 FB            [24] 1769 	sjmp	00142$
      00079D                       1770 00397$:
      00079D 80 10            [24] 1771 	sjmp	00153$
      00079F                       1772 00152$:
                                   1773 ;	testparking.c:334: SBUF = 'i';
      00079F 75 99 69         [24] 1774 	mov	_SBUF,#0x69
                                   1775 ;	testparking.c:335: while (!TI) { }
      0007A2                       1776 00145$:
                                   1777 ;	testparking.c:336: TI = 0;
      0007A2 10 99 02         [24] 1778 	jbc	_TI,00398$
      0007A5 80 FB            [24] 1779 	sjmp	00145$
      0007A7                       1780 00398$:
                                   1781 ;	testparking.c:337: SBUF = 'n';
      0007A7 75 99 6E         [24] 1782 	mov	_SBUF,#0x6E
                                   1783 ;	testparking.c:338: while (!TI) { }
      0007AA                       1784 00148$:
                                   1785 ;	testparking.c:339: TI = 0;
      0007AA 10 99 02         [24] 1786 	jbc	_TI,00399$
      0007AD 80 FB            [24] 1787 	sjmp	00148$
      0007AF                       1788 00399$:
      0007AF                       1789 00153$:
                                   1790 ;	testparking.c:341: SBUF = ' ';
      0007AF 75 99 20         [24] 1791 	mov	_SBUF,#0x20
                                   1792 ;	testparking.c:342: while (!TI) { }
      0007B2                       1793 00154$:
                                   1794 ;	testparking.c:343: TI = 0;
      0007B2 10 99 02         [24] 1795 	jbc	_TI,00400$
      0007B5 80 FB            [24] 1796 	sjmp	00154$
      0007B7                       1797 00400$:
                                   1798 ;	testparking.c:344: SBUF = 'p';
      0007B7 75 99 70         [24] 1799 	mov	_SBUF,#0x70
                                   1800 ;	testparking.c:345: while (!TI) { }
      0007BA                       1801 00157$:
                                   1802 ;	testparking.c:346: TI = 0;
      0007BA 10 99 02         [24] 1803 	jbc	_TI,00401$
      0007BD 80 FB            [24] 1804 	sjmp	00157$
      0007BF                       1805 00401$:
                                   1806 ;	testparking.c:347: SBUF = 'l';
      0007BF 75 99 6C         [24] 1807 	mov	_SBUF,#0x6C
                                   1808 ;	testparking.c:348: while (!TI) { }
      0007C2                       1809 00160$:
                                   1810 ;	testparking.c:349: TI = 0;
      0007C2 10 99 02         [24] 1811 	jbc	_TI,00402$
      0007C5 80 FB            [24] 1812 	sjmp	00160$
      0007C7                       1813 00402$:
                                   1814 ;	testparking.c:350: SBUF = 'o';
      0007C7 75 99 6F         [24] 1815 	mov	_SBUF,#0x6F
                                   1816 ;	testparking.c:351: while (!TI) { }
      0007CA                       1817 00163$:
                                   1818 ;	testparking.c:352: TI = 0;
      0007CA 10 99 02         [24] 1819 	jbc	_TI,00403$
      0007CD 80 FB            [24] 1820 	sjmp	00163$
      0007CF                       1821 00403$:
                                   1822 ;	testparking.c:353: SBUF = 't';
      0007CF 75 99 74         [24] 1823 	mov	_SBUF,#0x74
                                   1824 ;	testparking.c:354: while (!TI) { }
      0007D2                       1825 00166$:
                                   1826 ;	testparking.c:355: TI = 0;
      0007D2 10 99 02         [24] 1827 	jbc	_TI,00404$
      0007D5 80 FB            [24] 1828 	sjmp	00166$
      0007D7                       1829 00404$:
                                   1830 ;	testparking.c:356: SBUF = '1' + c_temp2/0x80;
      0007D7 78 4A            [12] 1831 	mov	r0,#_c_temp2
      0007D9 E6               [12] 1832 	mov	a,@r0
      0007DA 23               [12] 1833 	rl	a
      0007DB 54 01            [12] 1834 	anl	a,#0x01
      0007DD FF               [12] 1835 	mov	r7,a
      0007DE 24 31            [12] 1836 	add	a,#0x31
      0007E0 F5 99            [12] 1837 	mov	_SBUF,a
                                   1838 ;	testparking.c:357: while (!TI) { }
      0007E2                       1839 00169$:
                                   1840 ;	testparking.c:358: TI = 0;
      0007E2 10 99 02         [24] 1841 	jbc	_TI,00405$
      0007E5 80 FB            [24] 1842 	sjmp	00169$
      0007E7                       1843 00405$:
                                   1844 ;	testparking.c:359: SBUF = ' ';
      0007E7 75 99 20         [24] 1845 	mov	_SBUF,#0x20
                                   1846 ;	testparking.c:360: while (!TI) { }
      0007EA                       1847 00172$:
                                   1848 ;	testparking.c:361: TI = 0;
      0007EA 10 99 02         [24] 1849 	jbc	_TI,00406$
      0007ED 80 FB            [24] 1850 	sjmp	00172$
      0007EF                       1851 00406$:
                                   1852 ;	testparking.c:362: SBUF = 'a';
      0007EF 75 99 61         [24] 1853 	mov	_SBUF,#0x61
                                   1854 ;	testparking.c:363: while (!TI) { }
      0007F2                       1855 00175$:
                                   1856 ;	testparking.c:364: TI = 0;
      0007F2 10 99 02         [24] 1857 	jbc	_TI,00407$
      0007F5 80 FB            [24] 1858 	sjmp	00175$
      0007F7                       1859 00407$:
                                   1860 ;	testparking.c:365: SBUF = 't';
      0007F7 75 99 74         [24] 1861 	mov	_SBUF,#0x74
                                   1862 ;	testparking.c:366: while (!TI) { }
      0007FA                       1863 00178$:
                                   1864 ;	testparking.c:367: TI = 0;
      0007FA 10 99 02         [24] 1865 	jbc	_TI,00408$
      0007FD 80 FB            [24] 1866 	sjmp	00178$
      0007FF                       1867 00408$:
                                   1868 ;	testparking.c:368: SBUF = '0' + (c_temp2&0x7F);
      0007FF 78 4A            [12] 1869 	mov	r0,#_c_temp2
      000801 74 7F            [12] 1870 	mov	a,#0x7F
      000803 56               [12] 1871 	anl	a,@r0
      000804 FF               [12] 1872 	mov	r7,a
      000805 24 30            [12] 1873 	add	a,#0x30
      000807 F5 99            [12] 1874 	mov	_SBUF,a
                                   1875 ;	testparking.c:369: while (!TI) { }
      000809                       1876 00181$:
                                   1877 ;	testparking.c:370: TI = 0;
      000809 10 99 02         [24] 1878 	jbc	_TI,00409$
      00080C 80 FB            [24] 1879 	sjmp	00181$
      00080E                       1880 00409$:
                                   1881 ;	testparking.c:371: SBUF = '\n';
      00080E 75 99 0A         [24] 1882 	mov	_SBUF,#0x0A
                                   1883 ;	testparking.c:372: while (!TI) { }
      000811                       1884 00184$:
                                   1885 ;	testparking.c:373: TI = 0;
      000811 10 99 02         [24] 1886 	jbc	_TI,00410$
      000814 80 FB            [24] 1887 	sjmp	00184$
      000816                       1888 00410$:
                                   1889 ;	testparking.c:374: c_temp++;
      000816 78 29            [12] 1890 	mov	r0,#_c_temp
      000818 06               [12] 1891 	inc	@r0
      000819                       1892 00195$:
                                   1893 ;	testparking.c:303: for(j=0;j<10;j++){
      000819 78 4D            [12] 1894 	mov	r0,#_j
      00081B 06               [12] 1895 	inc	@r0
      00081C 02r07r0A         [24] 1896 	ljmp	00194$
      00081F                       1897 00189$:
                                   1898 ;	testparking.c:377: current++;
      00081F 78 4C            [12] 1899 	mov	r0,#_current
      000821 06               [12] 1900 	inc	@r0
      000822 02r06rFB         [24] 1901 	ljmp	00190$
                                   1902 ;------------------------------------------------------------
                                   1903 ;Allocation info for local variables in function 'main'
                                   1904 ;------------------------------------------------------------
                                   1905 ;	testparking.c:381: void main(void) {
                                   1906 ;	-----------------------------------------
                                   1907 ;	 function main
                                   1908 ;	-----------------------------------------
      000825                       1909 _main:
                                   1910 ;	testparking.c:383: plot[0] = plot[1] = 0;
      000825 78 4F            [12] 1911 	mov	r0,#(_plot + 0x0001)
      000827 76 00            [12] 1912 	mov	@r0,#0x00
      000829 78 4E            [12] 1913 	mov	r0,#_plot
      00082B 76 00            [12] 1914 	mov	@r0,#0x00
                                   1915 ;	testparking.c:385: SemaphoreCreate(mutex, 1);
      00082D 78 3A            [12] 1916 	mov	r0,#_mutex
      00082F 76 01            [12] 1917 	mov	@r0,#0x01
                                   1918 ;	testparking.c:386: SemaphoreCreate(print, 0);
      000831 78 5B            [12] 1919 	mov	r0,#_print
      000833 76 00            [12] 1920 	mov	@r0,#0x00
                                   1921 ;	testparking.c:390: __endasm;
      000835 75 6C 5C         [24] 1922 	mov _p_tail,#0x5C
      000838 75 3C 6C         [24] 1923 	mov _m_tail,#0x6C
                                   1924 ;	testparking.c:392: ThreadCreate(Car1);
      00083B 90r00r00         [24] 1925 	mov	dptr,#_Car1
      00083E 12r00r00         [24] 1926 	lcall	_ThreadCreate
                                   1927 ;	testparking.c:393: ThreadCreate(Car2);
      000841 90r01r20         [24] 1928 	mov	dptr,#_Car2
      000844 12r00r00         [24] 1929 	lcall	_ThreadCreate
                                   1930 ;	testparking.c:394: ThreadCreate(Car3);
      000847 90r02r42         [24] 1931 	mov	dptr,#_Car3
      00084A 12r00r00         [24] 1932 	lcall	_ThreadCreate
                                   1933 ;	testparking.c:395: ThreadCreate(Car4);
      00084D 90r03r64         [24] 1934 	mov	dptr,#_Car4
      000850 12r00r00         [24] 1935 	lcall	_ThreadCreate
                                   1936 ;	testparking.c:396: ThreadCreate(Car5);
      000853 90r04r86         [24] 1937 	mov	dptr,#_Car5
      000856 12r00r00         [24] 1938 	lcall	_ThreadCreate
                                   1939 ;	testparking.c:397: ThreadCreate(Printer);
      000859 90r05rA8         [24] 1940 	mov	dptr,#_Printer
      00085C 02r00r00         [24] 1941 	ljmp	_ThreadCreate
                                   1942 ;------------------------------------------------------------
                                   1943 ;Allocation info for local variables in function '_sdcc_gsinit_startup'
                                   1944 ;------------------------------------------------------------
                                   1945 ;	testparking.c:400: void _sdcc_gsinit_startup(void) {
                                   1946 ;	-----------------------------------------
                                   1947 ;	 function _sdcc_gsinit_startup
                                   1948 ;	-----------------------------------------
      00085F                       1949 __sdcc_gsinit_startup:
                                   1950 ;	testparking.c:403: __endasm;
      00085F 02r00r00         [24] 1951 	ljmp _Bootstrap
      000862 22               [24] 1952 	ret
                                   1953 ;------------------------------------------------------------
                                   1954 ;Allocation info for local variables in function '_mcs51_genRAMCLEAR'
                                   1955 ;------------------------------------------------------------
                                   1956 ;	testparking.c:406: void _mcs51_genRAMCLEAR(void) {}
                                   1957 ;	-----------------------------------------
                                   1958 ;	 function _mcs51_genRAMCLEAR
                                   1959 ;	-----------------------------------------
      000863                       1960 __mcs51_genRAMCLEAR:
      000863 22               [24] 1961 	ret
                                   1962 ;------------------------------------------------------------
                                   1963 ;Allocation info for local variables in function '_mcs51_genXINIT'
                                   1964 ;------------------------------------------------------------
                                   1965 ;	testparking.c:407: void _mcs51_genXINIT(void) {}
                                   1966 ;	-----------------------------------------
                                   1967 ;	 function _mcs51_genXINIT
                                   1968 ;	-----------------------------------------
      000864                       1969 __mcs51_genXINIT:
      000864 22               [24] 1970 	ret
                                   1971 ;------------------------------------------------------------
                                   1972 ;Allocation info for local variables in function '_mcs51_genXRAMCLEAR'
                                   1973 ;------------------------------------------------------------
                                   1974 ;	testparking.c:408: void _mcs51_genXRAMCLEAR(void) {}
                                   1975 ;	-----------------------------------------
                                   1976 ;	 function _mcs51_genXRAMCLEAR
                                   1977 ;	-----------------------------------------
      000865                       1978 __mcs51_genXRAMCLEAR:
      000865 22               [24] 1979 	ret
                                   1980 ;------------------------------------------------------------
                                   1981 ;Allocation info for local variables in function 'timer0_ISR'
                                   1982 ;------------------------------------------------------------
                                   1983 ;	testparking.c:409: void timer0_ISR(void) __interrupt(1) {
                                   1984 ;	-----------------------------------------
                                   1985 ;	 function timer0_ISR
                                   1986 ;	-----------------------------------------
      000866                       1987 _timer0_ISR:
                                   1988 ;	testparking.c:412: __endasm;
      000866 02r00r00         [24] 1989 	ljmp _myTimer0Handler
      000869 32               [24] 1990 	reti
                                   1991 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1992 ;	eliminated unneeded push/pop psw
                                   1993 ;	eliminated unneeded push/pop dpl
                                   1994 ;	eliminated unneeded push/pop dph
                                   1995 ;	eliminated unneeded push/pop b
                                   1996 ;	eliminated unneeded push/pop acc
                                   1997 	.area CSEG    (CODE)
                                   1998 	.area CONST   (CODE)
                                   1999 	.area XINIT   (CODE)
                                   2000 	.area CABS    (ABS,CODE)
