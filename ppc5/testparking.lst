                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  3 2018) (Linux)
                                      4 ; This file was generated Tue Jan 15 02:58:35 2019
                                      5 ;--------------------------------------------------------
                                      6 	.module testparking
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _timer0_ISR
                                     13 	.globl __mcs51_genXRAMCLEAR
                                     14 	.globl __mcs51_genXINIT
                                     15 	.globl __mcs51_genRAMCLEAR
                                     16 	.globl __sdcc_gsinit_startup
                                     17 	.globl _main
                                     18 	.globl _Printer
                                     19 	.globl _Car5
                                     20 	.globl _Car4
                                     21 	.globl _Car3
                                     22 	.globl _Car2
                                     23 	.globl _Car1
                                     24 	.globl _ThreadYield
                                     25 	.globl _ThreadCreate
                                     26 	.globl _delay
                                     27 	.globl _now
                                     28 	.globl _CY
                                     29 	.globl _AC
                                     30 	.globl _F0
                                     31 	.globl _RS1
                                     32 	.globl _RS0
                                     33 	.globl _OV
                                     34 	.globl _F1
                                     35 	.globl _P
                                     36 	.globl _PS
                                     37 	.globl _PT1
                                     38 	.globl _PX1
                                     39 	.globl _PT0
                                     40 	.globl _PX0
                                     41 	.globl _RD
                                     42 	.globl _WR
                                     43 	.globl _T1
                                     44 	.globl _T0
                                     45 	.globl _INT1
                                     46 	.globl _INT0
                                     47 	.globl _TXD
                                     48 	.globl _RXD
                                     49 	.globl _P3_7
                                     50 	.globl _P3_6
                                     51 	.globl _P3_5
                                     52 	.globl _P3_4
                                     53 	.globl _P3_3
                                     54 	.globl _P3_2
                                     55 	.globl _P3_1
                                     56 	.globl _P3_0
                                     57 	.globl _EA
                                     58 	.globl _ES
                                     59 	.globl _ET1
                                     60 	.globl _EX1
                                     61 	.globl _ET0
                                     62 	.globl _EX0
                                     63 	.globl _P2_7
                                     64 	.globl _P2_6
                                     65 	.globl _P2_5
                                     66 	.globl _P2_4
                                     67 	.globl _P2_3
                                     68 	.globl _P2_2
                                     69 	.globl _P2_1
                                     70 	.globl _P2_0
                                     71 	.globl _SM0
                                     72 	.globl _SM1
                                     73 	.globl _SM2
                                     74 	.globl _REN
                                     75 	.globl _TB8
                                     76 	.globl _RB8
                                     77 	.globl _TI
                                     78 	.globl _RI
                                     79 	.globl _P1_7
                                     80 	.globl _P1_6
                                     81 	.globl _P1_5
                                     82 	.globl _P1_4
                                     83 	.globl _P1_3
                                     84 	.globl _P1_2
                                     85 	.globl _P1_1
                                     86 	.globl _P1_0
                                     87 	.globl _TF1
                                     88 	.globl _TR1
                                     89 	.globl _TF0
                                     90 	.globl _TR0
                                     91 	.globl _IE1
                                     92 	.globl _IT1
                                     93 	.globl _IE0
                                     94 	.globl _IT0
                                     95 	.globl _P0_7
                                     96 	.globl _P0_6
                                     97 	.globl _P0_5
                                     98 	.globl _P0_4
                                     99 	.globl _P0_3
                                    100 	.globl _P0_2
                                    101 	.globl _P0_1
                                    102 	.globl _P0_0
                                    103 	.globl _B
                                    104 	.globl _ACC
                                    105 	.globl _PSW
                                    106 	.globl _IP
                                    107 	.globl _P3
                                    108 	.globl _IE
                                    109 	.globl _P2
                                    110 	.globl _SBUF
                                    111 	.globl _SCON
                                    112 	.globl _P1
                                    113 	.globl _TH1
                                    114 	.globl _TH0
                                    115 	.globl _TL1
                                    116 	.globl _TL0
                                    117 	.globl _TMOD
                                    118 	.globl _TCON
                                    119 	.globl _PCON
                                    120 	.globl _DPH
                                    121 	.globl _DPL
                                    122 	.globl _SP
                                    123 	.globl _P0
                                    124 	.globl _print
                                    125 	.globl _c_temp3
                                    126 	.globl _c_temp2
                                    127 	.globl _flag
                                    128 	.globl _current
                                    129 	.globl _j
                                    130 	.globl _plot
                                    131 	.globl _thread
                                    132 	.globl _mutex
                                    133 	.globl _log
                                    134 	.globl _counter
                                    135 	.globl _time
                                    136 	.globl _D
                                    137 	.globl _i
                                    138 	.globl _temp2
                                    139 	.globl _temp1
                                    140 	.globl _c_temp
                                    141 	.globl _ID
                                    142 	.globl _bitmap
                                    143 	.globl _ssp
                                    144 	.globl _p_tail
                                    145 	.globl _th_tail
                                    146 	.globl _m_tail
                                    147 ;--------------------------------------------------------
                                    148 ; special function registers
                                    149 ;--------------------------------------------------------
                                    150 	.area RSEG    (ABS,DATA)
      000000                        151 	.org 0x0000
                           000080   152 _P0	=	0x0080
                           000081   153 _SP	=	0x0081
                           000082   154 _DPL	=	0x0082
                           000083   155 _DPH	=	0x0083
                           000087   156 _PCON	=	0x0087
                           000088   157 _TCON	=	0x0088
                           000089   158 _TMOD	=	0x0089
                           00008A   159 _TL0	=	0x008a
                           00008B   160 _TL1	=	0x008b
                           00008C   161 _TH0	=	0x008c
                           00008D   162 _TH1	=	0x008d
                           000090   163 _P1	=	0x0090
                           000098   164 _SCON	=	0x0098
                           000099   165 _SBUF	=	0x0099
                           0000A0   166 _P2	=	0x00a0
                           0000A8   167 _IE	=	0x00a8
                           0000B0   168 _P3	=	0x00b0
                           0000B8   169 _IP	=	0x00b8
                           0000D0   170 _PSW	=	0x00d0
                           0000E0   171 _ACC	=	0x00e0
                           0000F0   172 _B	=	0x00f0
                                    173 ;--------------------------------------------------------
                                    174 ; special function bits
                                    175 ;--------------------------------------------------------
                                    176 	.area RSEG    (ABS,DATA)
      000000                        177 	.org 0x0000
                           000080   178 _P0_0	=	0x0080
                           000081   179 _P0_1	=	0x0081
                           000082   180 _P0_2	=	0x0082
                           000083   181 _P0_3	=	0x0083
                           000084   182 _P0_4	=	0x0084
                           000085   183 _P0_5	=	0x0085
                           000086   184 _P0_6	=	0x0086
                           000087   185 _P0_7	=	0x0087
                           000088   186 _IT0	=	0x0088
                           000089   187 _IE0	=	0x0089
                           00008A   188 _IT1	=	0x008a
                           00008B   189 _IE1	=	0x008b
                           00008C   190 _TR0	=	0x008c
                           00008D   191 _TF0	=	0x008d
                           00008E   192 _TR1	=	0x008e
                           00008F   193 _TF1	=	0x008f
                           000090   194 _P1_0	=	0x0090
                           000091   195 _P1_1	=	0x0091
                           000092   196 _P1_2	=	0x0092
                           000093   197 _P1_3	=	0x0093
                           000094   198 _P1_4	=	0x0094
                           000095   199 _P1_5	=	0x0095
                           000096   200 _P1_6	=	0x0096
                           000097   201 _P1_7	=	0x0097
                           000098   202 _RI	=	0x0098
                           000099   203 _TI	=	0x0099
                           00009A   204 _RB8	=	0x009a
                           00009B   205 _TB8	=	0x009b
                           00009C   206 _REN	=	0x009c
                           00009D   207 _SM2	=	0x009d
                           00009E   208 _SM1	=	0x009e
                           00009F   209 _SM0	=	0x009f
                           0000A0   210 _P2_0	=	0x00a0
                           0000A1   211 _P2_1	=	0x00a1
                           0000A2   212 _P2_2	=	0x00a2
                           0000A3   213 _P2_3	=	0x00a3
                           0000A4   214 _P2_4	=	0x00a4
                           0000A5   215 _P2_5	=	0x00a5
                           0000A6   216 _P2_6	=	0x00a6
                           0000A7   217 _P2_7	=	0x00a7
                           0000A8   218 _EX0	=	0x00a8
                           0000A9   219 _ET0	=	0x00a9
                           0000AA   220 _EX1	=	0x00aa
                           0000AB   221 _ET1	=	0x00ab
                           0000AC   222 _ES	=	0x00ac
                           0000AF   223 _EA	=	0x00af
                           0000B0   224 _P3_0	=	0x00b0
                           0000B1   225 _P3_1	=	0x00b1
                           0000B2   226 _P3_2	=	0x00b2
                           0000B3   227 _P3_3	=	0x00b3
                           0000B4   228 _P3_4	=	0x00b4
                           0000B5   229 _P3_5	=	0x00b5
                           0000B6   230 _P3_6	=	0x00b6
                           0000B7   231 _P3_7	=	0x00b7
                           0000B0   232 _RXD	=	0x00b0
                           0000B1   233 _TXD	=	0x00b1
                           0000B2   234 _INT0	=	0x00b2
                           0000B3   235 _INT1	=	0x00b3
                           0000B4   236 _T0	=	0x00b4
                           0000B5   237 _T1	=	0x00b5
                           0000B6   238 _WR	=	0x00b6
                           0000B7   239 _RD	=	0x00b7
                           0000B8   240 _PX0	=	0x00b8
                           0000B9   241 _PT0	=	0x00b9
                           0000BA   242 _PX1	=	0x00ba
                           0000BB   243 _PT1	=	0x00bb
                           0000BC   244 _PS	=	0x00bc
                           0000D0   245 _P	=	0x00d0
                           0000D1   246 _F1	=	0x00d1
                           0000D2   247 _OV	=	0x00d2
                           0000D3   248 _RS0	=	0x00d3
                           0000D4   249 _RS1	=	0x00d4
                           0000D5   250 _F0	=	0x00d5
                           0000D6   251 _AC	=	0x00d6
                           0000D7   252 _CY	=	0x00d7
                                    253 ;--------------------------------------------------------
                                    254 ; overlayable register banks
                                    255 ;--------------------------------------------------------
                                    256 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        257 	.ds 8
                                    258 ;--------------------------------------------------------
                                    259 ; internal ram data
                                    260 ;--------------------------------------------------------
                                    261 	.area DSEG    (DATA)
                           00003C   262 _m_tail	=	0x003c
                           00003D   263 _th_tail	=	0x003d
                           00006C   264 _p_tail	=	0x006c
                                    265 ;--------------------------------------------------------
                                    266 ; overlayable items in internal ram 
                                    267 ;--------------------------------------------------------
                                    268 ;--------------------------------------------------------
                                    269 ; Stack segment in internal ram 
                                    270 ;--------------------------------------------------------
                                    271 	.area	SSEG
      000000                        272 __start__stack:
      000000                        273 	.ds	1
                                    274 
                                    275 ;--------------------------------------------------------
                                    276 ; indirectly addressable internal ram data
                                    277 ;--------------------------------------------------------
                                    278 	.area ISEG    (DATA)
                           000020   279 _ssp	=	0x0020
                           000024   280 _bitmap	=	0x0024
                           000028   281 _ID	=	0x0028
                           000029   282 _c_temp	=	0x0029
                           00002A   283 _temp1	=	0x002a
                           00002B   284 _temp2	=	0x002b
                           00002C   285 _i	=	0x002c
                           00002C   286 _D	=	0x002c
                           00003F   287 _time	=	0x003f
                           00003E   288 _counter	=	0x003e
                           000030   289 _log	=	0x0030
                           00003A   290 _mutex	=	0x003a
                           00003B   291 _thread	=	0x003b
                           00004E   292 _plot	=	0x004e
                           00004D   293 _j	=	0x004d
                           00004C   294 _current	=	0x004c
                           00004B   295 _flag	=	0x004b
                           00004A   296 _c_temp2	=	0x004a
                           00005C   297 _c_temp3	=	0x005c
                           00005B   298 _print	=	0x005b
                                    299 ;--------------------------------------------------------
                                    300 ; absolute internal ram data
                                    301 ;--------------------------------------------------------
                                    302 	.area IABS    (ABS,DATA)
                                    303 	.area IABS    (ABS,DATA)
                                    304 ;--------------------------------------------------------
                                    305 ; bit data
                                    306 ;--------------------------------------------------------
                                    307 	.area BSEG    (BIT)
                                    308 ;--------------------------------------------------------
                                    309 ; paged external ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area PSEG    (PAG,XDATA)
                                    312 ;--------------------------------------------------------
                                    313 ; external ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area XSEG    (XDATA)
                                    316 ;--------------------------------------------------------
                                    317 ; absolute external ram data
                                    318 ;--------------------------------------------------------
                                    319 	.area XABS    (ABS,XDATA)
                                    320 ;--------------------------------------------------------
                                    321 ; external initialized ram data
                                    322 ;--------------------------------------------------------
                                    323 	.area XISEG   (XDATA)
                                    324 	.area HOME    (CODE)
                                    325 	.area GSINIT0 (CODE)
                                    326 	.area GSINIT1 (CODE)
                                    327 	.area GSINIT2 (CODE)
                                    328 	.area GSINIT3 (CODE)
                                    329 	.area GSINIT4 (CODE)
                                    330 	.area GSINIT5 (CODE)
                                    331 	.area GSINIT  (CODE)
                                    332 	.area GSFINAL (CODE)
                                    333 	.area CSEG    (CODE)
                                    334 ;--------------------------------------------------------
                                    335 ; interrupt vector 
                                    336 ;--------------------------------------------------------
                                    337 	.area HOME    (CODE)
      000000                        338 __interrupt_vect:
      000000 02r08r5F         [24]  339 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  340 	reti
      000004                        341 	.ds	7
      00000B 02r08r66         [24]  342 	ljmp	_timer0_ISR
                                    343 ;--------------------------------------------------------
                                    344 ; global & static initialisations
                                    345 ;--------------------------------------------------------
                                    346 	.area HOME    (CODE)
                                    347 	.area GSINIT  (CODE)
                                    348 	.area GSFINAL (CODE)
                                    349 	.area GSINIT  (CODE)
                                    350 	.globl __sdcc_gsinit_startup
                                    351 	.globl __sdcc_program_startup
                                    352 	.globl __start__stack
                                    353 	.globl __mcs51_genXINIT
                                    354 	.globl __mcs51_genXRAMCLEAR
                                    355 	.globl __mcs51_genRAMCLEAR
                                    356 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  357 	ljmp	__sdcc_program_startup
                                    358 ;--------------------------------------------------------
                                    359 ; Home
                                    360 ;--------------------------------------------------------
                                    361 	.area HOME    (CODE)
                                    362 	.area HOME    (CODE)
      00000E                        363 __sdcc_program_startup:
      00000E 02r08r25         [24]  364 	ljmp	_main
                                    365 ;	return from main will return to caller
                                    366 ;--------------------------------------------------------
                                    367 ; code
                                    368 ;--------------------------------------------------------
                                    369 	.area CSEG    (CODE)
                                    370 ;------------------------------------------------------------
                                    371 ;Allocation info for local variables in function 'Car1'
                                    372 ;------------------------------------------------------------
                                    373 ;	testparking.c:4: void Car1(void) {
                                    374 ;	-----------------------------------------
                                    375 ;	 function Car1
                                    376 ;	-----------------------------------------
      000000                        377 _Car1:
                           000007   378 	ar7 = 0x07
                           000006   379 	ar6 = 0x06
                           000005   380 	ar5 = 0x05
                           000004   381 	ar4 = 0x04
                           000003   382 	ar3 = 0x03
                           000002   383 	ar2 = 0x02
                           000001   384 	ar1 = 0x01
                           000000   385 	ar0 = 0x00
                                    386 ;	testparking.c:5: log[0] = now();
      000000 12r00r00         [24]  387 	lcall	_now
      000003 E5 82            [12]  388 	mov	a,dpl
      000005 78 30            [12]  389 	mov	r0,#_log
      000007 F6               [12]  390 	mov	@r0,a
                                    391 ;	testparking.c:6: SemaphoreWait(mutex,m_tail);
      000008 C2 AF            [12]  392 	clr	_EA
      00000A 78 3A            [12]  393 	mov	r0,#_mutex
      00000C 16               [12]  394 	dec	@r0
      00000D 78 3A            [12]  395 	mov	r0,#_mutex
      00000F E6               [12]  396 	mov	a,@r0
      000010 30 E7 13         [24]  397 	jnb	acc.7,00102$
      000013 05 3C            [12]  398 	inc	_m_tail
      000015 A9 3C            [24]  399 	mov	r1,_m_tail
      000017 78 28            [12]  400 	mov	r0,#_ID
      000019 E6               [12]  401 	mov	a,@r0
      00001A F7               [12]  402 	mov	@r1,a
      00001B 78 28            [12]  403 	mov	r0,#_ID
      00001D E6               [12]  404 	mov	a,@r0
      00001E 24 24            [12]  405 	add	a,#_bitmap
      000020 F8               [12]  406 	mov	r0,a
      000021 76 FF            [12]  407 	mov	@r0,#0xFF
      000023 12r00r00         [24]  408 	lcall	_ThreadYield
      000026                        409 00102$:
      000026 D2 AF            [12]  410 	setb	_EA
                                    411 ;	testparking.c:7: if(!plot[0]) {
      000028 78 4E            [12]  412 	mov	r0,#_plot
      00002A E6               [12]  413 	mov	a,@r0
      00002B 70 0E            [24]  414 	jnz	00104$
                                    415 ;	testparking.c:8: plot[0] = 1;
      00002D 78 4E            [12]  416 	mov	r0,#_plot
      00002F 76 01            [12]  417 	mov	@r0,#0x01
                                    418 ;	testparking.c:16: __endasm;
      000031 78 30            [12]  419 	mov r0,#(_log + 0x0000)
      000033 E6               [12]  420 	mov a,@r0
      000034 FF               [12]  421 	mov r7,a
      000035 74 7F            [12]  422 	mov a,#0x7F
      000037 5F               [12]  423 	anl a,r7
      000038 F6               [12]  424 	mov @r0,a
      000039 80 0C            [24]  425 	sjmp	00105$
      00003B                        426 00104$:
                                    427 ;	testparking.c:19: plot[1] = 1;
      00003B 78 4F            [12]  428 	mov	r0,#(_plot + 0x0001)
      00003D 76 01            [12]  429 	mov	@r0,#0x01
                                    430 ;	testparking.c:27: __endasm;
      00003F 78 30            [12]  431 	mov r0,#(_log + 0x0000)
      000041 E6               [12]  432 	mov a,@r0
      000042 FF               [12]  433 	mov r7,a
      000043 74 80            [12]  434 	mov a,#0x80
      000045 4F               [12]  435 	orl a,r7
      000046 F6               [12]  436 	mov @r0,a
      000047                        437 00105$:
                                    438 ;	testparking.c:29: SemaphoreSignal(mutex,m_tail);
      000047 C2 AF            [12]  439 	clr	_EA
      000049 78 3A            [12]  440 	mov	r0,#_mutex
      00004B 06               [12]  441 	inc	@r0
      00004C 78 3A            [12]  442 	mov	r0,#_mutex
      00004E C3               [12]  443 	clr	c
      00004F 74 80            [12]  444 	mov	a,#(0x00 ^ 0x80)
      000051 86 F0            [24]  445 	mov	b,@r0
      000053 63 F0 80         [24]  446 	xrl	b,#0x80
      000056 95 F0            [12]  447 	subb	a,b
      000058 40 0B            [24]  448 	jc	00107$
      00005A A9 3C            [24]  449 	mov	r1,_m_tail
      00005C E7               [12]  450 	mov	a,@r1
      00005D FF               [12]  451 	mov	r7,a
      00005E 24 24            [12]  452 	add	a,#_bitmap
      000060 F8               [12]  453 	mov	r0,a
      000061 76 01            [12]  454 	mov	@r0,#0x01
      000063 15 3C            [12]  455 	dec	_m_tail
      000065                        456 00107$:
      000065 D2 AF            [12]  457 	setb	_EA
                                    458 ;	testparking.c:30: SemaphoreSignal(print,p_tail);
      000067 C2 AF            [12]  459 	clr	_EA
      000069 78 5B            [12]  460 	mov	r0,#_print
      00006B 06               [12]  461 	inc	@r0
      00006C 78 5B            [12]  462 	mov	r0,#_print
      00006E C3               [12]  463 	clr	c
      00006F 74 80            [12]  464 	mov	a,#(0x00 ^ 0x80)
      000071 86 F0            [24]  465 	mov	b,@r0
      000073 63 F0 80         [24]  466 	xrl	b,#0x80
      000076 95 F0            [12]  467 	subb	a,b
      000078 40 0B            [24]  468 	jc	00109$
      00007A A9 6C            [24]  469 	mov	r1,_p_tail
      00007C E7               [12]  470 	mov	a,@r1
      00007D FF               [12]  471 	mov	r7,a
      00007E 24 24            [12]  472 	add	a,#_bitmap
      000080 F8               [12]  473 	mov	r0,a
      000081 76 01            [12]  474 	mov	@r0,#0x01
      000083 15 6C            [12]  475 	dec	_p_tail
      000085                        476 00109$:
      000085 D2 AF            [12]  477 	setb	_EA
                                    478 ;	testparking.c:31: delay(1);
      000087 75 82 01         [24]  479 	mov	dpl,#0x01
      00008A 12r00r00         [24]  480 	lcall	_delay
                                    481 ;	testparking.c:32: log[1] = now();
      00008D 12r00r00         [24]  482 	lcall	_now
      000090 E5 82            [12]  483 	mov	a,dpl
      000092 78 31            [12]  484 	mov	r0,#(_log + 0x0001)
      000094 F6               [12]  485 	mov	@r0,a
                                    486 ;	testparking.c:33: SemaphoreWait(mutex,m_tail);
      000095 C2 AF            [12]  487 	clr	_EA
      000097 78 3A            [12]  488 	mov	r0,#_mutex
      000099 16               [12]  489 	dec	@r0
      00009A 78 3A            [12]  490 	mov	r0,#_mutex
      00009C E6               [12]  491 	mov	a,@r0
      00009D 30 E7 13         [24]  492 	jnb	acc.7,00111$
      0000A0 05 3C            [12]  493 	inc	_m_tail
      0000A2 A9 3C            [24]  494 	mov	r1,_m_tail
      0000A4 78 28            [12]  495 	mov	r0,#_ID
      0000A6 E6               [12]  496 	mov	a,@r0
      0000A7 F7               [12]  497 	mov	@r1,a
      0000A8 78 28            [12]  498 	mov	r0,#_ID
      0000AA E6               [12]  499 	mov	a,@r0
      0000AB 24 24            [12]  500 	add	a,#_bitmap
      0000AD F8               [12]  501 	mov	r0,a
      0000AE 76 FF            [12]  502 	mov	@r0,#0xFF
      0000B0 12r00r00         [24]  503 	lcall	_ThreadYield
      0000B3                        504 00111$:
      0000B3 D2 AF            [12]  505 	setb	_EA
                                    506 ;	testparking.c:34: if(!(plot[0]-1)) {
      0000B5 78 4E            [12]  507 	mov	r0,#_plot
      0000B7 E6               [12]  508 	mov	a,@r0
      0000B8 FF               [12]  509 	mov	r7,a
      0000B9 33               [12]  510 	rlc	a
      0000BA 95 E0            [12]  511 	subb	a,acc
      0000BC FE               [12]  512 	mov	r6,a
      0000BD 1F               [12]  513 	dec	r7
      0000BE BF FF 01         [24]  514 	cjne	r7,#0xFF,00150$
      0000C1 1E               [12]  515 	dec	r6
      0000C2                        516 00150$:
      0000C2 EF               [12]  517 	mov	a,r7
      0000C3 4E               [12]  518 	orl	a,r6
                                    519 ;	testparking.c:35: plot[0] = 0;
      0000C4 70 0D            [24]  520 	jnz	00113$
      0000C6 78 4E            [12]  521 	mov	r0,#_plot
      0000C8 F6               [12]  522 	mov	@r0,a
                                    523 ;	testparking.c:43: __endasm;
      0000C9 78 31            [12]  524 	mov r0,#(_log + 0x0001)
      0000CB E6               [12]  525 	mov a,@r0
      0000CC FF               [12]  526 	mov r7,a
      0000CD 74 7F            [12]  527 	mov a,#0x7F
      0000CF 5F               [12]  528 	anl a,r7
      0000D0 F6               [12]  529 	mov @r0,a
      0000D1 80 0C            [24]  530 	sjmp	00114$
      0000D3                        531 00113$:
                                    532 ;	testparking.c:46: plot[1] = 0;
      0000D3 78 4F            [12]  533 	mov	r0,#(_plot + 0x0001)
      0000D5 76 00            [12]  534 	mov	@r0,#0x00
                                    535 ;	testparking.c:54: __endasm;
      0000D7 78 31            [12]  536 	mov r0,#(_log + 0x0001)
      0000D9 E6               [12]  537 	mov a,@r0
      0000DA FF               [12]  538 	mov r7,a
      0000DB 74 80            [12]  539 	mov a,#0x80
      0000DD 4F               [12]  540 	orl a,r7
      0000DE F6               [12]  541 	mov @r0,a
      0000DF                        542 00114$:
                                    543 ;	testparking.c:56: SemaphoreSignal(mutex,m_tail);
      0000DF C2 AF            [12]  544 	clr	_EA
      0000E1 78 3A            [12]  545 	mov	r0,#_mutex
      0000E3 06               [12]  546 	inc	@r0
      0000E4 78 3A            [12]  547 	mov	r0,#_mutex
      0000E6 C3               [12]  548 	clr	c
      0000E7 74 80            [12]  549 	mov	a,#(0x00 ^ 0x80)
      0000E9 86 F0            [24]  550 	mov	b,@r0
      0000EB 63 F0 80         [24]  551 	xrl	b,#0x80
      0000EE 95 F0            [12]  552 	subb	a,b
      0000F0 40 0B            [24]  553 	jc	00116$
      0000F2 A9 3C            [24]  554 	mov	r1,_m_tail
      0000F4 E7               [12]  555 	mov	a,@r1
      0000F5 FF               [12]  556 	mov	r7,a
      0000F6 24 24            [12]  557 	add	a,#_bitmap
      0000F8 F8               [12]  558 	mov	r0,a
      0000F9 76 01            [12]  559 	mov	@r0,#0x01
      0000FB 15 3C            [12]  560 	dec	_m_tail
      0000FD                        561 00116$:
      0000FD D2 AF            [12]  562 	setb	_EA
                                    563 ;	testparking.c:57: SemaphoreSignal(print,p_tail);
      0000FF C2 AF            [12]  564 	clr	_EA
      000101 78 5B            [12]  565 	mov	r0,#_print
      000103 06               [12]  566 	inc	@r0
      000104 78 5B            [12]  567 	mov	r0,#_print
      000106 C3               [12]  568 	clr	c
      000107 74 80            [12]  569 	mov	a,#(0x00 ^ 0x80)
      000109 86 F0            [24]  570 	mov	b,@r0
      00010B 63 F0 80         [24]  571 	xrl	b,#0x80
      00010E 95 F0            [12]  572 	subb	a,b
      000110 40 0B            [24]  573 	jc	00118$
      000112 A9 6C            [24]  574 	mov	r1,_p_tail
      000114 E7               [12]  575 	mov	a,@r1
      000115 FF               [12]  576 	mov	r7,a
      000116 24 24            [12]  577 	add	a,#_bitmap
      000118 F8               [12]  578 	mov	r0,a
      000119 76 01            [12]  579 	mov	@r0,#0x01
      00011B 15 6C            [12]  580 	dec	_p_tail
      00011D                        581 00118$:
      00011D D2 AF            [12]  582 	setb	_EA
      00011F 22               [24]  583 	ret
                                    584 ;------------------------------------------------------------
                                    585 ;Allocation info for local variables in function 'Car2'
                                    586 ;------------------------------------------------------------
                                    587 ;	testparking.c:60: void Car2(void) {
                                    588 ;	-----------------------------------------
                                    589 ;	 function Car2
                                    590 ;	-----------------------------------------
      000120                        591 _Car2:
                                    592 ;	testparking.c:61: log[2] = now();
      000120 12r00r00         [24]  593 	lcall	_now
      000123 E5 82            [12]  594 	mov	a,dpl
      000125 78 32            [12]  595 	mov	r0,#(_log + 0x0002)
      000127 F6               [12]  596 	mov	@r0,a
                                    597 ;	testparking.c:62: SemaphoreWait(mutex,m_tail);
      000128 C2 AF            [12]  598 	clr	_EA
      00012A 78 3A            [12]  599 	mov	r0,#_mutex
      00012C 16               [12]  600 	dec	@r0
      00012D 78 3A            [12]  601 	mov	r0,#_mutex
      00012F E6               [12]  602 	mov	a,@r0
      000130 30 E7 13         [24]  603 	jnb	acc.7,00102$
      000133 05 3C            [12]  604 	inc	_m_tail
      000135 A9 3C            [24]  605 	mov	r1,_m_tail
      000137 78 28            [12]  606 	mov	r0,#_ID
      000139 E6               [12]  607 	mov	a,@r0
      00013A F7               [12]  608 	mov	@r1,a
      00013B 78 28            [12]  609 	mov	r0,#_ID
      00013D E6               [12]  610 	mov	a,@r0
      00013E 24 24            [12]  611 	add	a,#_bitmap
      000140 F8               [12]  612 	mov	r0,a
      000141 76 FF            [12]  613 	mov	@r0,#0xFF
      000143 12r00r00         [24]  614 	lcall	_ThreadYield
      000146                        615 00102$:
      000146 D2 AF            [12]  616 	setb	_EA
                                    617 ;	testparking.c:63: if(!plot[0]) {
      000148 78 4E            [12]  618 	mov	r0,#_plot
      00014A E6               [12]  619 	mov	a,@r0
      00014B 70 0E            [24]  620 	jnz	00104$
                                    621 ;	testparking.c:64: plot[0] = 2;
      00014D 78 4E            [12]  622 	mov	r0,#_plot
      00014F 76 02            [12]  623 	mov	@r0,#0x02
                                    624 ;	testparking.c:72: __endasm;
      000151 78 32            [12]  625 	mov r0,#(_log + 0x0002)
      000153 E6               [12]  626 	mov a,@r0
      000154 FF               [12]  627 	mov r7,a
      000155 74 7F            [12]  628 	mov a,#0x7F
      000157 5F               [12]  629 	anl a,r7
      000158 F6               [12]  630 	mov @r0,a
      000159 80 0C            [24]  631 	sjmp	00105$
      00015B                        632 00104$:
                                    633 ;	testparking.c:75: plot[1] = 2;
      00015B 78 4F            [12]  634 	mov	r0,#(_plot + 0x0001)
      00015D 76 02            [12]  635 	mov	@r0,#0x02
                                    636 ;	testparking.c:83: __endasm;
      00015F 78 32            [12]  637 	mov r0,#(_log + 0x0002)
      000161 E6               [12]  638 	mov a,@r0
      000162 FF               [12]  639 	mov r7,a
      000163 74 80            [12]  640 	mov a,#0x80
      000165 4F               [12]  641 	orl a,r7
      000166 F6               [12]  642 	mov @r0,a
      000167                        643 00105$:
                                    644 ;	testparking.c:85: SemaphoreSignal(mutex,m_tail);
      000167 C2 AF            [12]  645 	clr	_EA
      000169 78 3A            [12]  646 	mov	r0,#_mutex
      00016B 06               [12]  647 	inc	@r0
      00016C 78 3A            [12]  648 	mov	r0,#_mutex
      00016E C3               [12]  649 	clr	c
      00016F 74 80            [12]  650 	mov	a,#(0x00 ^ 0x80)
      000171 86 F0            [24]  651 	mov	b,@r0
      000173 63 F0 80         [24]  652 	xrl	b,#0x80
      000176 95 F0            [12]  653 	subb	a,b
      000178 40 0B            [24]  654 	jc	00107$
      00017A A9 3C            [24]  655 	mov	r1,_m_tail
      00017C E7               [12]  656 	mov	a,@r1
      00017D FF               [12]  657 	mov	r7,a
      00017E 24 24            [12]  658 	add	a,#_bitmap
      000180 F8               [12]  659 	mov	r0,a
      000181 76 01            [12]  660 	mov	@r0,#0x01
      000183 15 3C            [12]  661 	dec	_m_tail
      000185                        662 00107$:
      000185 D2 AF            [12]  663 	setb	_EA
                                    664 ;	testparking.c:86: SemaphoreSignal(print,p_tail);
      000187 C2 AF            [12]  665 	clr	_EA
      000189 78 5B            [12]  666 	mov	r0,#_print
      00018B 06               [12]  667 	inc	@r0
      00018C 78 5B            [12]  668 	mov	r0,#_print
      00018E C3               [12]  669 	clr	c
      00018F 74 80            [12]  670 	mov	a,#(0x00 ^ 0x80)
      000191 86 F0            [24]  671 	mov	b,@r0
      000193 63 F0 80         [24]  672 	xrl	b,#0x80
      000196 95 F0            [12]  673 	subb	a,b
      000198 40 0B            [24]  674 	jc	00109$
      00019A A9 6C            [24]  675 	mov	r1,_p_tail
      00019C E7               [12]  676 	mov	a,@r1
      00019D FF               [12]  677 	mov	r7,a
      00019E 24 24            [12]  678 	add	a,#_bitmap
      0001A0 F8               [12]  679 	mov	r0,a
      0001A1 76 01            [12]  680 	mov	@r0,#0x01
      0001A3 15 6C            [12]  681 	dec	_p_tail
      0001A5                        682 00109$:
      0001A5 D2 AF            [12]  683 	setb	_EA
                                    684 ;	testparking.c:87: delay(2);
      0001A7 75 82 02         [24]  685 	mov	dpl,#0x02
      0001AA 12r00r00         [24]  686 	lcall	_delay
                                    687 ;	testparking.c:88: log[3] = now();
      0001AD 12r00r00         [24]  688 	lcall	_now
      0001B0 E5 82            [12]  689 	mov	a,dpl
      0001B2 78 33            [12]  690 	mov	r0,#(_log + 0x0003)
      0001B4 F6               [12]  691 	mov	@r0,a
                                    692 ;	testparking.c:89: SemaphoreWait(mutex,m_tail);
      0001B5 C2 AF            [12]  693 	clr	_EA
      0001B7 78 3A            [12]  694 	mov	r0,#_mutex
      0001B9 16               [12]  695 	dec	@r0
      0001BA 78 3A            [12]  696 	mov	r0,#_mutex
      0001BC E6               [12]  697 	mov	a,@r0
      0001BD 30 E7 13         [24]  698 	jnb	acc.7,00111$
      0001C0 05 3C            [12]  699 	inc	_m_tail
      0001C2 A9 3C            [24]  700 	mov	r1,_m_tail
      0001C4 78 28            [12]  701 	mov	r0,#_ID
      0001C6 E6               [12]  702 	mov	a,@r0
      0001C7 F7               [12]  703 	mov	@r1,a
      0001C8 78 28            [12]  704 	mov	r0,#_ID
      0001CA E6               [12]  705 	mov	a,@r0
      0001CB 24 24            [12]  706 	add	a,#_bitmap
      0001CD F8               [12]  707 	mov	r0,a
      0001CE 76 FF            [12]  708 	mov	@r0,#0xFF
      0001D0 12r00r00         [24]  709 	lcall	_ThreadYield
      0001D3                        710 00111$:
      0001D3 D2 AF            [12]  711 	setb	_EA
                                    712 ;	testparking.c:90: if(!(plot[0]-2)) {
      0001D5 78 4E            [12]  713 	mov	r0,#_plot
      0001D7 E6               [12]  714 	mov	a,@r0
      0001D8 FF               [12]  715 	mov	r7,a
      0001D9 33               [12]  716 	rlc	a
      0001DA 95 E0            [12]  717 	subb	a,acc
      0001DC FE               [12]  718 	mov	r6,a
      0001DD EF               [12]  719 	mov	a,r7
      0001DE 24 FE            [12]  720 	add	a,#0xFE
      0001E0 FF               [12]  721 	mov	r7,a
      0001E1 EE               [12]  722 	mov	a,r6
      0001E2 34 FF            [12]  723 	addc	a,#0xFF
      0001E4 FE               [12]  724 	mov	r6,a
      0001E5 4F               [12]  725 	orl	a,r7
                                    726 ;	testparking.c:91: plot[0] = 0;
      0001E6 70 0D            [24]  727 	jnz	00113$
      0001E8 78 4E            [12]  728 	mov	r0,#_plot
      0001EA F6               [12]  729 	mov	@r0,a
                                    730 ;	testparking.c:99: __endasm;
      0001EB 78 33            [12]  731 	mov r0,#(_log + 0x0003)
      0001ED E6               [12]  732 	mov a,@r0
      0001EE FF               [12]  733 	mov r7,a
      0001EF 74 7F            [12]  734 	mov a,#0x7F
      0001F1 5F               [12]  735 	anl a,r7
      0001F2 F6               [12]  736 	mov @r0,a
      0001F3 80 0C            [24]  737 	sjmp	00114$
      0001F5                        738 00113$:
                                    739 ;	testparking.c:102: plot[1] = 0;
      0001F5 78 4F            [12]  740 	mov	r0,#(_plot + 0x0001)
      0001F7 76 00            [12]  741 	mov	@r0,#0x00
                                    742 ;	testparking.c:110: __endasm;
      0001F9 78 33            [12]  743 	mov r0,#(_log + 0x0003)
      0001FB E6               [12]  744 	mov a,@r0
      0001FC FF               [12]  745 	mov r7,a
      0001FD 74 80            [12]  746 	mov a,#0x80
      0001FF 4F               [12]  747 	orl a,r7
      000200 F6               [12]  748 	mov @r0,a
      000201                        749 00114$:
                                    750 ;	testparking.c:112: SemaphoreSignal(mutex,m_tail);
      000201 C2 AF            [12]  751 	clr	_EA
      000203 78 3A            [12]  752 	mov	r0,#_mutex
      000205 06               [12]  753 	inc	@r0
      000206 78 3A            [12]  754 	mov	r0,#_mutex
      000208 C3               [12]  755 	clr	c
      000209 74 80            [12]  756 	mov	a,#(0x00 ^ 0x80)
      00020B 86 F0            [24]  757 	mov	b,@r0
      00020D 63 F0 80         [24]  758 	xrl	b,#0x80
      000210 95 F0            [12]  759 	subb	a,b
      000212 40 0B            [24]  760 	jc	00116$
      000214 A9 3C            [24]  761 	mov	r1,_m_tail
      000216 E7               [12]  762 	mov	a,@r1
      000217 FF               [12]  763 	mov	r7,a
      000218 24 24            [12]  764 	add	a,#_bitmap
      00021A F8               [12]  765 	mov	r0,a
      00021B 76 01            [12]  766 	mov	@r0,#0x01
      00021D 15 3C            [12]  767 	dec	_m_tail
      00021F                        768 00116$:
      00021F D2 AF            [12]  769 	setb	_EA
                                    770 ;	testparking.c:113: SemaphoreSignal(print,p_tail);
      000221 C2 AF            [12]  771 	clr	_EA
      000223 78 5B            [12]  772 	mov	r0,#_print
      000225 06               [12]  773 	inc	@r0
      000226 78 5B            [12]  774 	mov	r0,#_print
      000228 C3               [12]  775 	clr	c
      000229 74 80            [12]  776 	mov	a,#(0x00 ^ 0x80)
      00022B 86 F0            [24]  777 	mov	b,@r0
      00022D 63 F0 80         [24]  778 	xrl	b,#0x80
      000230 95 F0            [12]  779 	subb	a,b
      000232 40 0B            [24]  780 	jc	00118$
      000234 A9 6C            [24]  781 	mov	r1,_p_tail
      000236 E7               [12]  782 	mov	a,@r1
      000237 FF               [12]  783 	mov	r7,a
      000238 24 24            [12]  784 	add	a,#_bitmap
      00023A F8               [12]  785 	mov	r0,a
      00023B 76 01            [12]  786 	mov	@r0,#0x01
      00023D 15 6C            [12]  787 	dec	_p_tail
      00023F                        788 00118$:
      00023F D2 AF            [12]  789 	setb	_EA
      000241 22               [24]  790 	ret
                                    791 ;------------------------------------------------------------
                                    792 ;Allocation info for local variables in function 'Car3'
                                    793 ;------------------------------------------------------------
                                    794 ;	testparking.c:116: void Car3(void) {
                                    795 ;	-----------------------------------------
                                    796 ;	 function Car3
                                    797 ;	-----------------------------------------
      000242                        798 _Car3:
                                    799 ;	testparking.c:117: log[4] = now();
      000242 12r00r00         [24]  800 	lcall	_now
      000245 E5 82            [12]  801 	mov	a,dpl
      000247 78 34            [12]  802 	mov	r0,#(_log + 0x0004)
      000249 F6               [12]  803 	mov	@r0,a
                                    804 ;	testparking.c:118: SemaphoreWait(mutex,m_tail);
      00024A C2 AF            [12]  805 	clr	_EA
      00024C 78 3A            [12]  806 	mov	r0,#_mutex
      00024E 16               [12]  807 	dec	@r0
      00024F 78 3A            [12]  808 	mov	r0,#_mutex
      000251 E6               [12]  809 	mov	a,@r0
      000252 30 E7 13         [24]  810 	jnb	acc.7,00102$
      000255 05 3C            [12]  811 	inc	_m_tail
      000257 A9 3C            [24]  812 	mov	r1,_m_tail
      000259 78 28            [12]  813 	mov	r0,#_ID
      00025B E6               [12]  814 	mov	a,@r0
      00025C F7               [12]  815 	mov	@r1,a
      00025D 78 28            [12]  816 	mov	r0,#_ID
      00025F E6               [12]  817 	mov	a,@r0
      000260 24 24            [12]  818 	add	a,#_bitmap
      000262 F8               [12]  819 	mov	r0,a
      000263 76 FF            [12]  820 	mov	@r0,#0xFF
      000265 12r00r00         [24]  821 	lcall	_ThreadYield
      000268                        822 00102$:
      000268 D2 AF            [12]  823 	setb	_EA
                                    824 ;	testparking.c:119: if(!plot[0]) {
      00026A 78 4E            [12]  825 	mov	r0,#_plot
      00026C E6               [12]  826 	mov	a,@r0
      00026D 70 0E            [24]  827 	jnz	00104$
                                    828 ;	testparking.c:120: plot[0] = 3;
      00026F 78 4E            [12]  829 	mov	r0,#_plot
      000271 76 03            [12]  830 	mov	@r0,#0x03
                                    831 ;	testparking.c:128: __endasm;
      000273 78 34            [12]  832 	mov r0,#(_log + 0x0004)
      000275 E6               [12]  833 	mov a,@r0
      000276 FF               [12]  834 	mov r7,a
      000277 74 7F            [12]  835 	mov a,#0x7F
      000279 5F               [12]  836 	anl a,r7
      00027A F6               [12]  837 	mov @r0,a
      00027B 80 0C            [24]  838 	sjmp	00105$
      00027D                        839 00104$:
                                    840 ;	testparking.c:131: plot[1] = 3;
      00027D 78 4F            [12]  841 	mov	r0,#(_plot + 0x0001)
      00027F 76 03            [12]  842 	mov	@r0,#0x03
                                    843 ;	testparking.c:139: __endasm;
      000281 78 34            [12]  844 	mov r0,#(_log + 0x0004)
      000283 E6               [12]  845 	mov a,@r0
      000284 FF               [12]  846 	mov r7,a
      000285 74 80            [12]  847 	mov a,#0x80
      000287 4F               [12]  848 	orl a,r7
      000288 F6               [12]  849 	mov @r0,a
      000289                        850 00105$:
                                    851 ;	testparking.c:141: SemaphoreSignal(mutex,m_tail);
      000289 C2 AF            [12]  852 	clr	_EA
      00028B 78 3A            [12]  853 	mov	r0,#_mutex
      00028D 06               [12]  854 	inc	@r0
      00028E 78 3A            [12]  855 	mov	r0,#_mutex
      000290 C3               [12]  856 	clr	c
      000291 74 80            [12]  857 	mov	a,#(0x00 ^ 0x80)
      000293 86 F0            [24]  858 	mov	b,@r0
      000295 63 F0 80         [24]  859 	xrl	b,#0x80
      000298 95 F0            [12]  860 	subb	a,b
      00029A 40 0B            [24]  861 	jc	00107$
      00029C A9 3C            [24]  862 	mov	r1,_m_tail
      00029E E7               [12]  863 	mov	a,@r1
      00029F FF               [12]  864 	mov	r7,a
      0002A0 24 24            [12]  865 	add	a,#_bitmap
      0002A2 F8               [12]  866 	mov	r0,a
      0002A3 76 01            [12]  867 	mov	@r0,#0x01
      0002A5 15 3C            [12]  868 	dec	_m_tail
      0002A7                        869 00107$:
      0002A7 D2 AF            [12]  870 	setb	_EA
                                    871 ;	testparking.c:142: SemaphoreSignal(print,p_tail);
      0002A9 C2 AF            [12]  872 	clr	_EA
      0002AB 78 5B            [12]  873 	mov	r0,#_print
      0002AD 06               [12]  874 	inc	@r0
      0002AE 78 5B            [12]  875 	mov	r0,#_print
      0002B0 C3               [12]  876 	clr	c
      0002B1 74 80            [12]  877 	mov	a,#(0x00 ^ 0x80)
      0002B3 86 F0            [24]  878 	mov	b,@r0
      0002B5 63 F0 80         [24]  879 	xrl	b,#0x80
      0002B8 95 F0            [12]  880 	subb	a,b
      0002BA 40 0B            [24]  881 	jc	00109$
      0002BC A9 6C            [24]  882 	mov	r1,_p_tail
      0002BE E7               [12]  883 	mov	a,@r1
      0002BF FF               [12]  884 	mov	r7,a
      0002C0 24 24            [12]  885 	add	a,#_bitmap
      0002C2 F8               [12]  886 	mov	r0,a
      0002C3 76 01            [12]  887 	mov	@r0,#0x01
      0002C5 15 6C            [12]  888 	dec	_p_tail
      0002C7                        889 00109$:
      0002C7 D2 AF            [12]  890 	setb	_EA
                                    891 ;	testparking.c:143: delay(2);
      0002C9 75 82 02         [24]  892 	mov	dpl,#0x02
      0002CC 12r00r00         [24]  893 	lcall	_delay
                                    894 ;	testparking.c:144: log[5] = now();
      0002CF 12r00r00         [24]  895 	lcall	_now
      0002D2 E5 82            [12]  896 	mov	a,dpl
      0002D4 78 35            [12]  897 	mov	r0,#(_log + 0x0005)
      0002D6 F6               [12]  898 	mov	@r0,a
                                    899 ;	testparking.c:145: SemaphoreWait(mutex,m_tail);
      0002D7 C2 AF            [12]  900 	clr	_EA
      0002D9 78 3A            [12]  901 	mov	r0,#_mutex
      0002DB 16               [12]  902 	dec	@r0
      0002DC 78 3A            [12]  903 	mov	r0,#_mutex
      0002DE E6               [12]  904 	mov	a,@r0
      0002DF 30 E7 13         [24]  905 	jnb	acc.7,00111$
      0002E2 05 3C            [12]  906 	inc	_m_tail
      0002E4 A9 3C            [24]  907 	mov	r1,_m_tail
      0002E6 78 28            [12]  908 	mov	r0,#_ID
      0002E8 E6               [12]  909 	mov	a,@r0
      0002E9 F7               [12]  910 	mov	@r1,a
      0002EA 78 28            [12]  911 	mov	r0,#_ID
      0002EC E6               [12]  912 	mov	a,@r0
      0002ED 24 24            [12]  913 	add	a,#_bitmap
      0002EF F8               [12]  914 	mov	r0,a
      0002F0 76 FF            [12]  915 	mov	@r0,#0xFF
      0002F2 12r00r00         [24]  916 	lcall	_ThreadYield
      0002F5                        917 00111$:
      0002F5 D2 AF            [12]  918 	setb	_EA
                                    919 ;	testparking.c:146: if(!(plot[0]-3)) {
      0002F7 78 4E            [12]  920 	mov	r0,#_plot
      0002F9 E6               [12]  921 	mov	a,@r0
      0002FA FF               [12]  922 	mov	r7,a
      0002FB 33               [12]  923 	rlc	a
      0002FC 95 E0            [12]  924 	subb	a,acc
      0002FE FE               [12]  925 	mov	r6,a
      0002FF EF               [12]  926 	mov	a,r7
      000300 24 FD            [12]  927 	add	a,#0xFD
      000302 FF               [12]  928 	mov	r7,a
      000303 EE               [12]  929 	mov	a,r6
      000304 34 FF            [12]  930 	addc	a,#0xFF
      000306 FE               [12]  931 	mov	r6,a
      000307 4F               [12]  932 	orl	a,r7
                                    933 ;	testparking.c:147: plot[0] = 0;
      000308 70 0D            [24]  934 	jnz	00113$
      00030A 78 4E            [12]  935 	mov	r0,#_plot
      00030C F6               [12]  936 	mov	@r0,a
                                    937 ;	testparking.c:155: __endasm;
      00030D 78 35            [12]  938 	mov r0,#(_log + 0x0005)
      00030F E6               [12]  939 	mov a,@r0
      000310 FF               [12]  940 	mov r7,a
      000311 74 7F            [12]  941 	mov a,#0x7F
      000313 5F               [12]  942 	anl a,r7
      000314 F6               [12]  943 	mov @r0,a
      000315 80 0C            [24]  944 	sjmp	00114$
      000317                        945 00113$:
                                    946 ;	testparking.c:158: plot[1] = 0;
      000317 78 4F            [12]  947 	mov	r0,#(_plot + 0x0001)
      000319 76 00            [12]  948 	mov	@r0,#0x00
                                    949 ;	testparking.c:166: __endasm;
      00031B 78 35            [12]  950 	mov r0,#(_log + 0x0005)
      00031D E6               [12]  951 	mov a,@r0
      00031E FF               [12]  952 	mov r7,a
      00031F 74 80            [12]  953 	mov a,#0x80
      000321 4F               [12]  954 	orl a,r7
      000322 F6               [12]  955 	mov @r0,a
      000323                        956 00114$:
                                    957 ;	testparking.c:168: SemaphoreSignal(mutex,m_tail);
      000323 C2 AF            [12]  958 	clr	_EA
      000325 78 3A            [12]  959 	mov	r0,#_mutex
      000327 06               [12]  960 	inc	@r0
      000328 78 3A            [12]  961 	mov	r0,#_mutex
      00032A C3               [12]  962 	clr	c
      00032B 74 80            [12]  963 	mov	a,#(0x00 ^ 0x80)
      00032D 86 F0            [24]  964 	mov	b,@r0
      00032F 63 F0 80         [24]  965 	xrl	b,#0x80
      000332 95 F0            [12]  966 	subb	a,b
      000334 40 0B            [24]  967 	jc	00116$
      000336 A9 3C            [24]  968 	mov	r1,_m_tail
      000338 E7               [12]  969 	mov	a,@r1
      000339 FF               [12]  970 	mov	r7,a
      00033A 24 24            [12]  971 	add	a,#_bitmap
      00033C F8               [12]  972 	mov	r0,a
      00033D 76 01            [12]  973 	mov	@r0,#0x01
      00033F 15 3C            [12]  974 	dec	_m_tail
      000341                        975 00116$:
      000341 D2 AF            [12]  976 	setb	_EA
                                    977 ;	testparking.c:169: SemaphoreSignal(print,p_tail);
      000343 C2 AF            [12]  978 	clr	_EA
      000345 78 5B            [12]  979 	mov	r0,#_print
      000347 06               [12]  980 	inc	@r0
      000348 78 5B            [12]  981 	mov	r0,#_print
      00034A C3               [12]  982 	clr	c
      00034B 74 80            [12]  983 	mov	a,#(0x00 ^ 0x80)
      00034D 86 F0            [24]  984 	mov	b,@r0
      00034F 63 F0 80         [24]  985 	xrl	b,#0x80
      000352 95 F0            [12]  986 	subb	a,b
      000354 40 0B            [24]  987 	jc	00118$
      000356 A9 6C            [24]  988 	mov	r1,_p_tail
      000358 E7               [12]  989 	mov	a,@r1
      000359 FF               [12]  990 	mov	r7,a
      00035A 24 24            [12]  991 	add	a,#_bitmap
      00035C F8               [12]  992 	mov	r0,a
      00035D 76 01            [12]  993 	mov	@r0,#0x01
      00035F 15 6C            [12]  994 	dec	_p_tail
      000361                        995 00118$:
      000361 D2 AF            [12]  996 	setb	_EA
      000363 22               [24]  997 	ret
                                    998 ;------------------------------------------------------------
                                    999 ;Allocation info for local variables in function 'Car4'
                                   1000 ;------------------------------------------------------------
                                   1001 ;	testparking.c:172: void Car4(void) {
                                   1002 ;	-----------------------------------------
                                   1003 ;	 function Car4
                                   1004 ;	-----------------------------------------
      000364                       1005 _Car4:
                                   1006 ;	testparking.c:173: log[6] = now();
      000364 12r00r00         [24] 1007 	lcall	_now
      000367 E5 82            [12] 1008 	mov	a,dpl
      000369 78 36            [12] 1009 	mov	r0,#(_log + 0x0006)
      00036B F6               [12] 1010 	mov	@r0,a
                                   1011 ;	testparking.c:174: SemaphoreWait(mutex,m_tail);
      00036C C2 AF            [12] 1012 	clr	_EA
      00036E 78 3A            [12] 1013 	mov	r0,#_mutex
      000370 16               [12] 1014 	dec	@r0
      000371 78 3A            [12] 1015 	mov	r0,#_mutex
      000373 E6               [12] 1016 	mov	a,@r0
      000374 30 E7 13         [24] 1017 	jnb	acc.7,00102$
      000377 05 3C            [12] 1018 	inc	_m_tail
      000379 A9 3C            [24] 1019 	mov	r1,_m_tail
      00037B 78 28            [12] 1020 	mov	r0,#_ID
      00037D E6               [12] 1021 	mov	a,@r0
      00037E F7               [12] 1022 	mov	@r1,a
      00037F 78 28            [12] 1023 	mov	r0,#_ID
      000381 E6               [12] 1024 	mov	a,@r0
      000382 24 24            [12] 1025 	add	a,#_bitmap
      000384 F8               [12] 1026 	mov	r0,a
      000385 76 FF            [12] 1027 	mov	@r0,#0xFF
      000387 12r00r00         [24] 1028 	lcall	_ThreadYield
      00038A                       1029 00102$:
      00038A D2 AF            [12] 1030 	setb	_EA
                                   1031 ;	testparking.c:175: if(!plot[0]) {
      00038C 78 4E            [12] 1032 	mov	r0,#_plot
      00038E E6               [12] 1033 	mov	a,@r0
      00038F 70 0E            [24] 1034 	jnz	00104$
                                   1035 ;	testparking.c:176: plot[0] = 4;
      000391 78 4E            [12] 1036 	mov	r0,#_plot
      000393 76 04            [12] 1037 	mov	@r0,#0x04
                                   1038 ;	testparking.c:184: __endasm;
      000395 78 36            [12] 1039 	mov r0,#(_log + 0x0006)
      000397 E6               [12] 1040 	mov a,@r0
      000398 FF               [12] 1041 	mov r7,a
      000399 74 7F            [12] 1042 	mov a,#0x7F
      00039B 5F               [12] 1043 	anl a,r7
      00039C F6               [12] 1044 	mov @r0,a
      00039D 80 0C            [24] 1045 	sjmp	00105$
      00039F                       1046 00104$:
                                   1047 ;	testparking.c:187: plot[1] = 4;
      00039F 78 4F            [12] 1048 	mov	r0,#(_plot + 0x0001)
      0003A1 76 04            [12] 1049 	mov	@r0,#0x04
                                   1050 ;	testparking.c:195: __endasm;
      0003A3 78 36            [12] 1051 	mov r0,#(_log + 0x0006)
      0003A5 E6               [12] 1052 	mov a,@r0
      0003A6 FF               [12] 1053 	mov r7,a
      0003A7 74 80            [12] 1054 	mov a,#0x80
      0003A9 4F               [12] 1055 	orl a,r7
      0003AA F6               [12] 1056 	mov @r0,a
      0003AB                       1057 00105$:
                                   1058 ;	testparking.c:197: SemaphoreSignal(mutex,m_tail);
      0003AB C2 AF            [12] 1059 	clr	_EA
      0003AD 78 3A            [12] 1060 	mov	r0,#_mutex
      0003AF 06               [12] 1061 	inc	@r0
      0003B0 78 3A            [12] 1062 	mov	r0,#_mutex
      0003B2 C3               [12] 1063 	clr	c
      0003B3 74 80            [12] 1064 	mov	a,#(0x00 ^ 0x80)
      0003B5 86 F0            [24] 1065 	mov	b,@r0
      0003B7 63 F0 80         [24] 1066 	xrl	b,#0x80
      0003BA 95 F0            [12] 1067 	subb	a,b
      0003BC 40 0B            [24] 1068 	jc	00107$
      0003BE A9 3C            [24] 1069 	mov	r1,_m_tail
      0003C0 E7               [12] 1070 	mov	a,@r1
      0003C1 FF               [12] 1071 	mov	r7,a
      0003C2 24 24            [12] 1072 	add	a,#_bitmap
      0003C4 F8               [12] 1073 	mov	r0,a
      0003C5 76 01            [12] 1074 	mov	@r0,#0x01
      0003C7 15 3C            [12] 1075 	dec	_m_tail
      0003C9                       1076 00107$:
      0003C9 D2 AF            [12] 1077 	setb	_EA
                                   1078 ;	testparking.c:198: SemaphoreSignal(print,p_tail);
      0003CB C2 AF            [12] 1079 	clr	_EA
      0003CD 78 5B            [12] 1080 	mov	r0,#_print
      0003CF 06               [12] 1081 	inc	@r0
      0003D0 78 5B            [12] 1082 	mov	r0,#_print
      0003D2 C3               [12] 1083 	clr	c
      0003D3 74 80            [12] 1084 	mov	a,#(0x00 ^ 0x80)
      0003D5 86 F0            [24] 1085 	mov	b,@r0
      0003D7 63 F0 80         [24] 1086 	xrl	b,#0x80
      0003DA 95 F0            [12] 1087 	subb	a,b
      0003DC 40 0B            [24] 1088 	jc	00109$
      0003DE A9 6C            [24] 1089 	mov	r1,_p_tail
      0003E0 E7               [12] 1090 	mov	a,@r1
      0003E1 FF               [12] 1091 	mov	r7,a
      0003E2 24 24            [12] 1092 	add	a,#_bitmap
      0003E4 F8               [12] 1093 	mov	r0,a
      0003E5 76 01            [12] 1094 	mov	@r0,#0x01
      0003E7 15 6C            [12] 1095 	dec	_p_tail
      0003E9                       1096 00109$:
      0003E9 D2 AF            [12] 1097 	setb	_EA
                                   1098 ;	testparking.c:199: delay(2);
      0003EB 75 82 02         [24] 1099 	mov	dpl,#0x02
      0003EE 12r00r00         [24] 1100 	lcall	_delay
                                   1101 ;	testparking.c:200: log[7] = now();
      0003F1 12r00r00         [24] 1102 	lcall	_now
      0003F4 E5 82            [12] 1103 	mov	a,dpl
      0003F6 78 37            [12] 1104 	mov	r0,#(_log + 0x0007)
      0003F8 F6               [12] 1105 	mov	@r0,a
                                   1106 ;	testparking.c:201: SemaphoreWait(mutex,m_tail);
      0003F9 C2 AF            [12] 1107 	clr	_EA
      0003FB 78 3A            [12] 1108 	mov	r0,#_mutex
      0003FD 16               [12] 1109 	dec	@r0
      0003FE 78 3A            [12] 1110 	mov	r0,#_mutex
      000400 E6               [12] 1111 	mov	a,@r0
      000401 30 E7 13         [24] 1112 	jnb	acc.7,00111$
      000404 05 3C            [12] 1113 	inc	_m_tail
      000406 A9 3C            [24] 1114 	mov	r1,_m_tail
      000408 78 28            [12] 1115 	mov	r0,#_ID
      00040A E6               [12] 1116 	mov	a,@r0
      00040B F7               [12] 1117 	mov	@r1,a
      00040C 78 28            [12] 1118 	mov	r0,#_ID
      00040E E6               [12] 1119 	mov	a,@r0
      00040F 24 24            [12] 1120 	add	a,#_bitmap
      000411 F8               [12] 1121 	mov	r0,a
      000412 76 FF            [12] 1122 	mov	@r0,#0xFF
      000414 12r00r00         [24] 1123 	lcall	_ThreadYield
      000417                       1124 00111$:
      000417 D2 AF            [12] 1125 	setb	_EA
                                   1126 ;	testparking.c:202: if(!(plot[0]-4)) {
      000419 78 4E            [12] 1127 	mov	r0,#_plot
      00041B E6               [12] 1128 	mov	a,@r0
      00041C FF               [12] 1129 	mov	r7,a
      00041D 33               [12] 1130 	rlc	a
      00041E 95 E0            [12] 1131 	subb	a,acc
      000420 FE               [12] 1132 	mov	r6,a
      000421 EF               [12] 1133 	mov	a,r7
      000422 24 FC            [12] 1134 	add	a,#0xFC
      000424 FF               [12] 1135 	mov	r7,a
      000425 EE               [12] 1136 	mov	a,r6
      000426 34 FF            [12] 1137 	addc	a,#0xFF
      000428 FE               [12] 1138 	mov	r6,a
      000429 4F               [12] 1139 	orl	a,r7
                                   1140 ;	testparking.c:203: plot[0] = 0;
      00042A 70 0D            [24] 1141 	jnz	00113$
      00042C 78 4E            [12] 1142 	mov	r0,#_plot
      00042E F6               [12] 1143 	mov	@r0,a
                                   1144 ;	testparking.c:211: __endasm;
      00042F 78 37            [12] 1145 	mov r0,#(_log + 0x0007)
      000431 E6               [12] 1146 	mov a,@r0
      000432 FF               [12] 1147 	mov r7,a
      000433 74 7F            [12] 1148 	mov a,#0x7F
      000435 5F               [12] 1149 	anl a,r7
      000436 F6               [12] 1150 	mov @r0,a
      000437 80 0C            [24] 1151 	sjmp	00114$
      000439                       1152 00113$:
                                   1153 ;	testparking.c:214: plot[1] = 0;
      000439 78 4F            [12] 1154 	mov	r0,#(_plot + 0x0001)
      00043B 76 00            [12] 1155 	mov	@r0,#0x00
                                   1156 ;	testparking.c:222: __endasm;
      00043D 78 37            [12] 1157 	mov r0,#(_log + 0x0007)
      00043F E6               [12] 1158 	mov a,@r0
      000440 FF               [12] 1159 	mov r7,a
      000441 74 80            [12] 1160 	mov a,#0x80
      000443 4F               [12] 1161 	orl a,r7
      000444 F6               [12] 1162 	mov @r0,a
      000445                       1163 00114$:
                                   1164 ;	testparking.c:224: SemaphoreSignal(mutex,m_tail);
      000445 C2 AF            [12] 1165 	clr	_EA
      000447 78 3A            [12] 1166 	mov	r0,#_mutex
      000449 06               [12] 1167 	inc	@r0
      00044A 78 3A            [12] 1168 	mov	r0,#_mutex
      00044C C3               [12] 1169 	clr	c
      00044D 74 80            [12] 1170 	mov	a,#(0x00 ^ 0x80)
      00044F 86 F0            [24] 1171 	mov	b,@r0
      000451 63 F0 80         [24] 1172 	xrl	b,#0x80
      000454 95 F0            [12] 1173 	subb	a,b
      000456 40 0B            [24] 1174 	jc	00116$
      000458 A9 3C            [24] 1175 	mov	r1,_m_tail
      00045A E7               [12] 1176 	mov	a,@r1
      00045B FF               [12] 1177 	mov	r7,a
      00045C 24 24            [12] 1178 	add	a,#_bitmap
      00045E F8               [12] 1179 	mov	r0,a
      00045F 76 01            [12] 1180 	mov	@r0,#0x01
      000461 15 3C            [12] 1181 	dec	_m_tail
      000463                       1182 00116$:
      000463 D2 AF            [12] 1183 	setb	_EA
                                   1184 ;	testparking.c:225: SemaphoreSignal(print,p_tail);
      000465 C2 AF            [12] 1185 	clr	_EA
      000467 78 5B            [12] 1186 	mov	r0,#_print
      000469 06               [12] 1187 	inc	@r0
      00046A 78 5B            [12] 1188 	mov	r0,#_print
      00046C C3               [12] 1189 	clr	c
      00046D 74 80            [12] 1190 	mov	a,#(0x00 ^ 0x80)
      00046F 86 F0            [24] 1191 	mov	b,@r0
      000471 63 F0 80         [24] 1192 	xrl	b,#0x80
      000474 95 F0            [12] 1193 	subb	a,b
      000476 40 0B            [24] 1194 	jc	00118$
      000478 A9 6C            [24] 1195 	mov	r1,_p_tail
      00047A E7               [12] 1196 	mov	a,@r1
      00047B FF               [12] 1197 	mov	r7,a
      00047C 24 24            [12] 1198 	add	a,#_bitmap
      00047E F8               [12] 1199 	mov	r0,a
      00047F 76 01            [12] 1200 	mov	@r0,#0x01
      000481 15 6C            [12] 1201 	dec	_p_tail
      000483                       1202 00118$:
      000483 D2 AF            [12] 1203 	setb	_EA
      000485 22               [24] 1204 	ret
                                   1205 ;------------------------------------------------------------
                                   1206 ;Allocation info for local variables in function 'Car5'
                                   1207 ;------------------------------------------------------------
                                   1208 ;	testparking.c:228: void Car5(void) {
                                   1209 ;	-----------------------------------------
                                   1210 ;	 function Car5
                                   1211 ;	-----------------------------------------
      000486                       1212 _Car5:
                                   1213 ;	testparking.c:229: log[8] = now();
      000486 12r00r00         [24] 1214 	lcall	_now
      000489 E5 82            [12] 1215 	mov	a,dpl
      00048B 78 38            [12] 1216 	mov	r0,#(_log + 0x0008)
      00048D F6               [12] 1217 	mov	@r0,a
                                   1218 ;	testparking.c:230: SemaphoreWait(mutex,m_tail);
      00048E C2 AF            [12] 1219 	clr	_EA
      000490 78 3A            [12] 1220 	mov	r0,#_mutex
      000492 16               [12] 1221 	dec	@r0
      000493 78 3A            [12] 1222 	mov	r0,#_mutex
      000495 E6               [12] 1223 	mov	a,@r0
      000496 30 E7 13         [24] 1224 	jnb	acc.7,00102$
      000499 05 3C            [12] 1225 	inc	_m_tail
      00049B A9 3C            [24] 1226 	mov	r1,_m_tail
      00049D 78 28            [12] 1227 	mov	r0,#_ID
      00049F E6               [12] 1228 	mov	a,@r0
      0004A0 F7               [12] 1229 	mov	@r1,a
      0004A1 78 28            [12] 1230 	mov	r0,#_ID
      0004A3 E6               [12] 1231 	mov	a,@r0
      0004A4 24 24            [12] 1232 	add	a,#_bitmap
      0004A6 F8               [12] 1233 	mov	r0,a
      0004A7 76 FF            [12] 1234 	mov	@r0,#0xFF
      0004A9 12r00r00         [24] 1235 	lcall	_ThreadYield
      0004AC                       1236 00102$:
      0004AC D2 AF            [12] 1237 	setb	_EA
                                   1238 ;	testparking.c:231: if(!plot[0]) {
      0004AE 78 4E            [12] 1239 	mov	r0,#_plot
      0004B0 E6               [12] 1240 	mov	a,@r0
      0004B1 70 0E            [24] 1241 	jnz	00104$
                                   1242 ;	testparking.c:232: plot[0] = 5;
      0004B3 78 4E            [12] 1243 	mov	r0,#_plot
      0004B5 76 05            [12] 1244 	mov	@r0,#0x05
                                   1245 ;	testparking.c:240: __endasm;
      0004B7 78 38            [12] 1246 	mov r0,#(_log + 0x0008)
      0004B9 E6               [12] 1247 	mov a,@r0
      0004BA FF               [12] 1248 	mov r7,a
      0004BB 74 7F            [12] 1249 	mov a,#0x7F
      0004BD 5F               [12] 1250 	anl a,r7
      0004BE F6               [12] 1251 	mov @r0,a
      0004BF 80 0C            [24] 1252 	sjmp	00105$
      0004C1                       1253 00104$:
                                   1254 ;	testparking.c:243: plot[1] = 5;
      0004C1 78 4F            [12] 1255 	mov	r0,#(_plot + 0x0001)
      0004C3 76 05            [12] 1256 	mov	@r0,#0x05
                                   1257 ;	testparking.c:251: __endasm;
      0004C5 78 38            [12] 1258 	mov r0,#(_log + 0x0008)
      0004C7 E6               [12] 1259 	mov a,@r0
      0004C8 FF               [12] 1260 	mov r7,a
      0004C9 74 80            [12] 1261 	mov a,#0x80
      0004CB 4F               [12] 1262 	orl a,r7
      0004CC F6               [12] 1263 	mov @r0,a
      0004CD                       1264 00105$:
                                   1265 ;	testparking.c:253: SemaphoreSignal(mutex,m_tail);
      0004CD C2 AF            [12] 1266 	clr	_EA
      0004CF 78 3A            [12] 1267 	mov	r0,#_mutex
      0004D1 06               [12] 1268 	inc	@r0
      0004D2 78 3A            [12] 1269 	mov	r0,#_mutex
      0004D4 C3               [12] 1270 	clr	c
      0004D5 74 80            [12] 1271 	mov	a,#(0x00 ^ 0x80)
      0004D7 86 F0            [24] 1272 	mov	b,@r0
      0004D9 63 F0 80         [24] 1273 	xrl	b,#0x80
      0004DC 95 F0            [12] 1274 	subb	a,b
      0004DE 40 0B            [24] 1275 	jc	00107$
      0004E0 A9 3C            [24] 1276 	mov	r1,_m_tail
      0004E2 E7               [12] 1277 	mov	a,@r1
      0004E3 FF               [12] 1278 	mov	r7,a
      0004E4 24 24            [12] 1279 	add	a,#_bitmap
      0004E6 F8               [12] 1280 	mov	r0,a
      0004E7 76 01            [12] 1281 	mov	@r0,#0x01
      0004E9 15 3C            [12] 1282 	dec	_m_tail
      0004EB                       1283 00107$:
      0004EB D2 AF            [12] 1284 	setb	_EA
                                   1285 ;	testparking.c:254: SemaphoreSignal(print,p_tail);
      0004ED C2 AF            [12] 1286 	clr	_EA
      0004EF 78 5B            [12] 1287 	mov	r0,#_print
      0004F1 06               [12] 1288 	inc	@r0
      0004F2 78 5B            [12] 1289 	mov	r0,#_print
      0004F4 C3               [12] 1290 	clr	c
      0004F5 74 80            [12] 1291 	mov	a,#(0x00 ^ 0x80)
      0004F7 86 F0            [24] 1292 	mov	b,@r0
      0004F9 63 F0 80         [24] 1293 	xrl	b,#0x80
      0004FC 95 F0            [12] 1294 	subb	a,b
      0004FE 40 0B            [24] 1295 	jc	00109$
      000500 A9 6C            [24] 1296 	mov	r1,_p_tail
      000502 E7               [12] 1297 	mov	a,@r1
      000503 FF               [12] 1298 	mov	r7,a
      000504 24 24            [12] 1299 	add	a,#_bitmap
      000506 F8               [12] 1300 	mov	r0,a
      000507 76 01            [12] 1301 	mov	@r0,#0x01
      000509 15 6C            [12] 1302 	dec	_p_tail
      00050B                       1303 00109$:
      00050B D2 AF            [12] 1304 	setb	_EA
                                   1305 ;	testparking.c:255: delay(2);
      00050D 75 82 02         [24] 1306 	mov	dpl,#0x02
      000510 12r00r00         [24] 1307 	lcall	_delay
                                   1308 ;	testparking.c:256: log[9] = now();
      000513 12r00r00         [24] 1309 	lcall	_now
      000516 E5 82            [12] 1310 	mov	a,dpl
      000518 78 39            [12] 1311 	mov	r0,#(_log + 0x0009)
      00051A F6               [12] 1312 	mov	@r0,a
                                   1313 ;	testparking.c:257: SemaphoreWait(mutex,m_tail);
      00051B C2 AF            [12] 1314 	clr	_EA
      00051D 78 3A            [12] 1315 	mov	r0,#_mutex
      00051F 16               [12] 1316 	dec	@r0
      000520 78 3A            [12] 1317 	mov	r0,#_mutex
      000522 E6               [12] 1318 	mov	a,@r0
      000523 30 E7 13         [24] 1319 	jnb	acc.7,00111$
      000526 05 3C            [12] 1320 	inc	_m_tail
      000528 A9 3C            [24] 1321 	mov	r1,_m_tail
      00052A 78 28            [12] 1322 	mov	r0,#_ID
      00052C E6               [12] 1323 	mov	a,@r0
      00052D F7               [12] 1324 	mov	@r1,a
      00052E 78 28            [12] 1325 	mov	r0,#_ID
      000530 E6               [12] 1326 	mov	a,@r0
      000531 24 24            [12] 1327 	add	a,#_bitmap
      000533 F8               [12] 1328 	mov	r0,a
      000534 76 FF            [12] 1329 	mov	@r0,#0xFF
      000536 12r00r00         [24] 1330 	lcall	_ThreadYield
      000539                       1331 00111$:
      000539 D2 AF            [12] 1332 	setb	_EA
                                   1333 ;	testparking.c:258: if(!(plot[0]-5)) {
      00053B 78 4E            [12] 1334 	mov	r0,#_plot
      00053D E6               [12] 1335 	mov	a,@r0
      00053E FF               [12] 1336 	mov	r7,a
      00053F 33               [12] 1337 	rlc	a
      000540 95 E0            [12] 1338 	subb	a,acc
      000542 FE               [12] 1339 	mov	r6,a
      000543 EF               [12] 1340 	mov	a,r7
      000544 24 FB            [12] 1341 	add	a,#0xFB
      000546 FF               [12] 1342 	mov	r7,a
      000547 EE               [12] 1343 	mov	a,r6
      000548 34 FF            [12] 1344 	addc	a,#0xFF
      00054A FE               [12] 1345 	mov	r6,a
      00054B 4F               [12] 1346 	orl	a,r7
                                   1347 ;	testparking.c:259: plot[0] = 0;
      00054C 70 0D            [24] 1348 	jnz	00113$
      00054E 78 4E            [12] 1349 	mov	r0,#_plot
      000550 F6               [12] 1350 	mov	@r0,a
                                   1351 ;	testparking.c:267: __endasm;
      000551 78 39            [12] 1352 	mov r0,#(_log + 0x0009)
      000553 E6               [12] 1353 	mov a,@r0
      000554 FF               [12] 1354 	mov r7,a
      000555 74 7F            [12] 1355 	mov a,#0x7F
      000557 5F               [12] 1356 	anl a,r7
      000558 F6               [12] 1357 	mov @r0,a
      000559 80 0C            [24] 1358 	sjmp	00114$
      00055B                       1359 00113$:
                                   1360 ;	testparking.c:270: plot[1] = 0;
      00055B 78 4F            [12] 1361 	mov	r0,#(_plot + 0x0001)
      00055D 76 00            [12] 1362 	mov	@r0,#0x00
                                   1363 ;	testparking.c:278: __endasm;
      00055F 78 39            [12] 1364 	mov r0,#(_log + 0x0009)
      000561 E6               [12] 1365 	mov a,@r0
      000562 FF               [12] 1366 	mov r7,a
      000563 74 80            [12] 1367 	mov a,#0x80
      000565 4F               [12] 1368 	orl a,r7
      000566 F6               [12] 1369 	mov @r0,a
      000567                       1370 00114$:
                                   1371 ;	testparking.c:280: SemaphoreSignal(mutex,m_tail);
      000567 C2 AF            [12] 1372 	clr	_EA
      000569 78 3A            [12] 1373 	mov	r0,#_mutex
      00056B 06               [12] 1374 	inc	@r0
      00056C 78 3A            [12] 1375 	mov	r0,#_mutex
      00056E C3               [12] 1376 	clr	c
      00056F 74 80            [12] 1377 	mov	a,#(0x00 ^ 0x80)
      000571 86 F0            [24] 1378 	mov	b,@r0
      000573 63 F0 80         [24] 1379 	xrl	b,#0x80
      000576 95 F0            [12] 1380 	subb	a,b
      000578 40 0B            [24] 1381 	jc	00116$
      00057A A9 3C            [24] 1382 	mov	r1,_m_tail
      00057C E7               [12] 1383 	mov	a,@r1
      00057D FF               [12] 1384 	mov	r7,a
      00057E 24 24            [12] 1385 	add	a,#_bitmap
      000580 F8               [12] 1386 	mov	r0,a
      000581 76 01            [12] 1387 	mov	@r0,#0x01
      000583 15 3C            [12] 1388 	dec	_m_tail
      000585                       1389 00116$:
      000585 D2 AF            [12] 1390 	setb	_EA
                                   1391 ;	testparking.c:281: SemaphoreSignal(print,p_tail);
      000587 C2 AF            [12] 1392 	clr	_EA
      000589 78 5B            [12] 1393 	mov	r0,#_print
      00058B 06               [12] 1394 	inc	@r0
      00058C 78 5B            [12] 1395 	mov	r0,#_print
      00058E C3               [12] 1396 	clr	c
      00058F 74 80            [12] 1397 	mov	a,#(0x00 ^ 0x80)
      000591 86 F0            [24] 1398 	mov	b,@r0
      000593 63 F0 80         [24] 1399 	xrl	b,#0x80
      000596 95 F0            [12] 1400 	subb	a,b
      000598 40 0B            [24] 1401 	jc	00118$
      00059A A9 6C            [24] 1402 	mov	r1,_p_tail
      00059C E7               [12] 1403 	mov	a,@r1
      00059D FF               [12] 1404 	mov	r7,a
      00059E 24 24            [12] 1405 	add	a,#_bitmap
      0005A0 F8               [12] 1406 	mov	r0,a
      0005A1 76 01            [12] 1407 	mov	@r0,#0x01
      0005A3 15 6C            [12] 1408 	dec	_p_tail
      0005A5                       1409 00118$:
      0005A5 D2 AF            [12] 1410 	setb	_EA
      0005A7 22               [24] 1411 	ret
                                   1412 ;------------------------------------------------------------
                                   1413 ;Allocation info for local variables in function 'Printer'
                                   1414 ;------------------------------------------------------------
                                   1415 ;	testparking.c:284: void Printer(void) {
                                   1416 ;	-----------------------------------------
                                   1417 ;	 function Printer
                                   1418 ;	-----------------------------------------
      0005A8                       1419 _Printer:
                                   1420 ;	testparking.c:285: TMOD |= 0x20;
      0005A8 43 89 20         [24] 1421 	orl	_TMOD,#0x20
                                   1422 ;	testparking.c:286: TH1 = -6;
      0005AB 75 8D FA         [24] 1423 	mov	_TH1,#0xFA
                                   1424 ;	testparking.c:287: SCON = 0x50;
      0005AE 75 98 50         [24] 1425 	mov	_SCON,#0x50
                                   1426 ;	testparking.c:288: TR1 = 1;
      0005B1 D2 8E            [12] 1427 	setb	_TR1
                                   1428 ;	testparking.c:290: SemaphoreWait(print,p_tail);
      0005B3 C2 AF            [12] 1429 	clr	_EA
      0005B5 78 5B            [12] 1430 	mov	r0,#_print
      0005B7 16               [12] 1431 	dec	@r0
      0005B8 78 5B            [12] 1432 	mov	r0,#_print
      0005BA E6               [12] 1433 	mov	a,@r0
      0005BB 30 E7 13         [24] 1434 	jnb	acc.7,00102$
      0005BE 05 6C            [12] 1435 	inc	_p_tail
      0005C0 A9 6C            [24] 1436 	mov	r1,_p_tail
      0005C2 78 28            [12] 1437 	mov	r0,#_ID
      0005C4 E6               [12] 1438 	mov	a,@r0
      0005C5 F7               [12] 1439 	mov	@r1,a
      0005C6 78 28            [12] 1440 	mov	r0,#_ID
      0005C8 E6               [12] 1441 	mov	a,@r0
      0005C9 24 24            [12] 1442 	add	a,#_bitmap
      0005CB F8               [12] 1443 	mov	r0,a
      0005CC 76 FF            [12] 1444 	mov	@r0,#0xFF
      0005CE 12r00r00         [24] 1445 	lcall	_ThreadYield
      0005D1                       1446 00102$:
      0005D1 D2 AF            [12] 1447 	setb	_EA
                                   1448 ;	testparking.c:291: SemaphoreWait(print,p_tail);
      0005D3 C2 AF            [12] 1449 	clr	_EA
      0005D5 78 5B            [12] 1450 	mov	r0,#_print
      0005D7 16               [12] 1451 	dec	@r0
      0005D8 78 5B            [12] 1452 	mov	r0,#_print
      0005DA E6               [12] 1453 	mov	a,@r0
      0005DB 30 E7 13         [24] 1454 	jnb	acc.7,00104$
      0005DE 05 6C            [12] 1455 	inc	_p_tail
      0005E0 A9 6C            [24] 1456 	mov	r1,_p_tail
      0005E2 78 28            [12] 1457 	mov	r0,#_ID
      0005E4 E6               [12] 1458 	mov	a,@r0
      0005E5 F7               [12] 1459 	mov	@r1,a
      0005E6 78 28            [12] 1460 	mov	r0,#_ID
      0005E8 E6               [12] 1461 	mov	a,@r0
      0005E9 24 24            [12] 1462 	add	a,#_bitmap
      0005EB F8               [12] 1463 	mov	r0,a
      0005EC 76 FF            [12] 1464 	mov	@r0,#0xFF
      0005EE 12r00r00         [24] 1465 	lcall	_ThreadYield
      0005F1                       1466 00104$:
      0005F1 D2 AF            [12] 1467 	setb	_EA
                                   1468 ;	testparking.c:292: SemaphoreWait(print,p_tail);
      0005F3 C2 AF            [12] 1469 	clr	_EA
      0005F5 78 5B            [12] 1470 	mov	r0,#_print
      0005F7 16               [12] 1471 	dec	@r0
      0005F8 78 5B            [12] 1472 	mov	r0,#_print
      0005FA E6               [12] 1473 	mov	a,@r0
      0005FB 30 E7 13         [24] 1474 	jnb	acc.7,00106$
      0005FE 05 6C            [12] 1475 	inc	_p_tail
      000600 A9 6C            [24] 1476 	mov	r1,_p_tail
      000602 78 28            [12] 1477 	mov	r0,#_ID
      000604 E6               [12] 1478 	mov	a,@r0
      000605 F7               [12] 1479 	mov	@r1,a
      000606 78 28            [12] 1480 	mov	r0,#_ID
      000608 E6               [12] 1481 	mov	a,@r0
      000609 24 24            [12] 1482 	add	a,#_bitmap
      00060B F8               [12] 1483 	mov	r0,a
      00060C 76 FF            [12] 1484 	mov	@r0,#0xFF
      00060E 12r00r00         [24] 1485 	lcall	_ThreadYield
      000611                       1486 00106$:
      000611 D2 AF            [12] 1487 	setb	_EA
                                   1488 ;	testparking.c:293: SemaphoreWait(print,p_tail);
      000613 C2 AF            [12] 1489 	clr	_EA
      000615 78 5B            [12] 1490 	mov	r0,#_print
      000617 16               [12] 1491 	dec	@r0
      000618 78 5B            [12] 1492 	mov	r0,#_print
      00061A E6               [12] 1493 	mov	a,@r0
      00061B 30 E7 13         [24] 1494 	jnb	acc.7,00108$
      00061E 05 6C            [12] 1495 	inc	_p_tail
      000620 A9 6C            [24] 1496 	mov	r1,_p_tail
      000622 78 28            [12] 1497 	mov	r0,#_ID
      000624 E6               [12] 1498 	mov	a,@r0
      000625 F7               [12] 1499 	mov	@r1,a
      000626 78 28            [12] 1500 	mov	r0,#_ID
      000628 E6               [12] 1501 	mov	a,@r0
      000629 24 24            [12] 1502 	add	a,#_bitmap
      00062B F8               [12] 1503 	mov	r0,a
      00062C 76 FF            [12] 1504 	mov	@r0,#0xFF
      00062E 12r00r00         [24] 1505 	lcall	_ThreadYield
      000631                       1506 00108$:
      000631 D2 AF            [12] 1507 	setb	_EA
                                   1508 ;	testparking.c:294: SemaphoreWait(print,p_tail);
      000633 C2 AF            [12] 1509 	clr	_EA
      000635 78 5B            [12] 1510 	mov	r0,#_print
      000637 16               [12] 1511 	dec	@r0
      000638 78 5B            [12] 1512 	mov	r0,#_print
      00063A E6               [12] 1513 	mov	a,@r0
      00063B 30 E7 13         [24] 1514 	jnb	acc.7,00110$
      00063E 05 6C            [12] 1515 	inc	_p_tail
      000640 A9 6C            [24] 1516 	mov	r1,_p_tail
      000642 78 28            [12] 1517 	mov	r0,#_ID
      000644 E6               [12] 1518 	mov	a,@r0
      000645 F7               [12] 1519 	mov	@r1,a
      000646 78 28            [12] 1520 	mov	r0,#_ID
      000648 E6               [12] 1521 	mov	a,@r0
      000649 24 24            [12] 1522 	add	a,#_bitmap
      00064B F8               [12] 1523 	mov	r0,a
      00064C 76 FF            [12] 1524 	mov	@r0,#0xFF
      00064E 12r00r00         [24] 1525 	lcall	_ThreadYield
      000651                       1526 00110$:
      000651 D2 AF            [12] 1527 	setb	_EA
                                   1528 ;	testparking.c:295: SemaphoreWait(print,p_tail);
      000653 C2 AF            [12] 1529 	clr	_EA
      000655 78 5B            [12] 1530 	mov	r0,#_print
      000657 16               [12] 1531 	dec	@r0
      000658 78 5B            [12] 1532 	mov	r0,#_print
      00065A E6               [12] 1533 	mov	a,@r0
      00065B 30 E7 13         [24] 1534 	jnb	acc.7,00112$
      00065E 05 6C            [12] 1535 	inc	_p_tail
      000660 A9 6C            [24] 1536 	mov	r1,_p_tail
      000662 78 28            [12] 1537 	mov	r0,#_ID
      000664 E6               [12] 1538 	mov	a,@r0
      000665 F7               [12] 1539 	mov	@r1,a
      000666 78 28            [12] 1540 	mov	r0,#_ID
      000668 E6               [12] 1541 	mov	a,@r0
      000669 24 24            [12] 1542 	add	a,#_bitmap
      00066B F8               [12] 1543 	mov	r0,a
      00066C 76 FF            [12] 1544 	mov	@r0,#0xFF
      00066E 12r00r00         [24] 1545 	lcall	_ThreadYield
      000671                       1546 00112$:
      000671 D2 AF            [12] 1547 	setb	_EA
                                   1548 ;	testparking.c:296: SemaphoreWait(print,p_tail);
      000673 C2 AF            [12] 1549 	clr	_EA
      000675 78 5B            [12] 1550 	mov	r0,#_print
      000677 16               [12] 1551 	dec	@r0
      000678 78 5B            [12] 1552 	mov	r0,#_print
      00067A E6               [12] 1553 	mov	a,@r0
      00067B 30 E7 13         [24] 1554 	jnb	acc.7,00114$
      00067E 05 6C            [12] 1555 	inc	_p_tail
      000680 A9 6C            [24] 1556 	mov	r1,_p_tail
      000682 78 28            [12] 1557 	mov	r0,#_ID
      000684 E6               [12] 1558 	mov	a,@r0
      000685 F7               [12] 1559 	mov	@r1,a
      000686 78 28            [12] 1560 	mov	r0,#_ID
      000688 E6               [12] 1561 	mov	a,@r0
      000689 24 24            [12] 1562 	add	a,#_bitmap
      00068B F8               [12] 1563 	mov	r0,a
      00068C 76 FF            [12] 1564 	mov	@r0,#0xFF
      00068E 12r00r00         [24] 1565 	lcall	_ThreadYield
      000691                       1566 00114$:
      000691 D2 AF            [12] 1567 	setb	_EA
                                   1568 ;	testparking.c:297: SemaphoreWait(print,p_tail);
      000693 C2 AF            [12] 1569 	clr	_EA
      000695 78 5B            [12] 1570 	mov	r0,#_print
      000697 16               [12] 1571 	dec	@r0
      000698 78 5B            [12] 1572 	mov	r0,#_print
      00069A E6               [12] 1573 	mov	a,@r0
      00069B 30 E7 13         [24] 1574 	jnb	acc.7,00116$
      00069E 05 6C            [12] 1575 	inc	_p_tail
      0006A0 A9 6C            [24] 1576 	mov	r1,_p_tail
      0006A2 78 28            [12] 1577 	mov	r0,#_ID
      0006A4 E6               [12] 1578 	mov	a,@r0
      0006A5 F7               [12] 1579 	mov	@r1,a
      0006A6 78 28            [12] 1580 	mov	r0,#_ID
      0006A8 E6               [12] 1581 	mov	a,@r0
      0006A9 24 24            [12] 1582 	add	a,#_bitmap
      0006AB F8               [12] 1583 	mov	r0,a
      0006AC 76 FF            [12] 1584 	mov	@r0,#0xFF
      0006AE 12r00r00         [24] 1585 	lcall	_ThreadYield
      0006B1                       1586 00116$:
      0006B1 D2 AF            [12] 1587 	setb	_EA
                                   1588 ;	testparking.c:298: SemaphoreWait(print,p_tail);
      0006B3 C2 AF            [12] 1589 	clr	_EA
      0006B5 78 5B            [12] 1590 	mov	r0,#_print
      0006B7 16               [12] 1591 	dec	@r0
      0006B8 78 5B            [12] 1592 	mov	r0,#_print
      0006BA E6               [12] 1593 	mov	a,@r0
      0006BB 30 E7 13         [24] 1594 	jnb	acc.7,00118$
      0006BE 05 6C            [12] 1595 	inc	_p_tail
      0006C0 A9 6C            [24] 1596 	mov	r1,_p_tail
      0006C2 78 28            [12] 1597 	mov	r0,#_ID
      0006C4 E6               [12] 1598 	mov	a,@r0
      0006C5 F7               [12] 1599 	mov	@r1,a
      0006C6 78 28            [12] 1600 	mov	r0,#_ID
      0006C8 E6               [12] 1601 	mov	a,@r0
      0006C9 24 24            [12] 1602 	add	a,#_bitmap
      0006CB F8               [12] 1603 	mov	r0,a
      0006CC 76 FF            [12] 1604 	mov	@r0,#0xFF
      0006CE 12r00r00         [24] 1605 	lcall	_ThreadYield
      0006D1                       1606 00118$:
      0006D1 D2 AF            [12] 1607 	setb	_EA
                                   1608 ;	testparking.c:299: SemaphoreWait(print,p_tail);
      0006D3 C2 AF            [12] 1609 	clr	_EA
      0006D5 78 5B            [12] 1610 	mov	r0,#_print
      0006D7 16               [12] 1611 	dec	@r0
      0006D8 78 5B            [12] 1612 	mov	r0,#_print
      0006DA E6               [12] 1613 	mov	a,@r0
      0006DB 30 E7 13         [24] 1614 	jnb	acc.7,00120$
      0006DE 05 6C            [12] 1615 	inc	_p_tail
      0006E0 A9 6C            [24] 1616 	mov	r1,_p_tail
      0006E2 78 28            [12] 1617 	mov	r0,#_ID
      0006E4 E6               [12] 1618 	mov	a,@r0
      0006E5 F7               [12] 1619 	mov	@r1,a
      0006E6 78 28            [12] 1620 	mov	r0,#_ID
      0006E8 E6               [12] 1621 	mov	a,@r0
      0006E9 24 24            [12] 1622 	add	a,#_bitmap
      0006EB F8               [12] 1623 	mov	r0,a
      0006EC 76 FF            [12] 1624 	mov	@r0,#0xFF
      0006EE 12r00r00         [24] 1625 	lcall	_ThreadYield
      0006F1                       1626 00120$:
      0006F1 D2 AF            [12] 1627 	setb	_EA
                                   1628 ;	testparking.c:300: c_temp = 0;
      0006F3 78 29            [12] 1629 	mov	r0,#_c_temp
      0006F5 76 00            [12] 1630 	mov	@r0,#0x00
                                   1631 ;	testparking.c:301: current = 1;
      0006F7 78 4C            [12] 1632 	mov	r0,#_current
      0006F9 76 01            [12] 1633 	mov	@r0,#0x01
                                   1634 ;	testparking.c:302: while(c_temp<4){
      0006FB                       1635 00190$:
      0006FB 78 29            [12] 1636 	mov	r0,#_c_temp
      0006FD C3               [12] 1637 	clr	c
      0006FE E6               [12] 1638 	mov	a,@r0
      0006FF 64 80            [12] 1639 	xrl	a,#0x80
      000701 94 84            [12] 1640 	subb	a,#0x84
      000703 40 01            [24] 1641 	jc	00382$
      000705 22               [24] 1642 	ret
      000706                       1643 00382$:
                                   1644 ;	testparking.c:303: for(j=0;j<10;j++){
      000706 78 4D            [12] 1645 	mov	r0,#_j
      000708 76 00            [12] 1646 	mov	@r0,#0x00
      00070A                       1647 00194$:
      00070A 78 4D            [12] 1648 	mov	r0,#_j
      00070C C3               [12] 1649 	clr	c
      00070D E6               [12] 1650 	mov	a,@r0
      00070E 64 80            [12] 1651 	xrl	a,#0x80
      000710 94 8A            [12] 1652 	subb	a,#0x8a
      000712 40 03            [24] 1653 	jc	00383$
      000714 02r08r1F         [24] 1654 	ljmp	00189$
      000717                       1655 00383$:
                                   1656 ;	testparking.c:304: c_temp2 = log[j];
      000717 78 4D            [12] 1657 	mov	r0,#_j
      000719 E6               [12] 1658 	mov	a,@r0
      00071A 24 30            [12] 1659 	add	a,#_log
      00071C F9               [12] 1660 	mov	r1,a
      00071D 78 4A            [12] 1661 	mov	r0,#_c_temp2
      00071F E7               [12] 1662 	mov	a,@r1
      000720 F6               [12] 1663 	mov	@r0,a
                                   1664 ;	testparking.c:305: c_temp3 = c_temp2&0x7F;
      000721 78 4A            [12] 1665 	mov	r0,#_c_temp2
      000723 79 5C            [12] 1666 	mov	r1,#_c_temp3
      000725 74 7F            [12] 1667 	mov	a,#0x7F
      000727 56               [12] 1668 	anl	a,@r0
      000728 F7               [12] 1669 	mov	@r1,a
                                   1670 ;	testparking.c:306: if(c_temp3==current){
      000729 78 5C            [12] 1671 	mov	r0,#_c_temp3
      00072B 79 4C            [12] 1672 	mov	r1,#_current
      00072D 86 F0            [24] 1673 	mov	b,@r0
      00072F E7               [12] 1674 	mov	a,@r1
      000730 B5 F0 02         [24] 1675 	cjne	a,b,00384$
      000733 80 03            [24] 1676 	sjmp	00385$
      000735                       1677 00384$:
      000735 02r08r19         [24] 1678 	ljmp	00195$
      000738                       1679 00385$:
                                   1680 ;	testparking.c:307: SBUF = 'c';
      000738 75 99 63         [24] 1681 	mov	_SBUF,#0x63
                                   1682 ;	testparking.c:308: while (!TI) { }
      00073B                       1683 00121$:
                                   1684 ;	testparking.c:309: TI = 0;
      00073B 10 99 02         [24] 1685 	jbc	_TI,00386$
      00073E 80 FB            [24] 1686 	sjmp	00121$
      000740                       1687 00386$:
                                   1688 ;	testparking.c:310: SBUF = 'a';
      000740 75 99 61         [24] 1689 	mov	_SBUF,#0x61
                                   1690 ;	testparking.c:311: while (!TI) { }
      000743                       1691 00124$:
                                   1692 ;	testparking.c:312: TI = 0;
      000743 10 99 02         [24] 1693 	jbc	_TI,00387$
      000746 80 FB            [24] 1694 	sjmp	00124$
      000748                       1695 00387$:
                                   1696 ;	testparking.c:313: SBUF = 'r';
      000748 75 99 72         [24] 1697 	mov	_SBUF,#0x72
                                   1698 ;	testparking.c:314: while (!TI) { }
      00074B                       1699 00127$:
                                   1700 ;	testparking.c:315: TI = 0;
      00074B 10 99 02         [24] 1701 	jbc	_TI,00388$
      00074E 80 FB            [24] 1702 	sjmp	00127$
      000750                       1703 00388$:
                                   1704 ;	testparking.c:316: SBUF = '0' + j/2;
      000750 78 4D            [12] 1705 	mov	r0,#_j
      000752 C2 D5            [12] 1706 	clr	F0
      000754 75 F0 02         [24] 1707 	mov	b,#0x02
      000757 E6               [12] 1708 	mov	a,@r0
      000758 30 E7 04         [24] 1709 	jnb	acc.7,00389$
      00075B B2 D5            [12] 1710 	cpl	F0
      00075D F4               [12] 1711 	cpl	a
      00075E 04               [12] 1712 	inc	a
      00075F                       1713 00389$:
      00075F 84               [48] 1714 	div	ab
      000760 30 D5 02         [24] 1715 	jnb	F0,00390$
      000763 F4               [12] 1716 	cpl	a
      000764 04               [12] 1717 	inc	a
      000765                       1718 00390$:
      000765 24 30            [12] 1719 	add	a,#0x30
      000767 F5 99            [12] 1720 	mov	_SBUF,a
                                   1721 ;	testparking.c:317: while (!TI) { }
      000769                       1722 00130$:
                                   1723 ;	testparking.c:318: TI = 0;
      000769 10 99 02         [24] 1724 	jbc	_TI,00391$
      00076C 80 FB            [24] 1725 	sjmp	00130$
      00076E                       1726 00391$:
                                   1727 ;	testparking.c:319: SBUF = ' ';
      00076E 75 99 20         [24] 1728 	mov	_SBUF,#0x20
                                   1729 ;	testparking.c:320: while (!TI) { }
      000771                       1730 00133$:
                                   1731 ;	testparking.c:321: TI = 0;
      000771 10 99 02         [24] 1732 	jbc	_TI,00392$
      000774 80 FB            [24] 1733 	sjmp	00133$
      000776                       1734 00392$:
                                   1735 ;	testparking.c:322: if(j%2){
      000776 78 4D            [12] 1736 	mov	r0,#_j
      000778 E6               [12] 1737 	mov	a,@r0
      000779 A2 E7            [12] 1738 	mov	c,acc.7
      00077B 54 01            [12] 1739 	anl	a,#0x01
      00077D 60 04            [24] 1740 	jz	00393$
      00077F 50 02            [24] 1741 	jnc	00393$
      000781 44 FE            [12] 1742 	orl	a,#0xfe
      000783                       1743 00393$:
      000783 60 1A            [24] 1744 	jz	00152$
                                   1745 ;	testparking.c:323: SBUF = 'o';
      000785 75 99 6F         [24] 1746 	mov	_SBUF,#0x6F
                                   1747 ;	testparking.c:324: while (!TI) { }
      000788                       1748 00136$:
                                   1749 ;	testparking.c:325: TI = 0;
      000788 10 99 02         [24] 1750 	jbc	_TI,00395$
      00078B 80 FB            [24] 1751 	sjmp	00136$
      00078D                       1752 00395$:
                                   1753 ;	testparking.c:326: SBUF = 'u';
      00078D 75 99 75         [24] 1754 	mov	_SBUF,#0x75
                                   1755 ;	testparking.c:327: while (!TI) { }
      000790                       1756 00139$:
                                   1757 ;	testparking.c:328: TI = 0;
      000790 10 99 02         [24] 1758 	jbc	_TI,00396$
      000793 80 FB            [24] 1759 	sjmp	00139$
      000795                       1760 00396$:
                                   1761 ;	testparking.c:329: SBUF = 't';
      000795 75 99 74         [24] 1762 	mov	_SBUF,#0x74
                                   1763 ;	testparking.c:330: while (!TI) { }
      000798                       1764 00142$:
                                   1765 ;	testparking.c:331: TI = 0;
      000798 10 99 02         [24] 1766 	jbc	_TI,00397$
      00079B 80 FB            [24] 1767 	sjmp	00142$
      00079D                       1768 00397$:
      00079D 80 10            [24] 1769 	sjmp	00153$
      00079F                       1770 00152$:
                                   1771 ;	testparking.c:334: SBUF = 'i';
      00079F 75 99 69         [24] 1772 	mov	_SBUF,#0x69
                                   1773 ;	testparking.c:335: while (!TI) { }
      0007A2                       1774 00145$:
                                   1775 ;	testparking.c:336: TI = 0;
      0007A2 10 99 02         [24] 1776 	jbc	_TI,00398$
      0007A5 80 FB            [24] 1777 	sjmp	00145$
      0007A7                       1778 00398$:
                                   1779 ;	testparking.c:337: SBUF = 'n';
      0007A7 75 99 6E         [24] 1780 	mov	_SBUF,#0x6E
                                   1781 ;	testparking.c:338: while (!TI) { }
      0007AA                       1782 00148$:
                                   1783 ;	testparking.c:339: TI = 0;
      0007AA 10 99 02         [24] 1784 	jbc	_TI,00399$
      0007AD 80 FB            [24] 1785 	sjmp	00148$
      0007AF                       1786 00399$:
      0007AF                       1787 00153$:
                                   1788 ;	testparking.c:341: SBUF = ' ';
      0007AF 75 99 20         [24] 1789 	mov	_SBUF,#0x20
                                   1790 ;	testparking.c:342: while (!TI) { }
      0007B2                       1791 00154$:
                                   1792 ;	testparking.c:343: TI = 0;
      0007B2 10 99 02         [24] 1793 	jbc	_TI,00400$
      0007B5 80 FB            [24] 1794 	sjmp	00154$
      0007B7                       1795 00400$:
                                   1796 ;	testparking.c:344: SBUF = 'p';
      0007B7 75 99 70         [24] 1797 	mov	_SBUF,#0x70
                                   1798 ;	testparking.c:345: while (!TI) { }
      0007BA                       1799 00157$:
                                   1800 ;	testparking.c:346: TI = 0;
      0007BA 10 99 02         [24] 1801 	jbc	_TI,00401$
      0007BD 80 FB            [24] 1802 	sjmp	00157$
      0007BF                       1803 00401$:
                                   1804 ;	testparking.c:347: SBUF = 'l';
      0007BF 75 99 6C         [24] 1805 	mov	_SBUF,#0x6C
                                   1806 ;	testparking.c:348: while (!TI) { }
      0007C2                       1807 00160$:
                                   1808 ;	testparking.c:349: TI = 0;
      0007C2 10 99 02         [24] 1809 	jbc	_TI,00402$
      0007C5 80 FB            [24] 1810 	sjmp	00160$
      0007C7                       1811 00402$:
                                   1812 ;	testparking.c:350: SBUF = 'o';
      0007C7 75 99 6F         [24] 1813 	mov	_SBUF,#0x6F
                                   1814 ;	testparking.c:351: while (!TI) { }
      0007CA                       1815 00163$:
                                   1816 ;	testparking.c:352: TI = 0;
      0007CA 10 99 02         [24] 1817 	jbc	_TI,00403$
      0007CD 80 FB            [24] 1818 	sjmp	00163$
      0007CF                       1819 00403$:
                                   1820 ;	testparking.c:353: SBUF = 't';
      0007CF 75 99 74         [24] 1821 	mov	_SBUF,#0x74
                                   1822 ;	testparking.c:354: while (!TI) { }
      0007D2                       1823 00166$:
                                   1824 ;	testparking.c:355: TI = 0;
      0007D2 10 99 02         [24] 1825 	jbc	_TI,00404$
      0007D5 80 FB            [24] 1826 	sjmp	00166$
      0007D7                       1827 00404$:
                                   1828 ;	testparking.c:356: SBUF = '0' + c_temp2/0x80;
      0007D7 78 4A            [12] 1829 	mov	r0,#_c_temp2
      0007D9 E6               [12] 1830 	mov	a,@r0
      0007DA 23               [12] 1831 	rl	a
      0007DB 54 01            [12] 1832 	anl	a,#0x01
      0007DD FF               [12] 1833 	mov	r7,a
      0007DE 24 30            [12] 1834 	add	a,#0x30
      0007E0 F5 99            [12] 1835 	mov	_SBUF,a
                                   1836 ;	testparking.c:357: while (!TI) { }
      0007E2                       1837 00169$:
                                   1838 ;	testparking.c:358: TI = 0;
      0007E2 10 99 02         [24] 1839 	jbc	_TI,00405$
      0007E5 80 FB            [24] 1840 	sjmp	00169$
      0007E7                       1841 00405$:
                                   1842 ;	testparking.c:359: SBUF = ' ';
      0007E7 75 99 20         [24] 1843 	mov	_SBUF,#0x20
                                   1844 ;	testparking.c:360: while (!TI) { }
      0007EA                       1845 00172$:
                                   1846 ;	testparking.c:361: TI = 0;
      0007EA 10 99 02         [24] 1847 	jbc	_TI,00406$
      0007ED 80 FB            [24] 1848 	sjmp	00172$
      0007EF                       1849 00406$:
                                   1850 ;	testparking.c:362: SBUF = 'a';
      0007EF 75 99 61         [24] 1851 	mov	_SBUF,#0x61
                                   1852 ;	testparking.c:363: while (!TI) { }
      0007F2                       1853 00175$:
                                   1854 ;	testparking.c:364: TI = 0;
      0007F2 10 99 02         [24] 1855 	jbc	_TI,00407$
      0007F5 80 FB            [24] 1856 	sjmp	00175$
      0007F7                       1857 00407$:
                                   1858 ;	testparking.c:365: SBUF = 't';
      0007F7 75 99 74         [24] 1859 	mov	_SBUF,#0x74
                                   1860 ;	testparking.c:366: while (!TI) { }
      0007FA                       1861 00178$:
                                   1862 ;	testparking.c:367: TI = 0;
      0007FA 10 99 02         [24] 1863 	jbc	_TI,00408$
      0007FD 80 FB            [24] 1864 	sjmp	00178$
      0007FF                       1865 00408$:
                                   1866 ;	testparking.c:368: SBUF = '0' + (c_temp2&0x7F);
      0007FF 78 4A            [12] 1867 	mov	r0,#_c_temp2
      000801 74 7F            [12] 1868 	mov	a,#0x7F
      000803 56               [12] 1869 	anl	a,@r0
      000804 FF               [12] 1870 	mov	r7,a
      000805 24 30            [12] 1871 	add	a,#0x30
      000807 F5 99            [12] 1872 	mov	_SBUF,a
                                   1873 ;	testparking.c:369: while (!TI) { }
      000809                       1874 00181$:
                                   1875 ;	testparking.c:370: TI = 0;
      000809 10 99 02         [24] 1876 	jbc	_TI,00409$
      00080C 80 FB            [24] 1877 	sjmp	00181$
      00080E                       1878 00409$:
                                   1879 ;	testparking.c:371: SBUF = '\n';
      00080E 75 99 0A         [24] 1880 	mov	_SBUF,#0x0A
                                   1881 ;	testparking.c:372: while (!TI) { }
      000811                       1882 00184$:
                                   1883 ;	testparking.c:373: TI = 0;
      000811 10 99 02         [24] 1884 	jbc	_TI,00410$
      000814 80 FB            [24] 1885 	sjmp	00184$
      000816                       1886 00410$:
                                   1887 ;	testparking.c:374: c_temp++;
      000816 78 29            [12] 1888 	mov	r0,#_c_temp
      000818 06               [12] 1889 	inc	@r0
      000819                       1890 00195$:
                                   1891 ;	testparking.c:303: for(j=0;j<10;j++){
      000819 78 4D            [12] 1892 	mov	r0,#_j
      00081B 06               [12] 1893 	inc	@r0
      00081C 02r07r0A         [24] 1894 	ljmp	00194$
      00081F                       1895 00189$:
                                   1896 ;	testparking.c:377: current++;
      00081F 78 4C            [12] 1897 	mov	r0,#_current
      000821 06               [12] 1898 	inc	@r0
      000822 02r06rFB         [24] 1899 	ljmp	00190$
                                   1900 ;------------------------------------------------------------
                                   1901 ;Allocation info for local variables in function 'main'
                                   1902 ;------------------------------------------------------------
                                   1903 ;	testparking.c:381: void main(void) {
                                   1904 ;	-----------------------------------------
                                   1905 ;	 function main
                                   1906 ;	-----------------------------------------
      000825                       1907 _main:
                                   1908 ;	testparking.c:383: plot[0] = plot[1] = 0;
      000825 78 4F            [12] 1909 	mov	r0,#(_plot + 0x0001)
      000827 76 00            [12] 1910 	mov	@r0,#0x00
      000829 78 4E            [12] 1911 	mov	r0,#_plot
      00082B 76 00            [12] 1912 	mov	@r0,#0x00
                                   1913 ;	testparking.c:385: SemaphoreCreate(mutex, 1);
      00082D 78 3A            [12] 1914 	mov	r0,#_mutex
      00082F 76 01            [12] 1915 	mov	@r0,#0x01
                                   1916 ;	testparking.c:386: SemaphoreCreate(print, 0);
      000831 78 5B            [12] 1917 	mov	r0,#_print
      000833 76 00            [12] 1918 	mov	@r0,#0x00
                                   1919 ;	testparking.c:390: __endasm;
      000835 75 6C 5C         [24] 1920 	mov _p_tail,#0x5C
      000838 75 3C 6C         [24] 1921 	mov _m_tail,#0x6C
                                   1922 ;	testparking.c:392: ThreadCreate(Car1);
      00083B 90r00r00         [24] 1923 	mov	dptr,#_Car1
      00083E 12r00r00         [24] 1924 	lcall	_ThreadCreate
                                   1925 ;	testparking.c:393: ThreadCreate(Car2);
      000841 90r01r20         [24] 1926 	mov	dptr,#_Car2
      000844 12r00r00         [24] 1927 	lcall	_ThreadCreate
                                   1928 ;	testparking.c:394: ThreadCreate(Car3);
      000847 90r02r42         [24] 1929 	mov	dptr,#_Car3
      00084A 12r00r00         [24] 1930 	lcall	_ThreadCreate
                                   1931 ;	testparking.c:395: ThreadCreate(Car4);
      00084D 90r03r64         [24] 1932 	mov	dptr,#_Car4
      000850 12r00r00         [24] 1933 	lcall	_ThreadCreate
                                   1934 ;	testparking.c:396: ThreadCreate(Car5);
      000853 90r04r86         [24] 1935 	mov	dptr,#_Car5
      000856 12r00r00         [24] 1936 	lcall	_ThreadCreate
                                   1937 ;	testparking.c:397: ThreadCreate(Printer);
      000859 90r05rA8         [24] 1938 	mov	dptr,#_Printer
      00085C 02r00r00         [24] 1939 	ljmp	_ThreadCreate
                                   1940 ;------------------------------------------------------------
                                   1941 ;Allocation info for local variables in function '_sdcc_gsinit_startup'
                                   1942 ;------------------------------------------------------------
                                   1943 ;	testparking.c:400: void _sdcc_gsinit_startup(void) {
                                   1944 ;	-----------------------------------------
                                   1945 ;	 function _sdcc_gsinit_startup
                                   1946 ;	-----------------------------------------
      00085F                       1947 __sdcc_gsinit_startup:
                                   1948 ;	testparking.c:403: __endasm;
      00085F 02r00r00         [24] 1949 	ljmp _Bootstrap
      000862 22               [24] 1950 	ret
                                   1951 ;------------------------------------------------------------
                                   1952 ;Allocation info for local variables in function '_mcs51_genRAMCLEAR'
                                   1953 ;------------------------------------------------------------
                                   1954 ;	testparking.c:406: void _mcs51_genRAMCLEAR(void) {}
                                   1955 ;	-----------------------------------------
                                   1956 ;	 function _mcs51_genRAMCLEAR
                                   1957 ;	-----------------------------------------
      000863                       1958 __mcs51_genRAMCLEAR:
      000863 22               [24] 1959 	ret
                                   1960 ;------------------------------------------------------------
                                   1961 ;Allocation info for local variables in function '_mcs51_genXINIT'
                                   1962 ;------------------------------------------------------------
                                   1963 ;	testparking.c:407: void _mcs51_genXINIT(void) {}
                                   1964 ;	-----------------------------------------
                                   1965 ;	 function _mcs51_genXINIT
                                   1966 ;	-----------------------------------------
      000864                       1967 __mcs51_genXINIT:
      000864 22               [24] 1968 	ret
                                   1969 ;------------------------------------------------------------
                                   1970 ;Allocation info for local variables in function '_mcs51_genXRAMCLEAR'
                                   1971 ;------------------------------------------------------------
                                   1972 ;	testparking.c:408: void _mcs51_genXRAMCLEAR(void) {}
                                   1973 ;	-----------------------------------------
                                   1974 ;	 function _mcs51_genXRAMCLEAR
                                   1975 ;	-----------------------------------------
      000865                       1976 __mcs51_genXRAMCLEAR:
      000865 22               [24] 1977 	ret
                                   1978 ;------------------------------------------------------------
                                   1979 ;Allocation info for local variables in function 'timer0_ISR'
                                   1980 ;------------------------------------------------------------
                                   1981 ;	testparking.c:409: void timer0_ISR(void) __interrupt(1) {
                                   1982 ;	-----------------------------------------
                                   1983 ;	 function timer0_ISR
                                   1984 ;	-----------------------------------------
      000866                       1985 _timer0_ISR:
                                   1986 ;	testparking.c:412: __endasm;
      000866 02r00r00         [24] 1987 	ljmp _myTimer0Handler
      000869 32               [24] 1988 	reti
                                   1989 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1990 ;	eliminated unneeded push/pop psw
                                   1991 ;	eliminated unneeded push/pop dpl
                                   1992 ;	eliminated unneeded push/pop dph
                                   1993 ;	eliminated unneeded push/pop b
                                   1994 ;	eliminated unneeded push/pop acc
                                   1995 	.area CSEG    (CODE)
                                   1996 	.area CONST   (CODE)
                                   1997 	.area XINIT   (CODE)
                                   1998 	.area CABS    (ABS,CODE)
